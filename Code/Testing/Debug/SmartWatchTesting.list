
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e254  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00027a84  0800e508  0800e508  0000f508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08035f8c  08035f8c  00036f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08035f94  08035f94  00036f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08035f98  08035f98  00036f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000268  24000000  08035f9c  00037000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016fc  24000268  08036204  00037268  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001964  08036204  00037964  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00037268  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001da8c  00000000  00000000  00037296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d61  00000000  00000000  00054d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001318  00000000  00000000  00058a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ea1  00000000  00000000  00059da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000334b0  00000000  00000000  0005ac41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e783  00000000  00000000  0008e0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d736  00000000  00000000  000ac874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9faa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d48  00000000  00000000  001e9ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001efd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000268 	.word	0x24000268
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e4ec 	.word	0x0800e4ec

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400026c 	.word	0x2400026c
 80002ec:	0800e4ec 	.word	0x0800e4ec

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fbbc 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fbd3 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fbb4 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fbcb 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fbac 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fbc3 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fba4 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fbbb 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fb9c 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fbb3 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b80      	ldr	r3, [pc, #512]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a7e      	ldr	r2, [pc, #504]	@ (8000964 <MX_GPIO_Init+0x218>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b7c      	ldr	r3, [pc, #496]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b78      	ldr	r3, [pc, #480]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a77      	ldr	r2, [pc, #476]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b74      	ldr	r3, [pc, #464]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b71      	ldr	r3, [pc, #452]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a6f      	ldr	r2, [pc, #444]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b6d      	ldr	r3, [pc, #436]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b69      	ldr	r3, [pc, #420]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a68      	ldr	r2, [pc, #416]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b65      	ldr	r3, [pc, #404]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b62      	ldr	r3, [pc, #392]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a60      	ldr	r2, [pc, #384]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000964 <MX_GPIO_Init+0x218>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a59      	ldr	r2, [pc, #356]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b56      	ldr	r3, [pc, #344]	@ (8000964 <MX_GPIO_Init+0x218>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a51      	ldr	r2, [pc, #324]	@ (8000964 <MX_GPIO_Init+0x218>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b4f      	ldr	r3, [pc, #316]	@ (8000964 <MX_GPIO_Init+0x218>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	484b      	ldr	r0, [pc, #300]	@ (8000968 <MX_GPIO_Init+0x21c>)
 800083a:	f004 fc61 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000844:	4849      	ldr	r0, [pc, #292]	@ (800096c <MX_GPIO_Init+0x220>)
 8000846:	f004 fc5b 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	4847      	ldr	r0, [pc, #284]	@ (8000970 <MX_GPIO_Init+0x224>)
 8000852:	f004 fc55 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	4845      	ldr	r0, [pc, #276]	@ (8000974 <MX_GPIO_Init+0x228>)
 800085e:	f004 fc4f 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000868:	4842      	ldr	r0, [pc, #264]	@ (8000974 <MX_GPIO_Init+0x228>)
 800086a:	f004 fc49 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	4840      	ldr	r0, [pc, #256]	@ (8000978 <MX_GPIO_Init+0x22c>)
 8000876:	f004 fc43 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	483b      	ldr	r0, [pc, #236]	@ (800096c <MX_GPIO_Init+0x220>)
 8000880:	f004 fc3e 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	4839      	ldr	r0, [pc, #228]	@ (8000970 <MX_GPIO_Init+0x224>)
 800088a:	f004 fc39 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4836      	ldr	r0, [pc, #216]	@ (800097c <MX_GPIO_Init+0x230>)
 80008a4:	f004 fa7c 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80008a8:	2308      	movs	r3, #8
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	482a      	ldr	r0, [pc, #168]	@ (8000968 <MX_GPIO_Init+0x21c>)
 80008c0:	f004 fa6e 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4;
 80008c4:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4823      	ldr	r0, [pc, #140]	@ (800096c <MX_GPIO_Init+0x220>)
 80008de:	f004 fa5f 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 80008e2:	f248 0302 	movw	r3, #32770	@ 0x8002
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481d      	ldr	r0, [pc, #116]	@ (8000970 <MX_GPIO_Init+0x224>)
 80008fc:	f004 fa50 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8000900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090e:	2302      	movs	r3, #2
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <MX_GPIO_Init+0x228>)
 800091a:	f004 fa41 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 800091e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000938:	f004 fa32 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800093c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <MX_GPIO_Init+0x22c>)
 8000956:	f004 fa23 	bl	8004da0 <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	@ 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	58024400 	.word	0x58024400
 8000968:	58020000 	.word	0x58020000
 800096c:	58020400 	.word	0x58020400
 8000970:	58021000 	.word	0x58021000
 8000974:	58020c00 	.word	0x58020c00
 8000978:	58021800 	.word	0x58021800
 800097c:	58020800 	.word	0x58020800

08000980 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_I2C2_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <MX_I2C2_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_I2C2_Init+0x74>)
 800098c:	4a1b      	ldr	r2, [pc, #108]	@ (80009fc <MX_I2C2_Init+0x7c>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_I2C2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_I2C2_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ba:	480e      	ldr	r0, [pc, #56]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009bc:	f004 fbba 	bl	8005134 <HAL_I2C_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 fac7 	bl	8000f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4809      	ldr	r0, [pc, #36]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009ce:	f004 fc4d 	bl	800526c <HAL_I2CEx_ConfigAnalogFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 fabe 	bl	8000f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_I2C2_Init+0x74>)
 80009e0:	f004 fc8f 	bl	8005302 <HAL_I2CEx_ConfigDigitalFilter>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 fab5 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24000284 	.word	0x24000284
 80009f8:	40005800 	.word	0x40005800
 80009fc:	20b0ccff 	.word	0x20b0ccff

08000a00 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <MX_I2C4_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <MX_I2C4_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a3c:	f004 fb7a 	bl	8005134 <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 fa87 	bl	8000f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a4e:	f004 fc0d 	bl	800526c <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 fa7e 	bl	8000f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_I2C4_Init+0x74>)
 8000a60:	f004 fc4f 	bl	8005302 <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fa75 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	240002d8 	.word	0x240002d8
 8000a78:	58001c00 	.word	0x58001c00
 8000a7c:	20b0ccff 	.word	0x20b0ccff

08000a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0bc      	sub	sp, #240	@ 0xf0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	22c0      	movs	r2, #192	@ 0xc0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00b fcc6 	bl	800c432 <memset>
  if(i2cHandle->Instance==I2C2)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8000be0 <HAL_I2C_MspInit+0x160>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d147      	bne.n	8000b40 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ab0:	f04f 0208 	mov.w	r2, #8
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f005 fc80 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ad2:	f000 fa41 	bl	8000f58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b43      	ldr	r3, [pc, #268]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000ad8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000adc:	4a41      	ldr	r2, [pc, #260]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000af4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4833      	ldr	r0, [pc, #204]	@ (8000be8 <HAL_I2C_MspInit+0x168>)
 8000b1c:	f004 f940 	bl	8004da0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b20:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b26:	4a2f      	ldr	r2, [pc, #188]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b2c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000b30:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000b3e:	e04b      	b.n	8000bd8 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C4)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a29      	ldr	r2, [pc, #164]	@ (8000bec <HAL_I2C_MspInit+0x16c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d146      	bne.n	8000bd8 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b4a:	f04f 0210 	mov.w	r2, #16
 8000b4e:	f04f 0300 	mov.w	r3, #0
 8000b52:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 fc33 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000b6c:	f000 f9f4 	bl	8000f58 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b76:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000b8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	2312      	movs	r3, #18
 8000b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480e      	ldr	r0, [pc, #56]	@ (8000bf0 <HAL_I2C_MspInit+0x170>)
 8000bb6:	f004 f8f3 	bl	8004da0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000bbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bc0:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_I2C_MspInit+0x164>)
 8000bcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
}
 8000bd8:	bf00      	nop
 8000bda:	37f0      	adds	r7, #240	@ 0xf0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40005800 	.word	0x40005800
 8000be4:	58024400 	.word	0x58024400
 8000be8:	58020400 	.word	0x58020400
 8000bec:	58001c00 	.word	0x58001c00
 8000bf0:	58020c00 	.word	0x58020c00

08000bf4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000bfc:	1d39      	adds	r1, r7, #4
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	2201      	movs	r2, #1
 8000c04:	4803      	ldr	r0, [pc, #12]	@ (8000c14 <__io_putchar+0x20>)
 8000c06:	f008 f9c6 	bl	8008f96 <HAL_UART_Transmit>
	return chr;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2400065c 	.word	0x2400065c

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c1c:	f000 f970 	bl	8000f00 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 ff96 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f81a 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f7ff fd90 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f7ff fd4e 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000c30:	f000 fc9a 	bl	8001568 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000c34:	f000 fd30 	bl	8001698 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000c38:	f7ff fea2 	bl	8000980 <MX_I2C2_Init>
  MX_UART5_Init();
 8000c3c:	f000 fce0 	bl	8001600 <MX_UART5_Init>
  MX_SPI1_Init();
 8000c40:	f000 f990 	bl	8000f64 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000c44:	f7ff fedc 	bl	8000a00 <MX_I2C4_Init>
	GNSS_LoadConfig(&GNSS_Handle);
	uint32_t Timer = HAL_GetTick();
#endif

#ifdef SCREEN_TEST
	ST7789_Init();
 8000c48:	f00a fd52 	bl	800b6f0 <ST7789_Init>
		HAL_Delay(1000);

#endif

#ifdef SCREEN_TEST
		Display_EnvironnementData(30,70,&SmartWatchData_handle);
 8000c4c:	4a02      	ldr	r2, [pc, #8]	@ (8000c58 <main+0x40>)
 8000c4e:	2146      	movs	r1, #70	@ 0x46
 8000c50:	201e      	movs	r0, #30
 8000c52:	f00a fb87 	bl	800b364 <Display_EnvironnementData>
 8000c56:	e7f9      	b.n	8000c4c <main+0x34>
 8000c58:	240009dc 	.word	0x240009dc

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09c      	sub	sp, #112	@ 0x70
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00b fbe1 	bl	800c432 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2220      	movs	r2, #32
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00b fbdb 	bl	800c432 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <SystemClock_Config+0xe0>)
 8000c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c86:	2004      	movs	r0, #4
 8000c88:	f004 fb88 	bl	800539c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <SystemClock_Config+0xe4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	@ (8000d40 <SystemClock_Config+0xe4>)
 8000c96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <SystemClock_Config+0xe4>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ca8:	bf00      	nop
 8000caa:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <SystemClock_Config+0xe4>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cb6:	d1f8      	bne.n	8000caa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000cce:	2346      	movs	r3, #70	@ 0x46
 8000cd0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 fbae 	bl	8005450 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000cfa:	f000 f92d 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	233f      	movs	r3, #63	@ 0x3f
 8000d00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2303      	movs	r3, #3
 8000d04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d0e:	2340      	movs	r3, #64	@ 0x40
 8000d10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d12:	2340      	movs	r3, #64	@ 0x40
 8000d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d1c:	2340      	movs	r3, #64	@ 0x40
 8000d1e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2106      	movs	r1, #6
 8000d24:	4618      	mov	r0, r3
 8000d26:	f004 ffc5 	bl	8005cb4 <HAL_RCC_ClockConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d30:	f000 f912 	bl	8000f58 <Error_Handler>
  }
}
 8000d34:	bf00      	nop
 8000d36:	3770      	adds	r7, #112	@ 0x70
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58024800 	.word	0x58024800

08000d44 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a56      	ldr	r2, [pc, #344]	@ (8000eb0 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	f040 80a5 	bne.w	8000ea6 <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4954      	ldr	r1, [pc, #336]	@ (8000eb4 <HAL_UARTEx_RxEventCallback+0x170>)
 8000d62:	4855      	ldr	r0, [pc, #340]	@ (8000eb8 <HAL_UARTEx_RxEventCallback+0x174>)
 8000d64:	f00b fbe5 	bl	800c532 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	4a53      	ldr	r2, [pc, #332]	@ (8000eb8 <HAL_UARTEx_RxEventCallback+0x174>)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000d70:	4b52      	ldr	r3, [pc, #328]	@ (8000ebc <HAL_UARTEx_RxEventCallback+0x178>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f008 f99c 	bl	80090b4 <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000d7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d80:	2100      	movs	r1, #0
 8000d82:	484c      	ldr	r0, [pc, #304]	@ (8000eb4 <HAL_UARTEx_RxEventCallback+0x170>)
 8000d84:	f00b fb55 	bl	800c432 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000d88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d8c:	4949      	ldr	r1, [pc, #292]	@ (8000eb4 <HAL_UARTEx_RxEventCallback+0x170>)
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f00a f9bb 	bl	800b10a <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a48      	ldr	r2, [pc, #288]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0x17c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d068      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a46      	ldr	r2, [pc, #280]	@ (8000ec4 <HAL_UARTEx_RxEventCallback+0x180>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d061      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a43      	ldr	r2, [pc, #268]	@ (8000ec8 <HAL_UARTEx_RxEventCallback+0x184>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d05a      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a41      	ldr	r2, [pc, #260]	@ (8000ecc <HAL_UARTEx_RxEventCallback+0x188>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d053      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed0 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d04c      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ed4 <HAL_UARTEx_RxEventCallback+0x190>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d045      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a39      	ldr	r2, [pc, #228]	@ (8000ed8 <HAL_UARTEx_RxEventCallback+0x194>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d03e      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a37      	ldr	r2, [pc, #220]	@ (8000edc <HAL_UARTEx_RxEventCallback+0x198>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d037      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a34      	ldr	r2, [pc, #208]	@ (8000ee0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d030      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a32      	ldr	r2, [pc, #200]	@ (8000ee4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d029      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d022      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a2d      	ldr	r2, [pc, #180]	@ (8000eec <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d01b      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d014      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d00d      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a25      	ldr	r2, [pc, #148]	@ (8000ef8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d006      	beq.n	8000e74 <HAL_UARTEx_RxEventCallback+0x130>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a23      	ldr	r2, [pc, #140]	@ (8000efc <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d10c      	bne.n	8000e8e <HAL_UARTEx_RxEventCallback+0x14a>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0208 	bic.w	r2, r2, #8
 8000e8a:	601a      	str	r2, [r3, #0]
    }
}
 8000e8c:	e00b      	b.n	8000ea6 <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0204 	bic.w	r2, r2, #4
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004c00 	.word	0x40004c00
 8000eb4:	240008d4 	.word	0x240008d4
 8000eb8:	2400032c 	.word	0x2400032c
 8000ebc:	2400042c 	.word	0x2400042c
 8000ec0:	40020010 	.word	0x40020010
 8000ec4:	40020028 	.word	0x40020028
 8000ec8:	40020040 	.word	0x40020040
 8000ecc:	40020058 	.word	0x40020058
 8000ed0:	40020070 	.word	0x40020070
 8000ed4:	40020088 	.word	0x40020088
 8000ed8:	400200a0 	.word	0x400200a0
 8000edc:	400200b8 	.word	0x400200b8
 8000ee0:	40020410 	.word	0x40020410
 8000ee4:	40020428 	.word	0x40020428
 8000ee8:	40020440 	.word	0x40020440
 8000eec:	40020458 	.word	0x40020458
 8000ef0:	40020470 	.word	0x40020470
 8000ef4:	40020488 	.word	0x40020488
 8000ef8:	400204a0 	.word	0x400204a0
 8000efc:	400204b8 	.word	0x400204b8

08000f00 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f12:	f000 ffe3 	bl	8001edc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f22:	231f      	movs	r3, #31
 8000f24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f26:	2387      	movs	r3, #135	@ 0x87
 8000f28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f32:	2301      	movs	r3, #1
 8000f34:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f42:	463b      	mov	r3, r7
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 f801 	bl	8001f4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f4a:	2004      	movs	r0, #4
 8000f4c:	f000 ffde 	bl	8001f0c <HAL_MPU_Enable>

}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <Error_Handler+0x8>

08000f64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f68:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001014 <MX_SPI1_Init+0xb0>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f96:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000f9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_SPI1_Init+0xac>)
 8000ffc:	f006 ffc6 	bl	8007f8c <HAL_SPI_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8001006:	f7ff ffa7 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24000430 	.word	0x24000430
 8001014:	40013000 	.word	0x40013000

08001018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ba      	sub	sp, #232	@ 0xe8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00b f9fa 	bl	800c432 <memset>
  if(spiHandle->Instance==SPI1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a40      	ldr	r2, [pc, #256]	@ (8001144 <HAL_SPI_MspInit+0x12c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d179      	bne.n	800113c <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001048:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001054:	2300      	movs	r3, #0
 8001056:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f005 f9b5 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001068:	f7ff ff76 	bl	8000f58 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_SPI_MspInit+0x130>)
 800106e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001072:	4a35      	ldr	r2, [pc, #212]	@ (8001148 <HAL_SPI_MspInit+0x130>)
 8001074:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001078:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800107c:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <HAL_SPI_MspInit+0x130>)
 800107e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <HAL_SPI_MspInit+0x130>)
 800108c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001090:	4a2d      	ldr	r2, [pc, #180]	@ (8001148 <HAL_SPI_MspInit+0x130>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800109a:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <HAL_SPI_MspInit+0x130>)
 800109c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010a8:	23a0      	movs	r3, #160	@ 0xa0
 80010aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c0:	2305      	movs	r3, #5
 80010c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ca:	4619      	mov	r1, r3
 80010cc:	481f      	ldr	r0, [pc, #124]	@ (800114c <HAL_SPI_MspInit+0x134>)
 80010ce:	f003 fe67 	bl	8004da0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 80010d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001154 <HAL_SPI_MspInit+0x13c>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 80010da:	2226      	movs	r2, #38	@ 0x26
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 80010e0:	2240      	movs	r2, #64	@ 0x40
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001110:	480f      	ldr	r0, [pc, #60]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 8001112:	f000 ff5b 	bl	8001fcc <HAL_DMA_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 800111c:	f7ff ff1c 	bl	8000f58 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 8001124:	679a      	str	r2, [r3, #120]	@ 0x78
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <HAL_SPI_MspInit+0x138>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2023      	movs	r0, #35	@ 0x23
 8001132:	f000 fe9e 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001136:	2023      	movs	r0, #35	@ 0x23
 8001138:	f000 feb5 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	37e8      	adds	r7, #232	@ 0xe8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40013000 	.word	0x40013000
 8001148:	58024400 	.word	0x58024400
 800114c:	58020000 	.word	0x58020000
 8001150:	240004b8 	.word	0x240004b8
 8001154:	40020088 	.word	0x40020088

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_MspInit+0x30>)
 8001160:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001164:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x30>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x30>)
 8001170:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	58024400 	.word	0x58024400

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <NMI_Handler+0x4>

08001194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <MemManage_Handler+0x4>

080011a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e2:	f000 fd27 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <DMA1_Stream0_IRQHandler+0x10>)
 80011f2:	f002 fa47 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240007e0 	.word	0x240007e0

08001200 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <DMA1_Stream1_IRQHandler+0x10>)
 8001206:	f002 fa3d 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	24000858 	.word	0x24000858

08001214 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <DMA1_Stream2_IRQHandler+0x10>)
 800121a:	f002 fa33 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	240006f0 	.word	0x240006f0

08001228 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <DMA1_Stream3_IRQHandler+0x10>)
 800122e:	f002 fa29 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	24000768 	.word	0x24000768

0800123c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001240:	4802      	ldr	r0, [pc, #8]	@ (800124c <DMA1_Stream5_IRQHandler+0x10>)
 8001242:	f002 fa1f 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	240004b8 	.word	0x240004b8

08001250 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001254:	4802      	ldr	r0, [pc, #8]	@ (8001260 <SPI1_IRQHandler+0x10>)
 8001256:	f007 faed 	bl	8008834 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000430 	.word	0x24000430

08001264 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <UART4_IRQHandler+0x10>)
 800126a:	f007 ffd9 	bl	8009220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	24000534 	.word	0x24000534

08001278 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <UART5_IRQHandler+0x10>)
 800127e:	f007 ffcf 	bl	8009220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	240005c8 	.word	0x240005c8

0800128c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return 1;
 8001290:	2301      	movs	r3, #1
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <_kill>:

int _kill(int pid, int sig)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a6:	f00b f917 	bl	800c4d8 <__errno>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2216      	movs	r2, #22
 80012ae:	601a      	str	r2, [r3, #0]
  return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_exit>:

void _exit (int status)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffe7 	bl	800129c <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ce:	bf00      	nop
 80012d0:	e7fd      	b.n	80012ce <_exit+0x12>

080012d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e00a      	b.n	80012fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e4:	f3af 8000 	nop.w
 80012e8:	4601      	mov	r1, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60ba      	str	r2, [r7, #8]
 80012f0:	b2ca      	uxtb	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbf0      	blt.n	80012e4 <_read+0x12>
  }

  return len;
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e009      	b.n	8001332 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fc64 	bl	8000bf4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbf1      	blt.n	800131e <_write+0x12>
  }
  return len;
 800133a:	687b      	ldr	r3, [r7, #4]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_close>:

int _close(int file)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800136c:	605a      	str	r2, [r3, #4]
  return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_isatty>:

int _isatty(int file)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001392:	b480      	push	{r7}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f00b f87c 	bl	800c4d8 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24100000 	.word	0x24100000
 800140c:	00000400 	.word	0x00000400
 8001410:	24000530 	.word	0x24000530
 8001414:	24001968 	.word	0x24001968

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800141c:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <SystemInit+0x100>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001422:	4a3d      	ldr	r2, [pc, #244]	@ (8001518 <SystemInit+0x100>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142c:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <SystemInit+0x104>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	2b02      	cmp	r3, #2
 8001436:	d807      	bhi.n	8001448 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001438:	4b38      	ldr	r3, [pc, #224]	@ (800151c <SystemInit+0x104>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	4a36      	ldr	r2, [pc, #216]	@ (800151c <SystemInit+0x104>)
 8001442:	f043 0303 	orr.w	r3, r3, #3
 8001446:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001448:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <SystemInit+0x108>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a34      	ldr	r2, [pc, #208]	@ (8001520 <SystemInit+0x108>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001454:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <SystemInit+0x108>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <SystemInit+0x108>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4930      	ldr	r1, [pc, #192]	@ (8001520 <SystemInit+0x108>)
 8001460:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <SystemInit+0x10c>)
 8001462:	4013      	ands	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001466:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <SystemInit+0x104>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001472:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <SystemInit+0x104>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 030f 	bic.w	r3, r3, #15
 800147a:	4a28      	ldr	r2, [pc, #160]	@ (800151c <SystemInit+0x104>)
 800147c:	f043 0303 	orr.w	r3, r3, #3
 8001480:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <SystemInit+0x108>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <SystemInit+0x108>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800148e:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <SystemInit+0x108>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <SystemInit+0x108>)
 8001496:	4a24      	ldr	r2, [pc, #144]	@ (8001528 <SystemInit+0x110>)
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <SystemInit+0x108>)
 800149c:	4a23      	ldr	r2, [pc, #140]	@ (800152c <SystemInit+0x114>)
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <SystemInit+0x108>)
 80014a2:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <SystemInit+0x118>)
 80014a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <SystemInit+0x108>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <SystemInit+0x108>)
 80014ae:	4a20      	ldr	r2, [pc, #128]	@ (8001530 <SystemInit+0x118>)
 80014b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <SystemInit+0x108>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <SystemInit+0x108>)
 80014ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <SystemInit+0x118>)
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <SystemInit+0x108>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <SystemInit+0x108>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <SystemInit+0x108>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <SystemInit+0x108>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <SystemInit+0x108>)
 80014d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80014dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d113      	bne.n	800150c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <SystemInit+0x108>)
 80014e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80014ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <SystemInit+0x108>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <SystemInit+0x11c>)
 80014f6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014fa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <SystemInit+0x108>)
 80014fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <SystemInit+0x108>)
 8001504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001508:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	52002000 	.word	0x52002000
 8001520:	58024400 	.word	0x58024400
 8001524:	eaf6ed7f 	.word	0xeaf6ed7f
 8001528:	02020200 	.word	0x02020200
 800152c:	01ff0000 	.word	0x01ff0000
 8001530:	01010280 	.word	0x01010280
 8001534:	52004000 	.word	0x52004000

08001538 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <ExitRun0Mode+0x2c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <ExitRun0Mode+0x2c>)
 8001542:	f023 0302 	bic.w	r3, r3, #2
 8001546:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001548:	bf00      	nop
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <ExitRun0Mode+0x2c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f9      	beq.n	800154a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	58024800 	.word	0x58024800

08001568 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <MX_UART4_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <MX_UART4_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <MX_UART4_Init+0x90>)
 8001574:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001578:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_UART4_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <MX_UART4_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_UART4_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_UART4_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_UART4_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_UART4_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_UART4_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_UART4_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_UART4_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_UART4_Init+0x90>)
 80015b2:	f007 fca0 	bl	8008ef6 <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015bc:	f7ff fccc 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_UART4_Init+0x90>)
 80015c4:	f009 fd25 	bl	800b012 <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f7ff fcc3 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_UART4_Init+0x90>)
 80015d6:	f009 fd5a 	bl	800b08e <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f7ff fcba 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_UART4_Init+0x90>)
 80015e6:	f009 fcdb 	bl	800afa0 <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f7ff fcb2 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	24000534 	.word	0x24000534
 80015fc:	40004c00 	.word	0x40004c00

08001600 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <MX_UART5_Init+0x90>)
 8001606:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <MX_UART5_Init+0x94>)
 8001608:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <MX_UART5_Init+0x90>)
 800160c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001610:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <MX_UART5_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MX_UART5_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MX_UART5_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <MX_UART5_Init+0x90>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <MX_UART5_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <MX_UART5_Init+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <MX_UART5_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <MX_UART5_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <MX_UART5_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001648:	4811      	ldr	r0, [pc, #68]	@ (8001690 <MX_UART5_Init+0x90>)
 800164a:	f007 fc54 	bl	8008ef6 <HAL_UART_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001654:	f7ff fc80 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	480d      	ldr	r0, [pc, #52]	@ (8001690 <MX_UART5_Init+0x90>)
 800165c:	f009 fcd9 	bl	800b012 <HAL_UARTEx_SetTxFifoThreshold>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001666:	f7ff fc77 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4808      	ldr	r0, [pc, #32]	@ (8001690 <MX_UART5_Init+0x90>)
 800166e:	f009 fd0e 	bl	800b08e <HAL_UARTEx_SetRxFifoThreshold>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001678:	f7ff fc6e 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	@ (8001690 <MX_UART5_Init+0x90>)
 800167e:	f009 fc8f 	bl	800afa0 <HAL_UARTEx_DisableFifoMode>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001688:	f7ff fc66 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	240005c8 	.word	0x240005c8
 8001694:	40005000 	.word	0x40005000

08001698 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 800169e:	4a23      	ldr	r2, [pc, #140]	@ (800172c <MX_USART3_UART_Init+0x94>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016a2:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016e0:	4811      	ldr	r0, [pc, #68]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016e2:	f007 fc08 	bl	8008ef6 <HAL_UART_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016ec:	f7ff fc34 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f0:	2100      	movs	r1, #0
 80016f2:	480d      	ldr	r0, [pc, #52]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 80016f4:	f009 fc8d 	bl	800b012 <HAL_UARTEx_SetTxFifoThreshold>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016fe:	f7ff fc2b 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001702:	2100      	movs	r1, #0
 8001704:	4808      	ldr	r0, [pc, #32]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 8001706:	f009 fcc2 	bl	800b08e <HAL_UARTEx_SetRxFifoThreshold>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001710:	f7ff fc22 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	@ (8001728 <MX_USART3_UART_Init+0x90>)
 8001716:	f009 fc43 	bl	800afa0 <HAL_UARTEx_DisableFifoMode>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001720:	f7ff fc1a 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2400065c 	.word	0x2400065c
 800172c:	40004800 	.word	0x40004800

08001730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0be      	sub	sp, #248	@ 0xf8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	22c0      	movs	r2, #192	@ 0xc0
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00a fe6e 	bl	800c432 <memset>
  if(uartHandle->Instance==UART4)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4ab0      	ldr	r2, [pc, #704]	@ (8001a1c <HAL_UART_MspInit+0x2ec>)
 800175c:	4293      	cmp	r3, r2
 800175e:	f040 80ac 	bne.w	80018ba <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001762:	f04f 0202 	mov.w	r2, #2
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fe27 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001784:	f7ff fbe8 	bl	8000f58 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001788:	4ba5      	ldr	r3, [pc, #660]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 800178a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800178e:	4aa4      	ldr	r2, [pc, #656]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 8001790:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001794:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001798:	4ba1      	ldr	r3, [pc, #644]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 800179a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800179e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b9e      	ldr	r3, [pc, #632]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 80017a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017ac:	4a9c      	ldr	r2, [pc, #624]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017b6:	4b9a      	ldr	r3, [pc, #616]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 80017b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017de:	2308      	movs	r3, #8
 80017e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017e8:	4619      	mov	r1, r3
 80017ea:	488e      	ldr	r0, [pc, #568]	@ (8001a24 <HAL_UART_MspInit+0x2f4>)
 80017ec:	f003 fad8 	bl	8004da0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80017f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 80017f2:	4a8e      	ldr	r2, [pc, #568]	@ (8001a2c <HAL_UART_MspInit+0x2fc>)
 80017f4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80017f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 80017f8:	223f      	movs	r2, #63	@ 0x3f
 80017fa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001802:	4b89      	ldr	r3, [pc, #548]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001808:	4b87      	ldr	r3, [pc, #540]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 800180a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001810:	4b85      	ldr	r3, [pc, #532]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001816:	4b84      	ldr	r3, [pc, #528]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800181c:	4b82      	ldr	r3, [pc, #520]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 800181e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001822:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001824:	4b80      	ldr	r3, [pc, #512]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800182a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001830:	487d      	ldr	r0, [pc, #500]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 8001832:	f000 fbcb 	bl	8001fcc <HAL_DMA_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 800183c:	f7ff fb8c 	bl	8000f58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a79      	ldr	r2, [pc, #484]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 8001844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001848:	4a77      	ldr	r2, [pc, #476]	@ (8001a28 <HAL_UART_MspInit+0x2f8>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 800184e:	4b78      	ldr	r3, [pc, #480]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001850:	4a78      	ldr	r2, [pc, #480]	@ (8001a34 <HAL_UART_MspInit+0x304>)
 8001852:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001854:	4b76      	ldr	r3, [pc, #472]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001856:	2240      	movs	r2, #64	@ 0x40
 8001858:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185a:	4b75      	ldr	r3, [pc, #468]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 800185c:	2240      	movs	r2, #64	@ 0x40
 800185e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001860:	4b73      	ldr	r3, [pc, #460]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001866:	4b72      	ldr	r3, [pc, #456]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001868:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800186c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800186e:	4b70      	ldr	r3, [pc, #448]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001874:	4b6e      	ldr	r3, [pc, #440]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800187a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001880:	4b6b      	ldr	r3, [pc, #428]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001886:	4b6a      	ldr	r3, [pc, #424]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800188c:	4868      	ldr	r0, [pc, #416]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 800188e:	f000 fb9d 	bl	8001fcc <HAL_DMA_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001898:	f7ff fb5e 	bl	8000f58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a64      	ldr	r2, [pc, #400]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 80018a0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018a2:	4a63      	ldr	r2, [pc, #396]	@ (8001a30 <HAL_UART_MspInit+0x300>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	2034      	movs	r0, #52	@ 0x34
 80018ae:	f000 fae0 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018b2:	2034      	movs	r0, #52	@ 0x34
 80018b4:	f000 faf7 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018b8:	e114      	b.n	8001ae4 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5e      	ldr	r2, [pc, #376]	@ (8001a38 <HAL_UART_MspInit+0x308>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	f040 80c3 	bne.w	8001a4c <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80018c6:	f04f 0202 	mov.w	r2, #2
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 fd75 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80018e8:	f7ff fb36 	bl	8000f58 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80018ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 80018ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 80018f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018f8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80018fc:	4b48      	ldr	r3, [pc, #288]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 80018fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b45      	ldr	r3, [pc, #276]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 800190c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001910:	4a43      	ldr	r2, [pc, #268]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800191a:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <HAL_UART_MspInit+0x2f0>)
 800191c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001928:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800192c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001942:	230e      	movs	r3, #14
 8001944:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800194c:	4619      	mov	r1, r3
 800194e:	4835      	ldr	r0, [pc, #212]	@ (8001a24 <HAL_UART_MspInit+0x2f4>)
 8001950:	f003 fa26 	bl	8004da0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001954:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 8001956:	4a3a      	ldr	r2, [pc, #232]	@ (8001a40 <HAL_UART_MspInit+0x310>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800195a:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 800195c:	2241      	movs	r2, #65	@ 0x41
 800195e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001966:	4b35      	ldr	r3, [pc, #212]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196c:	4b33      	ldr	r3, [pc, #204]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 800196e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001972:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800197a:	4b30      	ldr	r3, [pc, #192]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001980:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001986:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001992:	482a      	ldr	r0, [pc, #168]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 8001994:	f000 fb1a 	bl	8001fcc <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_UART_MspInit+0x272>
      Error_Handler();
 800199e:	f7ff fadb 	bl	8000f58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a25      	ldr	r2, [pc, #148]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 80019a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80019aa:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <HAL_UART_MspInit+0x30c>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 80019b0:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019b2:	4a25      	ldr	r2, [pc, #148]	@ (8001a48 <HAL_UART_MspInit+0x318>)
 80019b4:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80019b6:	4b23      	ldr	r3, [pc, #140]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019b8:	2242      	movs	r2, #66	@ 0x42
 80019ba:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019be:	2240      	movs	r2, #64	@ 0x40
 80019c0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ce:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019e2:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e8:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80019ee:	4815      	ldr	r0, [pc, #84]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 80019f0:	f000 faec 	bl	8001fcc <HAL_DMA_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 80019fa:	f7ff faad 	bl	8000f58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 8001a02:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a04:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <HAL_UART_MspInit+0x314>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2035      	movs	r0, #53	@ 0x35
 8001a10:	f000 fa2f 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001a14:	2035      	movs	r0, #53	@ 0x35
 8001a16:	f000 fa46 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
}
 8001a1a:	e063      	b.n	8001ae4 <HAL_UART_MspInit+0x3b4>
 8001a1c:	40004c00 	.word	0x40004c00
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020400 	.word	0x58020400
 8001a28:	240006f0 	.word	0x240006f0
 8001a2c:	40020040 	.word	0x40020040
 8001a30:	24000768 	.word	0x24000768
 8001a34:	40020058 	.word	0x40020058
 8001a38:	40005000 	.word	0x40005000
 8001a3c:	240007e0 	.word	0x240007e0
 8001a40:	40020010 	.word	0x40020010
 8001a44:	24000858 	.word	0x24000858
 8001a48:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a26      	ldr	r2, [pc, #152]	@ (8001aec <HAL_UART_MspInit+0x3bc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d146      	bne.n	8001ae4 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a56:	f04f 0202 	mov.w	r2, #2
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f004 fcad 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8001a78:	f7ff fa6e 	bl	8000f58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <HAL_UART_MspInit+0x3c0>)
 8001a7e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_UART_MspInit+0x3c0>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a88:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_UART_MspInit+0x3c0>)
 8001a8e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_UART_MspInit+0x3c0>)
 8001a9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aa0:	4a13      	ldr	r2, [pc, #76]	@ (8001af0 <HAL_UART_MspInit+0x3c0>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_UART_MspInit+0x3c0>)
 8001aac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ab8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001abc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <HAL_UART_MspInit+0x3c4>)
 8001ae0:	f003 f95e 	bl	8004da0 <HAL_GPIO_Init>
}
 8001ae4:	bf00      	nop
 8001ae6:	37f8      	adds	r7, #248	@ 0xf8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40004800 	.word	0x40004800
 8001af0:	58024400 	.word	0x58024400
 8001af4:	58020c00 	.word	0x58020c00

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001af8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001b34 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001afc:	f7ff fd1c 	bl	8001538 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b00:	f7ff fc8a 	bl	8001418 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	@ (8001b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f00a fcdb 	bl	800c4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff f873 	bl	8000c18 <main>
  bx  lr
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001b38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b3c:	24000268 	.word	0x24000268
  ldr r2, =_sidata
 8001b40:	08035f9c 	.word	0x08035f9c
  ldr r2, =_sbss
 8001b44:	24000268 	.word	0x24000268
  ldr r4, =_ebss
 8001b48:	24001964 	.word	0x24001964

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f000 f980 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b5c:	f004 fa60 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_Init+0x68>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	4913      	ldr	r1, [pc, #76]	@ (8001bbc <HAL_Init+0x6c>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <HAL_Init+0x68>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <HAL_Init+0x6c>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <HAL_Init+0x70>)
 8001b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b94:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc4 <HAL_Init+0x74>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f814 	bl	8001bc8 <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e002      	b.n	8001bb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001baa:	f7ff fad5 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58024400 	.word	0x58024400
 8001bbc:	0800e5cc 	.word	0x0800e5cc
 8001bc0:	24000004 	.word	0x24000004
 8001bc4:	24000000 	.word	0x24000000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bd0:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_InitTick+0x60>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e021      	b.n	8001c20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_InitTick+0x64>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f965 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f92f 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_InitTick+0x68>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2400000c 	.word	0x2400000c
 8001c2c:	24000000 	.word	0x24000000
 8001c30:	24000008 	.word	0x24000008

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2400000c 	.word	0x2400000c
 8001c58:	240008d0 	.word	0x240008d0

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	240008d0 	.word	0x240008d0

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2400000c 	.word	0x2400000c

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x40>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x40>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00
 8001d00:	05fa0000 	.word	0x05fa0000

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	@ (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff29 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff40 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff90 	bl	8001db0 <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5f 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff33 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffa4 	bl	8001e18 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ee0:	f3bf 8f5f 	dmb	sy
}
 8001ee4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <HAL_MPU_Disable+0x28>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	4a06      	ldr	r2, [pc, #24]	@ (8001f04 <HAL_MPU_Disable+0x28>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_MPU_Disable+0x2c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	e000ed90 	.word	0xe000ed90

08001f0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f14:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <HAL_MPU_Enable+0x38>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_MPU_Enable+0x3c>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <HAL_MPU_Enable+0x3c>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f28:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f2a:	f3bf 8f4f 	dsb	sy
}
 8001f2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f30:	f3bf 8f6f 	isb	sy
}
 8001f34:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed90 	.word	0xe000ed90
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	785a      	ldrb	r2, [r3, #1]
 8001f58:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f68:	4a17      	ldr	r2, [pc, #92]	@ (8001fc8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7b1b      	ldrb	r3, [r3, #12]
 8001f74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7adb      	ldrb	r3, [r3, #11]
 8001f7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7a9b      	ldrb	r3, [r3, #10]
 8001f82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7b5b      	ldrb	r3, [r3, #13]
 8001f8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7b9b      	ldrb	r3, [r3, #14]
 8001f92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7bdb      	ldrb	r3, [r3, #15]
 8001f9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7a5b      	ldrb	r3, [r3, #9]
 8001fa2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7a1b      	ldrb	r3, [r3, #8]
 8001faa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fb6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fb8:	6113      	str	r3, [r2, #16]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed90 	.word	0xe000ed90

08001fcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fe42 	bl	8001c5c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e37d      	b.n	80026e0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a66      	ldr	r2, [pc, #408]	@ (8002184 <HAL_DMA_Init+0x1b8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_DMA_Init+0x1bc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d045      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a63      	ldr	r2, [pc, #396]	@ (800218c <HAL_DMA_Init+0x1c0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a62      	ldr	r2, [pc, #392]	@ (8002190 <HAL_DMA_Init+0x1c4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03b      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a60      	ldr	r2, [pc, #384]	@ (8002194 <HAL_DMA_Init+0x1c8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d036      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5f      	ldr	r2, [pc, #380]	@ (8002198 <HAL_DMA_Init+0x1cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d031      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a5d      	ldr	r2, [pc, #372]	@ (800219c <HAL_DMA_Init+0x1d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02c      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5c      	ldr	r2, [pc, #368]	@ (80021a0 <HAL_DMA_Init+0x1d4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d027      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a5a      	ldr	r2, [pc, #360]	@ (80021a4 <HAL_DMA_Init+0x1d8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a59      	ldr	r2, [pc, #356]	@ (80021a8 <HAL_DMA_Init+0x1dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01d      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a57      	ldr	r2, [pc, #348]	@ (80021ac <HAL_DMA_Init+0x1e0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a56      	ldr	r2, [pc, #344]	@ (80021b0 <HAL_DMA_Init+0x1e4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a54      	ldr	r2, [pc, #336]	@ (80021b4 <HAL_DMA_Init+0x1e8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a53      	ldr	r2, [pc, #332]	@ (80021b8 <HAL_DMA_Init+0x1ec>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a51      	ldr	r2, [pc, #324]	@ (80021bc <HAL_DMA_Init+0x1f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a50      	ldr	r2, [pc, #320]	@ (80021c0 <HAL_DMA_Init+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Init+0xbc>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_DMA_Init+0xbe>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 813c 	beq.w	8002308 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a37      	ldr	r2, [pc, #220]	@ (8002184 <HAL_DMA_Init+0x1b8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d04a      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a36      	ldr	r2, [pc, #216]	@ (8002188 <HAL_DMA_Init+0x1bc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d045      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a34      	ldr	r2, [pc, #208]	@ (800218c <HAL_DMA_Init+0x1c0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d040      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a33      	ldr	r2, [pc, #204]	@ (8002190 <HAL_DMA_Init+0x1c4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d03b      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a31      	ldr	r2, [pc, #196]	@ (8002194 <HAL_DMA_Init+0x1c8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d036      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a30      	ldr	r2, [pc, #192]	@ (8002198 <HAL_DMA_Init+0x1cc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d031      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2e      	ldr	r2, [pc, #184]	@ (800219c <HAL_DMA_Init+0x1d0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d02c      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2d      	ldr	r2, [pc, #180]	@ (80021a0 <HAL_DMA_Init+0x1d4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d027      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	@ (80021a4 <HAL_DMA_Init+0x1d8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d022      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2a      	ldr	r2, [pc, #168]	@ (80021a8 <HAL_DMA_Init+0x1dc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01d      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a28      	ldr	r2, [pc, #160]	@ (80021ac <HAL_DMA_Init+0x1e0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d018      	beq.n	8002140 <HAL_DMA_Init+0x174>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <HAL_DMA_Init+0x1e4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a25      	ldr	r2, [pc, #148]	@ (80021b4 <HAL_DMA_Init+0x1e8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00e      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a24      	ldr	r2, [pc, #144]	@ (80021b8 <HAL_DMA_Init+0x1ec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_DMA_Init+0x174>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a22      	ldr	r2, [pc, #136]	@ (80021bc <HAL_DMA_Init+0x1f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <HAL_DMA_Init+0x1f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <HAL_DMA_Init+0x186>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_DMA_Init+0x196>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002162:	e02f      	b.n	80021c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002164:	f7ff fd7a 	bl	8001c5c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b05      	cmp	r3, #5
 8002170:	d928      	bls.n	80021c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2203      	movs	r2, #3
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e2ad      	b.n	80026e0 <HAL_DMA_Init+0x714>
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1c8      	bne.n	8002164 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_DMA_Init+0x3e0>)
 80021de:	4013      	ands	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	4313      	orrs	r3, r2
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b28      	cmp	r3, #40	@ 0x28
 800222e:	d903      	bls.n	8002238 <HAL_DMA_Init+0x26c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b2e      	cmp	r3, #46	@ 0x2e
 8002236:	d91f      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b3e      	cmp	r3, #62	@ 0x3e
 800223e:	d903      	bls.n	8002248 <HAL_DMA_Init+0x27c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b42      	cmp	r3, #66	@ 0x42
 8002246:	d917      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b46      	cmp	r3, #70	@ 0x46
 800224e:	d903      	bls.n	8002258 <HAL_DMA_Init+0x28c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b48      	cmp	r3, #72	@ 0x48
 8002256:	d90f      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b4e      	cmp	r3, #78	@ 0x4e
 800225e:	d903      	bls.n	8002268 <HAL_DMA_Init+0x29c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b52      	cmp	r3, #82	@ 0x52
 8002266:	d907      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b73      	cmp	r3, #115	@ 0x73
 800226e:	d905      	bls.n	800227c <HAL_DMA_Init+0x2b0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b77      	cmp	r3, #119	@ 0x77
 8002276:	d801      	bhi.n	800227c <HAL_DMA_Init+0x2b0>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_DMA_Init+0x2b2>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002288:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f023 0307 	bic.w	r3, r3, #7
 80022a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d117      	bne.n	80022e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00e      	beq.n	80022e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f002 fbe0 	bl	8004a8c <DMA_CheckFifoParam>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2240      	movs	r2, #64	@ 0x40
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e1fd      	b.n	80026e0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f002 fb1b 	bl	8004928 <DMA_CalcBaseAndBitshift>
 80022f2:	4603      	mov	r3, r0
 80022f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	223f      	movs	r2, #63	@ 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e0fd      	b.n	8002504 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a28      	ldr	r2, [pc, #160]	@ (80023b0 <HAL_DMA_Init+0x3e4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d04a      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a27      	ldr	r2, [pc, #156]	@ (80023b4 <HAL_DMA_Init+0x3e8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d045      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a25      	ldr	r2, [pc, #148]	@ (80023b8 <HAL_DMA_Init+0x3ec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d040      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a24      	ldr	r2, [pc, #144]	@ (80023bc <HAL_DMA_Init+0x3f0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d03b      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a22      	ldr	r2, [pc, #136]	@ (80023c0 <HAL_DMA_Init+0x3f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d036      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <HAL_DMA_Init+0x3f8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d031      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1f      	ldr	r2, [pc, #124]	@ (80023c8 <HAL_DMA_Init+0x3fc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02c      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1e      	ldr	r2, [pc, #120]	@ (80023cc <HAL_DMA_Init+0x400>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d027      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <HAL_DMA_Init+0x404>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <HAL_DMA_Init+0x408>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d01d      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a19      	ldr	r2, [pc, #100]	@ (80023d8 <HAL_DMA_Init+0x40c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a18      	ldr	r2, [pc, #96]	@ (80023dc <HAL_DMA_Init+0x410>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <HAL_DMA_Init+0x414>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a15      	ldr	r2, [pc, #84]	@ (80023e4 <HAL_DMA_Init+0x418>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a13      	ldr	r2, [pc, #76]	@ (80023e8 <HAL_DMA_Init+0x41c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_Init+0x3dc>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <HAL_DMA_Init+0x420>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d123      	bne.n	80023f0 <HAL_DMA_Init+0x424>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e022      	b.n	80023f2 <HAL_DMA_Init+0x426>
 80023ac:	fe10803f 	.word	0xfe10803f
 80023b0:	48022c08 	.word	0x48022c08
 80023b4:	48022c1c 	.word	0x48022c1c
 80023b8:	48022c30 	.word	0x48022c30
 80023bc:	48022c44 	.word	0x48022c44
 80023c0:	48022c58 	.word	0x48022c58
 80023c4:	48022c6c 	.word	0x48022c6c
 80023c8:	48022c80 	.word	0x48022c80
 80023cc:	48022c94 	.word	0x48022c94
 80023d0:	58025408 	.word	0x58025408
 80023d4:	5802541c 	.word	0x5802541c
 80023d8:	58025430 	.word	0x58025430
 80023dc:	58025444 	.word	0x58025444
 80023e0:	58025458 	.word	0x58025458
 80023e4:	5802546c 	.word	0x5802546c
 80023e8:	58025480 	.word	0x58025480
 80023ec:	58025494 	.word	0x58025494
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07d      	beq.n	80024f2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7f      	ldr	r2, [pc, #508]	@ (80025f8 <HAL_DMA_Init+0x62c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d021      	beq.n	8002444 <HAL_DMA_Init+0x478>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a7d      	ldr	r2, [pc, #500]	@ (80025fc <HAL_DMA_Init+0x630>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01c      	beq.n	8002444 <HAL_DMA_Init+0x478>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7c      	ldr	r2, [pc, #496]	@ (8002600 <HAL_DMA_Init+0x634>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d017      	beq.n	8002444 <HAL_DMA_Init+0x478>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7a      	ldr	r2, [pc, #488]	@ (8002604 <HAL_DMA_Init+0x638>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d012      	beq.n	8002444 <HAL_DMA_Init+0x478>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a79      	ldr	r2, [pc, #484]	@ (8002608 <HAL_DMA_Init+0x63c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00d      	beq.n	8002444 <HAL_DMA_Init+0x478>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a77      	ldr	r2, [pc, #476]	@ (800260c <HAL_DMA_Init+0x640>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d008      	beq.n	8002444 <HAL_DMA_Init+0x478>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a76      	ldr	r2, [pc, #472]	@ (8002610 <HAL_DMA_Init+0x644>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d003      	beq.n	8002444 <HAL_DMA_Init+0x478>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a74      	ldr	r2, [pc, #464]	@ (8002614 <HAL_DMA_Init+0x648>)
 8002442:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4b6e      	ldr	r3, [pc, #440]	@ (8002618 <HAL_DMA_Init+0x64c>)
 8002460:	4013      	ands	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	d008      	beq.n	800247e <HAL_DMA_Init+0x4b2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b80      	cmp	r3, #128	@ 0x80
 8002472:	d102      	bne.n	800247a <HAL_DMA_Init+0x4ae>
 8002474:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002478:	e002      	b.n	8002480 <HAL_DMA_Init+0x4b4>
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_DMA_Init+0x4b4>
 800247e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68d2      	ldr	r2, [r2, #12]
 8002484:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002486:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800248e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002496:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800249e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024a6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024ae:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b55      	ldr	r3, [pc, #340]	@ (800261c <HAL_DMA_Init+0x650>)
 80024c6:	4413      	add	r3, r2
 80024c8:	4a55      	ldr	r2, [pc, #340]	@ (8002620 <HAL_DMA_Init+0x654>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	009a      	lsls	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f002 fa26 	bl	8004928 <DMA_CalcBaseAndBitshift>
 80024dc:	4603      	mov	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	e008      	b.n	8002504 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2240      	movs	r2, #64	@ 0x40
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2203      	movs	r2, #3
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0ed      	b.n	80026e0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a46      	ldr	r2, [pc, #280]	@ (8002624 <HAL_DMA_Init+0x658>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d072      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a45      	ldr	r2, [pc, #276]	@ (8002628 <HAL_DMA_Init+0x65c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d06d      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a43      	ldr	r2, [pc, #268]	@ (800262c <HAL_DMA_Init+0x660>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d068      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_DMA_Init+0x664>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d063      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a40      	ldr	r2, [pc, #256]	@ (8002634 <HAL_DMA_Init+0x668>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d05e      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a3f      	ldr	r2, [pc, #252]	@ (8002638 <HAL_DMA_Init+0x66c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d059      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3d      	ldr	r2, [pc, #244]	@ (800263c <HAL_DMA_Init+0x670>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d054      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a3c      	ldr	r2, [pc, #240]	@ (8002640 <HAL_DMA_Init+0x674>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d04f      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3a      	ldr	r2, [pc, #232]	@ (8002644 <HAL_DMA_Init+0x678>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d04a      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a39      	ldr	r2, [pc, #228]	@ (8002648 <HAL_DMA_Init+0x67c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d045      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a37      	ldr	r2, [pc, #220]	@ (800264c <HAL_DMA_Init+0x680>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d040      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a36      	ldr	r2, [pc, #216]	@ (8002650 <HAL_DMA_Init+0x684>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d03b      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a34      	ldr	r2, [pc, #208]	@ (8002654 <HAL_DMA_Init+0x688>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d036      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a33      	ldr	r2, [pc, #204]	@ (8002658 <HAL_DMA_Init+0x68c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d031      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a31      	ldr	r2, [pc, #196]	@ (800265c <HAL_DMA_Init+0x690>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02c      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a30      	ldr	r2, [pc, #192]	@ (8002660 <HAL_DMA_Init+0x694>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d027      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	@ (80025f8 <HAL_DMA_Init+0x62c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d022      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a12      	ldr	r2, [pc, #72]	@ (80025fc <HAL_DMA_Init+0x630>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01d      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a10      	ldr	r2, [pc, #64]	@ (8002600 <HAL_DMA_Init+0x634>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d018      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <HAL_DMA_Init+0x638>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002608 <HAL_DMA_Init+0x63c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00e      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a0c      	ldr	r2, [pc, #48]	@ (800260c <HAL_DMA_Init+0x640>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_DMA_Init+0x644>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_DMA_Init+0x628>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <HAL_DMA_Init+0x648>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d137      	bne.n	8002664 <HAL_DMA_Init+0x698>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e036      	b.n	8002666 <HAL_DMA_Init+0x69a>
 80025f8:	58025408 	.word	0x58025408
 80025fc:	5802541c 	.word	0x5802541c
 8002600:	58025430 	.word	0x58025430
 8002604:	58025444 	.word	0x58025444
 8002608:	58025458 	.word	0x58025458
 800260c:	5802546c 	.word	0x5802546c
 8002610:	58025480 	.word	0x58025480
 8002614:	58025494 	.word	0x58025494
 8002618:	fffe000f 	.word	0xfffe000f
 800261c:	a7fdabf8 	.word	0xa7fdabf8
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	40020010 	.word	0x40020010
 8002628:	40020028 	.word	0x40020028
 800262c:	40020040 	.word	0x40020040
 8002630:	40020058 	.word	0x40020058
 8002634:	40020070 	.word	0x40020070
 8002638:	40020088 	.word	0x40020088
 800263c:	400200a0 	.word	0x400200a0
 8002640:	400200b8 	.word	0x400200b8
 8002644:	40020410 	.word	0x40020410
 8002648:	40020428 	.word	0x40020428
 800264c:	40020440 	.word	0x40020440
 8002650:	40020458 	.word	0x40020458
 8002654:	40020470 	.word	0x40020470
 8002658:	40020488 	.word	0x40020488
 800265c:	400204a0 	.word	0x400204a0
 8002660:	400204b8 	.word	0x400204b8
 8002664:	2300      	movs	r3, #0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d032      	beq.n	80026d0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f002 fa8a 	bl	8004b84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b80      	cmp	r3, #128	@ 0x80
 8002676:	d102      	bne.n	800267e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002692:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_DMA_Init+0x6f2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d80c      	bhi.n	80026be <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f002 fb07 	bl	8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	e008      	b.n	80026d0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e226      	b.n	8002b52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_DMA_Start_IT+0x2a>
 800270e:	2302      	movs	r3, #2
 8002710:	e21f      	b.n	8002b52 <HAL_DMA_Start_IT+0x46a>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 820a 	bne.w	8002b3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a68      	ldr	r2, [pc, #416]	@ (80028dc <HAL_DMA_Start_IT+0x1f4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d04a      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a66      	ldr	r2, [pc, #408]	@ (80028e0 <HAL_DMA_Start_IT+0x1f8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d045      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a65      	ldr	r2, [pc, #404]	@ (80028e4 <HAL_DMA_Start_IT+0x1fc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d040      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a63      	ldr	r2, [pc, #396]	@ (80028e8 <HAL_DMA_Start_IT+0x200>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d03b      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a62      	ldr	r2, [pc, #392]	@ (80028ec <HAL_DMA_Start_IT+0x204>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d036      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a60      	ldr	r2, [pc, #384]	@ (80028f0 <HAL_DMA_Start_IT+0x208>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d031      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5f      	ldr	r2, [pc, #380]	@ (80028f4 <HAL_DMA_Start_IT+0x20c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d02c      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_DMA_Start_IT+0x210>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d027      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5c      	ldr	r2, [pc, #368]	@ (80028fc <HAL_DMA_Start_IT+0x214>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5a      	ldr	r2, [pc, #360]	@ (8002900 <HAL_DMA_Start_IT+0x218>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01d      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a59      	ldr	r2, [pc, #356]	@ (8002904 <HAL_DMA_Start_IT+0x21c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_DMA_Start_IT+0x220>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a56      	ldr	r2, [pc, #344]	@ (800290c <HAL_DMA_Start_IT+0x224>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a54      	ldr	r2, [pc, #336]	@ (8002910 <HAL_DMA_Start_IT+0x228>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a53      	ldr	r2, [pc, #332]	@ (8002914 <HAL_DMA_Start_IT+0x22c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a51      	ldr	r2, [pc, #324]	@ (8002918 <HAL_DMA_Start_IT+0x230>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <HAL_DMA_Start_IT+0x100>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e007      	b.n	80027f8 <HAL_DMA_Start_IT+0x110>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f001 feae 	bl	8004560 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a34      	ldr	r2, [pc, #208]	@ (80028dc <HAL_DMA_Start_IT+0x1f4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04a      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a33      	ldr	r2, [pc, #204]	@ (80028e0 <HAL_DMA_Start_IT+0x1f8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d045      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a31      	ldr	r2, [pc, #196]	@ (80028e4 <HAL_DMA_Start_IT+0x1fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a30      	ldr	r2, [pc, #192]	@ (80028e8 <HAL_DMA_Start_IT+0x200>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03b      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2e      	ldr	r2, [pc, #184]	@ (80028ec <HAL_DMA_Start_IT+0x204>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d036      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2d      	ldr	r2, [pc, #180]	@ (80028f0 <HAL_DMA_Start_IT+0x208>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2b      	ldr	r2, [pc, #172]	@ (80028f4 <HAL_DMA_Start_IT+0x20c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02c      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2a      	ldr	r2, [pc, #168]	@ (80028f8 <HAL_DMA_Start_IT+0x210>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d027      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a28      	ldr	r2, [pc, #160]	@ (80028fc <HAL_DMA_Start_IT+0x214>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a27      	ldr	r2, [pc, #156]	@ (8002900 <HAL_DMA_Start_IT+0x218>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a25      	ldr	r2, [pc, #148]	@ (8002904 <HAL_DMA_Start_IT+0x21c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a24      	ldr	r2, [pc, #144]	@ (8002908 <HAL_DMA_Start_IT+0x220>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	@ (800290c <HAL_DMA_Start_IT+0x224>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	@ (8002910 <HAL_DMA_Start_IT+0x228>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1f      	ldr	r2, [pc, #124]	@ (8002914 <HAL_DMA_Start_IT+0x22c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1e      	ldr	r2, [pc, #120]	@ (8002918 <HAL_DMA_Start_IT+0x230>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_Start_IT+0x1c0>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_DMA_Start_IT+0x1c2>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d036      	beq.n	800291c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 021e 	bic.w	r2, r3, #30
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0216 	orr.w	r2, r2, #22
 80028c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03e      	beq.n	8002948 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0208 	orr.w	r2, r2, #8
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e035      	b.n	8002948 <HAL_DMA_Start_IT+0x260>
 80028dc:	40020010 	.word	0x40020010
 80028e0:	40020028 	.word	0x40020028
 80028e4:	40020040 	.word	0x40020040
 80028e8:	40020058 	.word	0x40020058
 80028ec:	40020070 	.word	0x40020070
 80028f0:	40020088 	.word	0x40020088
 80028f4:	400200a0 	.word	0x400200a0
 80028f8:	400200b8 	.word	0x400200b8
 80028fc:	40020410 	.word	0x40020410
 8002900:	40020428 	.word	0x40020428
 8002904:	40020440 	.word	0x40020440
 8002908:	40020458 	.word	0x40020458
 800290c:	40020470 	.word	0x40020470
 8002910:	40020488 	.word	0x40020488
 8002914:	400204a0 	.word	0x400204a0
 8002918:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 020e 	bic.w	r2, r3, #14
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 020a 	orr.w	r2, r2, #10
 800292e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0204 	orr.w	r2, r2, #4
 8002946:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a83      	ldr	r2, [pc, #524]	@ (8002b5c <HAL_DMA_Start_IT+0x474>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d072      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a82      	ldr	r2, [pc, #520]	@ (8002b60 <HAL_DMA_Start_IT+0x478>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d06d      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a80      	ldr	r2, [pc, #512]	@ (8002b64 <HAL_DMA_Start_IT+0x47c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d068      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b68 <HAL_DMA_Start_IT+0x480>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d063      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a7d      	ldr	r2, [pc, #500]	@ (8002b6c <HAL_DMA_Start_IT+0x484>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d05e      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b70 <HAL_DMA_Start_IT+0x488>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d059      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7a      	ldr	r2, [pc, #488]	@ (8002b74 <HAL_DMA_Start_IT+0x48c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d054      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a79      	ldr	r2, [pc, #484]	@ (8002b78 <HAL_DMA_Start_IT+0x490>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04f      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a77      	ldr	r2, [pc, #476]	@ (8002b7c <HAL_DMA_Start_IT+0x494>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04a      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a76      	ldr	r2, [pc, #472]	@ (8002b80 <HAL_DMA_Start_IT+0x498>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d045      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a74      	ldr	r2, [pc, #464]	@ (8002b84 <HAL_DMA_Start_IT+0x49c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d040      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a73      	ldr	r2, [pc, #460]	@ (8002b88 <HAL_DMA_Start_IT+0x4a0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d03b      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a71      	ldr	r2, [pc, #452]	@ (8002b8c <HAL_DMA_Start_IT+0x4a4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d036      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a70      	ldr	r2, [pc, #448]	@ (8002b90 <HAL_DMA_Start_IT+0x4a8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d031      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002b94 <HAL_DMA_Start_IT+0x4ac>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02c      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6d      	ldr	r2, [pc, #436]	@ (8002b98 <HAL_DMA_Start_IT+0x4b0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d027      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6b      	ldr	r2, [pc, #428]	@ (8002b9c <HAL_DMA_Start_IT+0x4b4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d022      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6a      	ldr	r2, [pc, #424]	@ (8002ba0 <HAL_DMA_Start_IT+0x4b8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01d      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a68      	ldr	r2, [pc, #416]	@ (8002ba4 <HAL_DMA_Start_IT+0x4bc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a67      	ldr	r2, [pc, #412]	@ (8002ba8 <HAL_DMA_Start_IT+0x4c0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a65      	ldr	r2, [pc, #404]	@ (8002bac <HAL_DMA_Start_IT+0x4c4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a64      	ldr	r2, [pc, #400]	@ (8002bb0 <HAL_DMA_Start_IT+0x4c8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a62      	ldr	r2, [pc, #392]	@ (8002bb4 <HAL_DMA_Start_IT+0x4cc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a61      	ldr	r2, [pc, #388]	@ (8002bb8 <HAL_DMA_Start_IT+0x4d0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Start_IT+0x354>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_DMA_Start_IT+0x356>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01a      	beq.n	8002a78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a37      	ldr	r2, [pc, #220]	@ (8002b5c <HAL_DMA_Start_IT+0x474>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a36      	ldr	r2, [pc, #216]	@ (8002b60 <HAL_DMA_Start_IT+0x478>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	@ (8002b64 <HAL_DMA_Start_IT+0x47c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a33      	ldr	r2, [pc, #204]	@ (8002b68 <HAL_DMA_Start_IT+0x480>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a31      	ldr	r2, [pc, #196]	@ (8002b6c <HAL_DMA_Start_IT+0x484>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a30      	ldr	r2, [pc, #192]	@ (8002b70 <HAL_DMA_Start_IT+0x488>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b74 <HAL_DMA_Start_IT+0x48c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b78 <HAL_DMA_Start_IT+0x490>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b7c <HAL_DMA_Start_IT+0x494>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <HAL_DMA_Start_IT+0x498>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a28      	ldr	r2, [pc, #160]	@ (8002b84 <HAL_DMA_Start_IT+0x49c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <HAL_DMA_Start_IT+0x4a0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a25      	ldr	r2, [pc, #148]	@ (8002b8c <HAL_DMA_Start_IT+0x4a4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a24      	ldr	r2, [pc, #144]	@ (8002b90 <HAL_DMA_Start_IT+0x4a8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <HAL_DMA_Start_IT+0x4ac>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <HAL_DMA_Start_IT+0x4b0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_DMA_Start_IT+0x442>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e012      	b.n	8002b50 <HAL_DMA_Start_IT+0x468>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e009      	b.n	8002b50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020028 	.word	0x40020028
 8002b64:	40020040 	.word	0x40020040
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40020070 	.word	0x40020070
 8002b70:	40020088 	.word	0x40020088
 8002b74:	400200a0 	.word	0x400200a0
 8002b78:	400200b8 	.word	0x400200b8
 8002b7c:	40020410 	.word	0x40020410
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40020440 	.word	0x40020440
 8002b88:	40020458 	.word	0x40020458
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	40020488 	.word	0x40020488
 8002b94:	400204a0 	.word	0x400204a0
 8002b98:	400204b8 	.word	0x400204b8
 8002b9c:	58025408 	.word	0x58025408
 8002ba0:	5802541c 	.word	0x5802541c
 8002ba4:	58025430 	.word	0x58025430
 8002ba8:	58025444 	.word	0x58025444
 8002bac:	58025458 	.word	0x58025458
 8002bb0:	5802546c 	.word	0x5802546c
 8002bb4:	58025480 	.word	0x58025480
 8002bb8:	58025494 	.word	0x58025494

08002bbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7ff f84a 	bl	8001c5c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e2dc      	b.n	800318e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d008      	beq.n	8002bf2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e2cd      	b.n	800318e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a76      	ldr	r2, [pc, #472]	@ (8002dd0 <HAL_DMA_Abort+0x214>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a74      	ldr	r2, [pc, #464]	@ (8002dd4 <HAL_DMA_Abort+0x218>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a73      	ldr	r2, [pc, #460]	@ (8002dd8 <HAL_DMA_Abort+0x21c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a71      	ldr	r2, [pc, #452]	@ (8002ddc <HAL_DMA_Abort+0x220>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a70      	ldr	r2, [pc, #448]	@ (8002de0 <HAL_DMA_Abort+0x224>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6e      	ldr	r2, [pc, #440]	@ (8002de4 <HAL_DMA_Abort+0x228>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6d      	ldr	r2, [pc, #436]	@ (8002de8 <HAL_DMA_Abort+0x22c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002dec <HAL_DMA_Abort+0x230>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6a      	ldr	r2, [pc, #424]	@ (8002df0 <HAL_DMA_Abort+0x234>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a68      	ldr	r2, [pc, #416]	@ (8002df4 <HAL_DMA_Abort+0x238>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a67      	ldr	r2, [pc, #412]	@ (8002df8 <HAL_DMA_Abort+0x23c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a65      	ldr	r2, [pc, #404]	@ (8002dfc <HAL_DMA_Abort+0x240>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a64      	ldr	r2, [pc, #400]	@ (8002e00 <HAL_DMA_Abort+0x244>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a62      	ldr	r2, [pc, #392]	@ (8002e04 <HAL_DMA_Abort+0x248>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a61      	ldr	r2, [pc, #388]	@ (8002e08 <HAL_DMA_Abort+0x24c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8002e0c <HAL_DMA_Abort+0x250>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_DMA_Abort+0xda>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_DMA_Abort+0xdc>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 021e 	bic.w	r2, r2, #30
 8002caa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e00a      	b.n	8002cda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 020e 	bic.w	r2, r2, #14
 8002cd2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd0 <HAL_DMA_Abort+0x214>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d072      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8002dd4 <HAL_DMA_Abort+0x218>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d06d      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a39      	ldr	r2, [pc, #228]	@ (8002dd8 <HAL_DMA_Abort+0x21c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d068      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a37      	ldr	r2, [pc, #220]	@ (8002ddc <HAL_DMA_Abort+0x220>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d063      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a36      	ldr	r2, [pc, #216]	@ (8002de0 <HAL_DMA_Abort+0x224>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d05e      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a34      	ldr	r2, [pc, #208]	@ (8002de4 <HAL_DMA_Abort+0x228>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d059      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a33      	ldr	r2, [pc, #204]	@ (8002de8 <HAL_DMA_Abort+0x22c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d054      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a31      	ldr	r2, [pc, #196]	@ (8002dec <HAL_DMA_Abort+0x230>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d04f      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a30      	ldr	r2, [pc, #192]	@ (8002df0 <HAL_DMA_Abort+0x234>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d04a      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2e      	ldr	r2, [pc, #184]	@ (8002df4 <HAL_DMA_Abort+0x238>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d045      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2d      	ldr	r2, [pc, #180]	@ (8002df8 <HAL_DMA_Abort+0x23c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d040      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dfc <HAL_DMA_Abort+0x240>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d03b      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2a      	ldr	r2, [pc, #168]	@ (8002e00 <HAL_DMA_Abort+0x244>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d036      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a28      	ldr	r2, [pc, #160]	@ (8002e04 <HAL_DMA_Abort+0x248>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a27      	ldr	r2, [pc, #156]	@ (8002e08 <HAL_DMA_Abort+0x24c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d02c      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a25      	ldr	r2, [pc, #148]	@ (8002e0c <HAL_DMA_Abort+0x250>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d027      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a24      	ldr	r2, [pc, #144]	@ (8002e10 <HAL_DMA_Abort+0x254>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a22      	ldr	r2, [pc, #136]	@ (8002e14 <HAL_DMA_Abort+0x258>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01d      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	@ (8002e18 <HAL_DMA_Abort+0x25c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d018      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e1c <HAL_DMA_Abort+0x260>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e20 <HAL_DMA_Abort+0x264>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e24 <HAL_DMA_Abort+0x268>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	@ (8002e28 <HAL_DMA_Abort+0x26c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a19      	ldr	r2, [pc, #100]	@ (8002e2c <HAL_DMA_Abort+0x270>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d132      	bne.n	8002e30 <HAL_DMA_Abort+0x274>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e031      	b.n	8002e32 <HAL_DMA_Abort+0x276>
 8002dce:	bf00      	nop
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025444 	.word	0x58025444
 8002e20:	58025458 	.word	0x58025458
 8002e24:	5802546c 	.word	0x5802546c
 8002e28:	58025480 	.word	0x58025480
 8002e2c:	58025494 	.word	0x58025494
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8003000 <HAL_DMA_Abort+0x444>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d04a      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6b      	ldr	r2, [pc, #428]	@ (8003004 <HAL_DMA_Abort+0x448>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d045      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6a      	ldr	r2, [pc, #424]	@ (8003008 <HAL_DMA_Abort+0x44c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d040      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a68      	ldr	r2, [pc, #416]	@ (800300c <HAL_DMA_Abort+0x450>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d03b      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a67      	ldr	r2, [pc, #412]	@ (8003010 <HAL_DMA_Abort+0x454>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d036      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a65      	ldr	r2, [pc, #404]	@ (8003014 <HAL_DMA_Abort+0x458>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d031      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a64      	ldr	r2, [pc, #400]	@ (8003018 <HAL_DMA_Abort+0x45c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d02c      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a62      	ldr	r2, [pc, #392]	@ (800301c <HAL_DMA_Abort+0x460>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d027      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a61      	ldr	r2, [pc, #388]	@ (8003020 <HAL_DMA_Abort+0x464>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5f      	ldr	r2, [pc, #380]	@ (8003024 <HAL_DMA_Abort+0x468>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a5e      	ldr	r2, [pc, #376]	@ (8003028 <HAL_DMA_Abort+0x46c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d018      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5c      	ldr	r2, [pc, #368]	@ (800302c <HAL_DMA_Abort+0x470>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a5b      	ldr	r2, [pc, #364]	@ (8003030 <HAL_DMA_Abort+0x474>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a59      	ldr	r2, [pc, #356]	@ (8003034 <HAL_DMA_Abort+0x478>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a58      	ldr	r2, [pc, #352]	@ (8003038 <HAL_DMA_Abort+0x47c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a56      	ldr	r2, [pc, #344]	@ (800303c <HAL_DMA_Abort+0x480>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <HAL_DMA_Abort+0x33c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e007      	b.n	8002f08 <HAL_DMA_Abort+0x34c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f08:	e013      	b.n	8002f32 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f0a:	f7fe fea7 	bl	8001c5c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d90c      	bls.n	8002f32 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e12d      	b.n	800318e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e5      	bne.n	8002f0a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2f      	ldr	r2, [pc, #188]	@ (8003000 <HAL_DMA_Abort+0x444>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003004 <HAL_DMA_Abort+0x448>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2c      	ldr	r2, [pc, #176]	@ (8003008 <HAL_DMA_Abort+0x44c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	@ (800300c <HAL_DMA_Abort+0x450>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a29      	ldr	r2, [pc, #164]	@ (8003010 <HAL_DMA_Abort+0x454>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <HAL_DMA_Abort+0x458>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a26      	ldr	r2, [pc, #152]	@ (8003018 <HAL_DMA_Abort+0x45c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a24      	ldr	r2, [pc, #144]	@ (800301c <HAL_DMA_Abort+0x460>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a23      	ldr	r2, [pc, #140]	@ (8003020 <HAL_DMA_Abort+0x464>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	@ (8003024 <HAL_DMA_Abort+0x468>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a20      	ldr	r2, [pc, #128]	@ (8003028 <HAL_DMA_Abort+0x46c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800302c <HAL_DMA_Abort+0x470>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1d      	ldr	r2, [pc, #116]	@ (8003030 <HAL_DMA_Abort+0x474>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003034 <HAL_DMA_Abort+0x478>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1a      	ldr	r2, [pc, #104]	@ (8003038 <HAL_DMA_Abort+0x47c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a18      	ldr	r2, [pc, #96]	@ (800303c <HAL_DMA_Abort+0x480>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Abort+0x426>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_Abort+0x428>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02b      	beq.n	8003040 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	223f      	movs	r2, #63	@ 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	e02a      	b.n	8003056 <HAL_DMA_Abort+0x49a>
 8003000:	40020010 	.word	0x40020010
 8003004:	40020028 	.word	0x40020028
 8003008:	40020040 	.word	0x40020040
 800300c:	40020058 	.word	0x40020058
 8003010:	40020070 	.word	0x40020070
 8003014:	40020088 	.word	0x40020088
 8003018:	400200a0 	.word	0x400200a0
 800301c:	400200b8 	.word	0x400200b8
 8003020:	40020410 	.word	0x40020410
 8003024:	40020428 	.word	0x40020428
 8003028:	40020440 	.word	0x40020440
 800302c:	40020458 	.word	0x40020458
 8003030:	40020470 	.word	0x40020470
 8003034:	40020488 	.word	0x40020488
 8003038:	400204a0 	.word	0x400204a0
 800303c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4f      	ldr	r2, [pc, #316]	@ (8003198 <HAL_DMA_Abort+0x5dc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d072      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a4d      	ldr	r2, [pc, #308]	@ (800319c <HAL_DMA_Abort+0x5e0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d06d      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4c      	ldr	r2, [pc, #304]	@ (80031a0 <HAL_DMA_Abort+0x5e4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d068      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4a      	ldr	r2, [pc, #296]	@ (80031a4 <HAL_DMA_Abort+0x5e8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d063      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a49      	ldr	r2, [pc, #292]	@ (80031a8 <HAL_DMA_Abort+0x5ec>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d05e      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a47      	ldr	r2, [pc, #284]	@ (80031ac <HAL_DMA_Abort+0x5f0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d059      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a46      	ldr	r2, [pc, #280]	@ (80031b0 <HAL_DMA_Abort+0x5f4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d054      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a44      	ldr	r2, [pc, #272]	@ (80031b4 <HAL_DMA_Abort+0x5f8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d04f      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a43      	ldr	r2, [pc, #268]	@ (80031b8 <HAL_DMA_Abort+0x5fc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d04a      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a41      	ldr	r2, [pc, #260]	@ (80031bc <HAL_DMA_Abort+0x600>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d045      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a40      	ldr	r2, [pc, #256]	@ (80031c0 <HAL_DMA_Abort+0x604>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d040      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3e      	ldr	r2, [pc, #248]	@ (80031c4 <HAL_DMA_Abort+0x608>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d03b      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a3d      	ldr	r2, [pc, #244]	@ (80031c8 <HAL_DMA_Abort+0x60c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d036      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3b      	ldr	r2, [pc, #236]	@ (80031cc <HAL_DMA_Abort+0x610>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3a      	ldr	r2, [pc, #232]	@ (80031d0 <HAL_DMA_Abort+0x614>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d02c      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a38      	ldr	r2, [pc, #224]	@ (80031d4 <HAL_DMA_Abort+0x618>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a37      	ldr	r2, [pc, #220]	@ (80031d8 <HAL_DMA_Abort+0x61c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a35      	ldr	r2, [pc, #212]	@ (80031dc <HAL_DMA_Abort+0x620>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a34      	ldr	r2, [pc, #208]	@ (80031e0 <HAL_DMA_Abort+0x624>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d018      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a32      	ldr	r2, [pc, #200]	@ (80031e4 <HAL_DMA_Abort+0x628>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a31      	ldr	r2, [pc, #196]	@ (80031e8 <HAL_DMA_Abort+0x62c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2f      	ldr	r2, [pc, #188]	@ (80031ec <HAL_DMA_Abort+0x630>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2e      	ldr	r2, [pc, #184]	@ (80031f0 <HAL_DMA_Abort+0x634>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2c      	ldr	r2, [pc, #176]	@ (80031f4 <HAL_DMA_Abort+0x638>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_DMA_Abort+0x58e>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_DMA_Abort+0x590>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003158:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800316c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003170:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800317a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40020010 	.word	0x40020010
 800319c:	40020028 	.word	0x40020028
 80031a0:	40020040 	.word	0x40020040
 80031a4:	40020058 	.word	0x40020058
 80031a8:	40020070 	.word	0x40020070
 80031ac:	40020088 	.word	0x40020088
 80031b0:	400200a0 	.word	0x400200a0
 80031b4:	400200b8 	.word	0x400200b8
 80031b8:	40020410 	.word	0x40020410
 80031bc:	40020428 	.word	0x40020428
 80031c0:	40020440 	.word	0x40020440
 80031c4:	40020458 	.word	0x40020458
 80031c8:	40020470 	.word	0x40020470
 80031cc:	40020488 	.word	0x40020488
 80031d0:	400204a0 	.word	0x400204a0
 80031d4:	400204b8 	.word	0x400204b8
 80031d8:	58025408 	.word	0x58025408
 80031dc:	5802541c 	.word	0x5802541c
 80031e0:	58025430 	.word	0x58025430
 80031e4:	58025444 	.word	0x58025444
 80031e8:	58025458 	.word	0x58025458
 80031ec:	5802546c 	.word	0x5802546c
 80031f0:	58025480 	.word	0x58025480
 80031f4:	58025494 	.word	0x58025494

080031f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e237      	b.n	800367a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d004      	beq.n	8003220 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2280      	movs	r2, #128	@ 0x80
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e22c      	b.n	800367a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5c      	ldr	r2, [pc, #368]	@ (8003398 <HAL_DMA_Abort_IT+0x1a0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5b      	ldr	r2, [pc, #364]	@ (800339c <HAL_DMA_Abort_IT+0x1a4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a59      	ldr	r2, [pc, #356]	@ (80033a0 <HAL_DMA_Abort_IT+0x1a8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a58      	ldr	r2, [pc, #352]	@ (80033a4 <HAL_DMA_Abort_IT+0x1ac>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a56      	ldr	r2, [pc, #344]	@ (80033a8 <HAL_DMA_Abort_IT+0x1b0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a55      	ldr	r2, [pc, #340]	@ (80033ac <HAL_DMA_Abort_IT+0x1b4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a53      	ldr	r2, [pc, #332]	@ (80033b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a52      	ldr	r2, [pc, #328]	@ (80033b4 <HAL_DMA_Abort_IT+0x1bc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a50      	ldr	r2, [pc, #320]	@ (80033b8 <HAL_DMA_Abort_IT+0x1c0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4f      	ldr	r2, [pc, #316]	@ (80033bc <HAL_DMA_Abort_IT+0x1c4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4d      	ldr	r2, [pc, #308]	@ (80033c0 <HAL_DMA_Abort_IT+0x1c8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a4c      	ldr	r2, [pc, #304]	@ (80033c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4a      	ldr	r2, [pc, #296]	@ (80033c8 <HAL_DMA_Abort_IT+0x1d0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a49      	ldr	r2, [pc, #292]	@ (80033cc <HAL_DMA_Abort_IT+0x1d4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a47      	ldr	r2, [pc, #284]	@ (80033d0 <HAL_DMA_Abort_IT+0x1d8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a46      	ldr	r2, [pc, #280]	@ (80033d4 <HAL_DMA_Abort_IT+0x1dc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_Abort_IT+0xcc>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_DMA_Abort_IT+0xce>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8086 	beq.w	80033d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2204      	movs	r2, #4
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003398 <HAL_DMA_Abort_IT+0x1a0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2e      	ldr	r2, [pc, #184]	@ (800339c <HAL_DMA_Abort_IT+0x1a4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	@ (80033a0 <HAL_DMA_Abort_IT+0x1a8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2b      	ldr	r2, [pc, #172]	@ (80033a4 <HAL_DMA_Abort_IT+0x1ac>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a29      	ldr	r2, [pc, #164]	@ (80033a8 <HAL_DMA_Abort_IT+0x1b0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <HAL_DMA_Abort_IT+0x1b4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a26      	ldr	r2, [pc, #152]	@ (80033b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a25      	ldr	r2, [pc, #148]	@ (80033b4 <HAL_DMA_Abort_IT+0x1bc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <HAL_DMA_Abort_IT+0x1c0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a22      	ldr	r2, [pc, #136]	@ (80033bc <HAL_DMA_Abort_IT+0x1c4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a20      	ldr	r2, [pc, #128]	@ (80033c0 <HAL_DMA_Abort_IT+0x1c8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1f      	ldr	r2, [pc, #124]	@ (80033c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	@ (80033c8 <HAL_DMA_Abort_IT+0x1d0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	@ (80033cc <HAL_DMA_Abort_IT+0x1d4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1a      	ldr	r2, [pc, #104]	@ (80033d0 <HAL_DMA_Abort_IT+0x1d8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <HAL_DMA_Abort_IT+0x1dc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <HAL_DMA_Abort_IT+0x18e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e178      	b.n	8003678 <HAL_DMA_Abort_IT+0x480>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e16f      	b.n	8003678 <HAL_DMA_Abort_IT+0x480>
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 020e 	bic.w	r2, r2, #14
 80033e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6c      	ldr	r2, [pc, #432]	@ (80035a0 <HAL_DMA_Abort_IT+0x3a8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d04a      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6b      	ldr	r2, [pc, #428]	@ (80035a4 <HAL_DMA_Abort_IT+0x3ac>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d045      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a69      	ldr	r2, [pc, #420]	@ (80035a8 <HAL_DMA_Abort_IT+0x3b0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d040      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a68      	ldr	r2, [pc, #416]	@ (80035ac <HAL_DMA_Abort_IT+0x3b4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d03b      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a66      	ldr	r2, [pc, #408]	@ (80035b0 <HAL_DMA_Abort_IT+0x3b8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d036      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a65      	ldr	r2, [pc, #404]	@ (80035b4 <HAL_DMA_Abort_IT+0x3bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d031      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a63      	ldr	r2, [pc, #396]	@ (80035b8 <HAL_DMA_Abort_IT+0x3c0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d02c      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a62      	ldr	r2, [pc, #392]	@ (80035bc <HAL_DMA_Abort_IT+0x3c4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d027      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a60      	ldr	r2, [pc, #384]	@ (80035c0 <HAL_DMA_Abort_IT+0x3c8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d022      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5f      	ldr	r2, [pc, #380]	@ (80035c4 <HAL_DMA_Abort_IT+0x3cc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01d      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5d      	ldr	r2, [pc, #372]	@ (80035c8 <HAL_DMA_Abort_IT+0x3d0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5c      	ldr	r2, [pc, #368]	@ (80035cc <HAL_DMA_Abort_IT+0x3d4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5a      	ldr	r2, [pc, #360]	@ (80035d0 <HAL_DMA_Abort_IT+0x3d8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a59      	ldr	r2, [pc, #356]	@ (80035d4 <HAL_DMA_Abort_IT+0x3dc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a57      	ldr	r2, [pc, #348]	@ (80035d8 <HAL_DMA_Abort_IT+0x3e0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a56      	ldr	r2, [pc, #344]	@ (80035dc <HAL_DMA_Abort_IT+0x3e4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <HAL_DMA_Abort_IT+0x2a2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e007      	b.n	80034aa <HAL_DMA_Abort_IT+0x2b2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3c      	ldr	r2, [pc, #240]	@ (80035a0 <HAL_DMA_Abort_IT+0x3a8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d072      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3a      	ldr	r2, [pc, #232]	@ (80035a4 <HAL_DMA_Abort_IT+0x3ac>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d06d      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <HAL_DMA_Abort_IT+0x3b0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d068      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a37      	ldr	r2, [pc, #220]	@ (80035ac <HAL_DMA_Abort_IT+0x3b4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d063      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a36      	ldr	r2, [pc, #216]	@ (80035b0 <HAL_DMA_Abort_IT+0x3b8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d05e      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a34      	ldr	r2, [pc, #208]	@ (80035b4 <HAL_DMA_Abort_IT+0x3bc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d059      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a33      	ldr	r2, [pc, #204]	@ (80035b8 <HAL_DMA_Abort_IT+0x3c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d054      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a31      	ldr	r2, [pc, #196]	@ (80035bc <HAL_DMA_Abort_IT+0x3c4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04f      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <HAL_DMA_Abort_IT+0x3c8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2e      	ldr	r2, [pc, #184]	@ (80035c4 <HAL_DMA_Abort_IT+0x3cc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2d      	ldr	r2, [pc, #180]	@ (80035c8 <HAL_DMA_Abort_IT+0x3d0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2b      	ldr	r2, [pc, #172]	@ (80035cc <HAL_DMA_Abort_IT+0x3d4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2a      	ldr	r2, [pc, #168]	@ (80035d0 <HAL_DMA_Abort_IT+0x3d8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a28      	ldr	r2, [pc, #160]	@ (80035d4 <HAL_DMA_Abort_IT+0x3dc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a27      	ldr	r2, [pc, #156]	@ (80035d8 <HAL_DMA_Abort_IT+0x3e0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <HAL_DMA_Abort_IT+0x3e4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a24      	ldr	r2, [pc, #144]	@ (80035e0 <HAL_DMA_Abort_IT+0x3e8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <HAL_DMA_Abort_IT+0x3ec>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a21      	ldr	r2, [pc, #132]	@ (80035e8 <HAL_DMA_Abort_IT+0x3f0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_DMA_Abort_IT+0x3f4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1e      	ldr	r2, [pc, #120]	@ (80035f0 <HAL_DMA_Abort_IT+0x3f8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <HAL_DMA_Abort_IT+0x3fc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <HAL_DMA_Abort_IT+0x400>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <HAL_DMA_Abort_IT+0x404>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d132      	bne.n	8003600 <HAL_DMA_Abort_IT+0x408>
 800359a:	2301      	movs	r3, #1
 800359c:	e031      	b.n	8003602 <HAL_DMA_Abort_IT+0x40a>
 800359e:	bf00      	nop
 80035a0:	40020010 	.word	0x40020010
 80035a4:	40020028 	.word	0x40020028
 80035a8:	40020040 	.word	0x40020040
 80035ac:	40020058 	.word	0x40020058
 80035b0:	40020070 	.word	0x40020070
 80035b4:	40020088 	.word	0x40020088
 80035b8:	400200a0 	.word	0x400200a0
 80035bc:	400200b8 	.word	0x400200b8
 80035c0:	40020410 	.word	0x40020410
 80035c4:	40020428 	.word	0x40020428
 80035c8:	40020440 	.word	0x40020440
 80035cc:	40020458 	.word	0x40020458
 80035d0:	40020470 	.word	0x40020470
 80035d4:	40020488 	.word	0x40020488
 80035d8:	400204a0 	.word	0x400204a0
 80035dc:	400204b8 	.word	0x400204b8
 80035e0:	58025408 	.word	0x58025408
 80035e4:	5802541c 	.word	0x5802541c
 80035e8:	58025430 	.word	0x58025430
 80035ec:	58025444 	.word	0x58025444
 80035f0:	58025458 	.word	0x58025458
 80035f4:	5802546c 	.word	0x5802546c
 80035f8:	58025480 	.word	0x58025480
 80035fc:	58025494 	.word	0x58025494
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d028      	beq.n	8003658 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003614:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2201      	movs	r2, #1
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003634:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800364c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003656:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop

08003684 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003690:	4b67      	ldr	r3, [pc, #412]	@ (8003830 <HAL_DMA_IRQHandler+0x1ac>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a67      	ldr	r2, [pc, #412]	@ (8003834 <HAL_DMA_IRQHandler+0x1b0>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003838 <HAL_DMA_IRQHandler+0x1b4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04a      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5d      	ldr	r2, [pc, #372]	@ (800383c <HAL_DMA_IRQHandler+0x1b8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d045      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003840 <HAL_DMA_IRQHandler+0x1bc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003844 <HAL_DMA_IRQHandler+0x1c0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d03b      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a59      	ldr	r2, [pc, #356]	@ (8003848 <HAL_DMA_IRQHandler+0x1c4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d036      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a57      	ldr	r2, [pc, #348]	@ (800384c <HAL_DMA_IRQHandler+0x1c8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a56      	ldr	r2, [pc, #344]	@ (8003850 <HAL_DMA_IRQHandler+0x1cc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02c      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a54      	ldr	r2, [pc, #336]	@ (8003854 <HAL_DMA_IRQHandler+0x1d0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a53      	ldr	r2, [pc, #332]	@ (8003858 <HAL_DMA_IRQHandler+0x1d4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a51      	ldr	r2, [pc, #324]	@ (800385c <HAL_DMA_IRQHandler+0x1d8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a50      	ldr	r2, [pc, #320]	@ (8003860 <HAL_DMA_IRQHandler+0x1dc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4e      	ldr	r2, [pc, #312]	@ (8003864 <HAL_DMA_IRQHandler+0x1e0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4d      	ldr	r2, [pc, #308]	@ (8003868 <HAL_DMA_IRQHandler+0x1e4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4b      	ldr	r2, [pc, #300]	@ (800386c <HAL_DMA_IRQHandler+0x1e8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4a      	ldr	r2, [pc, #296]	@ (8003870 <HAL_DMA_IRQHandler+0x1ec>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a48      	ldr	r2, [pc, #288]	@ (8003874 <HAL_DMA_IRQHandler+0x1f0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_DMA_IRQHandler+0xd6>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_DMA_IRQHandler+0xd8>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 842b 	beq.w	8003fb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2208      	movs	r2, #8
 800376c:	409a      	lsls	r2, r3
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80a2 	beq.w	80038bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2e      	ldr	r2, [pc, #184]	@ (8003838 <HAL_DMA_IRQHandler+0x1b4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d04a      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2d      	ldr	r2, [pc, #180]	@ (800383c <HAL_DMA_IRQHandler+0x1b8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d045      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2b      	ldr	r2, [pc, #172]	@ (8003840 <HAL_DMA_IRQHandler+0x1bc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d040      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2a      	ldr	r2, [pc, #168]	@ (8003844 <HAL_DMA_IRQHandler+0x1c0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d03b      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a28      	ldr	r2, [pc, #160]	@ (8003848 <HAL_DMA_IRQHandler+0x1c4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d036      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a27      	ldr	r2, [pc, #156]	@ (800384c <HAL_DMA_IRQHandler+0x1c8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d031      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a25      	ldr	r2, [pc, #148]	@ (8003850 <HAL_DMA_IRQHandler+0x1cc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02c      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a24      	ldr	r2, [pc, #144]	@ (8003854 <HAL_DMA_IRQHandler+0x1d0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d027      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a22      	ldr	r2, [pc, #136]	@ (8003858 <HAL_DMA_IRQHandler+0x1d4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d022      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a21      	ldr	r2, [pc, #132]	@ (800385c <HAL_DMA_IRQHandler+0x1d8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d01d      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <HAL_DMA_IRQHandler+0x1dc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d018      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003864 <HAL_DMA_IRQHandler+0x1e0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <HAL_DMA_IRQHandler+0x1e4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00e      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1b      	ldr	r2, [pc, #108]	@ (800386c <HAL_DMA_IRQHandler+0x1e8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a19      	ldr	r2, [pc, #100]	@ (8003870 <HAL_DMA_IRQHandler+0x1ec>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <HAL_DMA_IRQHandler+0x1f0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d12f      	bne.n	8003878 <HAL_DMA_IRQHandler+0x1f4>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e02e      	b.n	800388c <HAL_DMA_IRQHandler+0x208>
 800382e:	bf00      	nop
 8003830:	24000000 	.word	0x24000000
 8003834:	1b4e81b5 	.word	0x1b4e81b5
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0204 	bic.w	r2, r2, #4
 800389e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2208      	movs	r2, #8
 80038aa:	409a      	lsls	r2, r3
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d06e      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a69      	ldr	r2, [pc, #420]	@ (8003a7c <HAL_DMA_IRQHandler+0x3f8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d04a      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	@ (8003a80 <HAL_DMA_IRQHandler+0x3fc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d045      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a66      	ldr	r2, [pc, #408]	@ (8003a84 <HAL_DMA_IRQHandler+0x400>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d040      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a64      	ldr	r2, [pc, #400]	@ (8003a88 <HAL_DMA_IRQHandler+0x404>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d03b      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a63      	ldr	r2, [pc, #396]	@ (8003a8c <HAL_DMA_IRQHandler+0x408>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d036      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a61      	ldr	r2, [pc, #388]	@ (8003a90 <HAL_DMA_IRQHandler+0x40c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d031      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a60      	ldr	r2, [pc, #384]	@ (8003a94 <HAL_DMA_IRQHandler+0x410>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d02c      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5e      	ldr	r2, [pc, #376]	@ (8003a98 <HAL_DMA_IRQHandler+0x414>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d027      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5d      	ldr	r2, [pc, #372]	@ (8003a9c <HAL_DMA_IRQHandler+0x418>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d022      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa0 <HAL_DMA_IRQHandler+0x41c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01d      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a5a      	ldr	r2, [pc, #360]	@ (8003aa4 <HAL_DMA_IRQHandler+0x420>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d018      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a58      	ldr	r2, [pc, #352]	@ (8003aa8 <HAL_DMA_IRQHandler+0x424>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a57      	ldr	r2, [pc, #348]	@ (8003aac <HAL_DMA_IRQHandler+0x428>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a55      	ldr	r2, [pc, #340]	@ (8003ab0 <HAL_DMA_IRQHandler+0x42c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_DMA_IRQHandler+0x430>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a52      	ldr	r2, [pc, #328]	@ (8003ab8 <HAL_DMA_IRQHandler+0x434>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10a      	bne.n	8003988 <HAL_DMA_IRQHandler+0x304>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e003      	b.n	8003990 <HAL_DMA_IRQHandler+0x30c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2201      	movs	r2, #1
 800399e:	409a      	lsls	r2, r3
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a8:	f043 0202 	orr.w	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2204      	movs	r2, #4
 80039ba:	409a      	lsls	r2, r3
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 808f 	beq.w	8003ae4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2c      	ldr	r2, [pc, #176]	@ (8003a7c <HAL_DMA_IRQHandler+0x3f8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04a      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <HAL_DMA_IRQHandler+0x3fc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d045      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a29      	ldr	r2, [pc, #164]	@ (8003a84 <HAL_DMA_IRQHandler+0x400>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a27      	ldr	r2, [pc, #156]	@ (8003a88 <HAL_DMA_IRQHandler+0x404>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03b      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a26      	ldr	r2, [pc, #152]	@ (8003a8c <HAL_DMA_IRQHandler+0x408>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d036      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a24      	ldr	r2, [pc, #144]	@ (8003a90 <HAL_DMA_IRQHandler+0x40c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a23      	ldr	r2, [pc, #140]	@ (8003a94 <HAL_DMA_IRQHandler+0x410>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02c      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a21      	ldr	r2, [pc, #132]	@ (8003a98 <HAL_DMA_IRQHandler+0x414>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a20      	ldr	r2, [pc, #128]	@ (8003a9c <HAL_DMA_IRQHandler+0x418>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <HAL_DMA_IRQHandler+0x41c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <HAL_DMA_IRQHandler+0x420>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa8 <HAL_DMA_IRQHandler+0x424>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1a      	ldr	r2, [pc, #104]	@ (8003aac <HAL_DMA_IRQHandler+0x428>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <HAL_DMA_IRQHandler+0x42c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a17      	ldr	r2, [pc, #92]	@ (8003ab4 <HAL_DMA_IRQHandler+0x430>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a15      	ldr	r2, [pc, #84]	@ (8003ab8 <HAL_DMA_IRQHandler+0x434>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d12a      	bne.n	8003abc <HAL_DMA_IRQHandler+0x438>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e023      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x440>
 8003a7c:	40020010 	.word	0x40020010
 8003a80:	40020028 	.word	0x40020028
 8003a84:	40020040 	.word	0x40020040
 8003a88:	40020058 	.word	0x40020058
 8003a8c:	40020070 	.word	0x40020070
 8003a90:	40020088 	.word	0x40020088
 8003a94:	400200a0 	.word	0x400200a0
 8003a98:	400200b8 	.word	0x400200b8
 8003a9c:	40020410 	.word	0x40020410
 8003aa0:	40020428 	.word	0x40020428
 8003aa4:	40020440 	.word	0x40020440
 8003aa8:	40020458 	.word	0x40020458
 8003aac:	40020470 	.word	0x40020470
 8003ab0:	40020488 	.word	0x40020488
 8003ab4:	400204a0 	.word	0x400204a0
 8003ab8:	400204b8 	.word	0x400204b8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2210      	movs	r2, #16
 8003aee:	409a      	lsls	r2, r3
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a6 	beq.w	8003c46 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a85      	ldr	r2, [pc, #532]	@ (8003d14 <HAL_DMA_IRQHandler+0x690>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04a      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a83      	ldr	r2, [pc, #524]	@ (8003d18 <HAL_DMA_IRQHandler+0x694>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d045      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a82      	ldr	r2, [pc, #520]	@ (8003d1c <HAL_DMA_IRQHandler+0x698>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d040      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a80      	ldr	r2, [pc, #512]	@ (8003d20 <HAL_DMA_IRQHandler+0x69c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d03b      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7f      	ldr	r2, [pc, #508]	@ (8003d24 <HAL_DMA_IRQHandler+0x6a0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d036      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a7d      	ldr	r2, [pc, #500]	@ (8003d28 <HAL_DMA_IRQHandler+0x6a4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d031      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d2c <HAL_DMA_IRQHandler+0x6a8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d02c      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7a      	ldr	r2, [pc, #488]	@ (8003d30 <HAL_DMA_IRQHandler+0x6ac>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d027      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a79      	ldr	r2, [pc, #484]	@ (8003d34 <HAL_DMA_IRQHandler+0x6b0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a77      	ldr	r2, [pc, #476]	@ (8003d38 <HAL_DMA_IRQHandler+0x6b4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a76      	ldr	r2, [pc, #472]	@ (8003d3c <HAL_DMA_IRQHandler+0x6b8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a74      	ldr	r2, [pc, #464]	@ (8003d40 <HAL_DMA_IRQHandler+0x6bc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a73      	ldr	r2, [pc, #460]	@ (8003d44 <HAL_DMA_IRQHandler+0x6c0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a71      	ldr	r2, [pc, #452]	@ (8003d48 <HAL_DMA_IRQHandler+0x6c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a70      	ldr	r2, [pc, #448]	@ (8003d4c <HAL_DMA_IRQHandler+0x6c8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6e      	ldr	r2, [pc, #440]	@ (8003d50 <HAL_DMA_IRQHandler+0x6cc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10a      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x52c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e009      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x540>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d03e      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d018      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d108      	bne.n	8003c06 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d024      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
 8003c04:	e01f      	b.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01b      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e016      	b.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0208 	bic.w	r2, r2, #8
 8003c34:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2220      	movs	r2, #32
 8003c50:	409a      	lsls	r2, r3
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8110 	beq.w	8003e7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2c      	ldr	r2, [pc, #176]	@ (8003d14 <HAL_DMA_IRQHandler+0x690>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04a      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d18 <HAL_DMA_IRQHandler+0x694>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d045      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a29      	ldr	r2, [pc, #164]	@ (8003d1c <HAL_DMA_IRQHandler+0x698>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d040      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a28      	ldr	r2, [pc, #160]	@ (8003d20 <HAL_DMA_IRQHandler+0x69c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d03b      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a26      	ldr	r2, [pc, #152]	@ (8003d24 <HAL_DMA_IRQHandler+0x6a0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d036      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a25      	ldr	r2, [pc, #148]	@ (8003d28 <HAL_DMA_IRQHandler+0x6a4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d031      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <HAL_DMA_IRQHandler+0x6a8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02c      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a22      	ldr	r2, [pc, #136]	@ (8003d30 <HAL_DMA_IRQHandler+0x6ac>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d027      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	@ (8003d34 <HAL_DMA_IRQHandler+0x6b0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d022      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <HAL_DMA_IRQHandler+0x6b4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d01d      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <HAL_DMA_IRQHandler+0x6b8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <HAL_DMA_IRQHandler+0x6bc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d44 <HAL_DMA_IRQHandler+0x6c0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <HAL_DMA_IRQHandler+0x6c4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_DMA_IRQHandler+0x6c8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <HAL_DMA_IRQHandler+0x6cc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d12b      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x6d0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e02a      	b.n	8003d68 <HAL_DMA_IRQHandler+0x6e4>
 8003d12:	bf00      	nop
 8003d14:	40020010 	.word	0x40020010
 8003d18:	40020028 	.word	0x40020028
 8003d1c:	40020040 	.word	0x40020040
 8003d20:	40020058 	.word	0x40020058
 8003d24:	40020070 	.word	0x40020070
 8003d28:	40020088 	.word	0x40020088
 8003d2c:	400200a0 	.word	0x400200a0
 8003d30:	400200b8 	.word	0x400200b8
 8003d34:	40020410 	.word	0x40020410
 8003d38:	40020428 	.word	0x40020428
 8003d3c:	40020440 	.word	0x40020440
 8003d40:	40020458 	.word	0x40020458
 8003d44:	40020470 	.word	0x40020470
 8003d48:	40020488 	.word	0x40020488
 8003d4c:	400204a0 	.word	0x400204a0
 8003d50:	400204b8 	.word	0x400204b8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8087 	beq.w	8003e7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2220      	movs	r2, #32
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d139      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0216 	bic.w	r2, r2, #22
 8003d98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003da8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_DMA_IRQHandler+0x736>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0208 	bic.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	223f      	movs	r2, #63	@ 0x3f
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8382 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
          }
          return;
 8003dfc:	e37c      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02c      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e027      	b.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d023      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
 8003e3c:	e01e      	b.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0210 	bic.w	r2, r2, #16
 8003e5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 833e 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8088 	beq.w	8003fa4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a89      	ldr	r2, [pc, #548]	@ (80040c8 <HAL_DMA_IRQHandler+0xa44>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a88      	ldr	r2, [pc, #544]	@ (80040cc <HAL_DMA_IRQHandler+0xa48>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a86      	ldr	r2, [pc, #536]	@ (80040d0 <HAL_DMA_IRQHandler+0xa4c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a85      	ldr	r2, [pc, #532]	@ (80040d4 <HAL_DMA_IRQHandler+0xa50>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a83      	ldr	r2, [pc, #524]	@ (80040d8 <HAL_DMA_IRQHandler+0xa54>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a82      	ldr	r2, [pc, #520]	@ (80040dc <HAL_DMA_IRQHandler+0xa58>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a80      	ldr	r2, [pc, #512]	@ (80040e0 <HAL_DMA_IRQHandler+0xa5c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7f      	ldr	r2, [pc, #508]	@ (80040e4 <HAL_DMA_IRQHandler+0xa60>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a7d      	ldr	r2, [pc, #500]	@ (80040e8 <HAL_DMA_IRQHandler+0xa64>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7c      	ldr	r2, [pc, #496]	@ (80040ec <HAL_DMA_IRQHandler+0xa68>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a7a      	ldr	r2, [pc, #488]	@ (80040f0 <HAL_DMA_IRQHandler+0xa6c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a79      	ldr	r2, [pc, #484]	@ (80040f4 <HAL_DMA_IRQHandler+0xa70>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a77      	ldr	r2, [pc, #476]	@ (80040f8 <HAL_DMA_IRQHandler+0xa74>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a76      	ldr	r2, [pc, #472]	@ (80040fc <HAL_DMA_IRQHandler+0xa78>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a74      	ldr	r2, [pc, #464]	@ (8004100 <HAL_DMA_IRQHandler+0xa7c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a73      	ldr	r2, [pc, #460]	@ (8004104 <HAL_DMA_IRQHandler+0xa80>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x8ca>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e007      	b.n	8003f5e <HAL_DMA_IRQHandler+0x8da>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d307      	bcc.n	8003f7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f2      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x8da>
 8003f78:	e000      	b.n	8003f7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003f92:	e003      	b.n	8003f9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 82aa 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
 8003fb6:	e2a4      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	@ (8004108 <HAL_DMA_IRQHandler+0xa84>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a51      	ldr	r2, [pc, #324]	@ (800410c <HAL_DMA_IRQHandler+0xa88>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8004110 <HAL_DMA_IRQHandler+0xa8c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4e      	ldr	r2, [pc, #312]	@ (8004114 <HAL_DMA_IRQHandler+0xa90>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8004118 <HAL_DMA_IRQHandler+0xa94>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a4b      	ldr	r2, [pc, #300]	@ (800411c <HAL_DMA_IRQHandler+0xa98>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	@ (8004120 <HAL_DMA_IRQHandler+0xa9c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a48      	ldr	r2, [pc, #288]	@ (8004124 <HAL_DMA_IRQHandler+0xaa0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a46      	ldr	r2, [pc, #280]	@ (8004128 <HAL_DMA_IRQHandler+0xaa4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a45      	ldr	r2, [pc, #276]	@ (800412c <HAL_DMA_IRQHandler+0xaa8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a43      	ldr	r2, [pc, #268]	@ (8004130 <HAL_DMA_IRQHandler+0xaac>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a42      	ldr	r2, [pc, #264]	@ (8004134 <HAL_DMA_IRQHandler+0xab0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a40      	ldr	r2, [pc, #256]	@ (8004138 <HAL_DMA_IRQHandler+0xab4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3f      	ldr	r2, [pc, #252]	@ (800413c <HAL_DMA_IRQHandler+0xab8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3d      	ldr	r2, [pc, #244]	@ (8004140 <HAL_DMA_IRQHandler+0xabc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a3c      	ldr	r2, [pc, #240]	@ (8004144 <HAL_DMA_IRQHandler+0xac0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_DMA_IRQHandler+0x9d8>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_DMA_IRQHandler+0x9da>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 824f 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2204      	movs	r2, #4
 8004076:	409a      	lsls	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80dd 	beq.w	800423c <HAL_DMA_IRQHandler+0xbb8>
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80d7 	beq.w	800423c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2204      	movs	r2, #4
 8004098:	409a      	lsls	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d059      	beq.n	800415c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d14a      	bne.n	8004148 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8220 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c4:	e21a      	b.n	80044fc <HAL_DMA_IRQHandler+0xe78>
 80040c6:	bf00      	nop
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
 8004108:	48022c08 	.word	0x48022c08
 800410c:	48022c1c 	.word	0x48022c1c
 8004110:	48022c30 	.word	0x48022c30
 8004114:	48022c44 	.word	0x48022c44
 8004118:	48022c58 	.word	0x48022c58
 800411c:	48022c6c 	.word	0x48022c6c
 8004120:	48022c80 	.word	0x48022c80
 8004124:	48022c94 	.word	0x48022c94
 8004128:	58025408 	.word	0x58025408
 800412c:	5802541c 	.word	0x5802541c
 8004130:	58025430 	.word	0x58025430
 8004134:	58025444 	.word	0x58025444
 8004138:	58025458 	.word	0x58025458
 800413c:	5802546c 	.word	0x5802546c
 8004140:	58025480 	.word	0x58025480
 8004144:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 81d5 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800415a:	e1cf      	b.n	80044fc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d160      	bne.n	8004228 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7f      	ldr	r2, [pc, #508]	@ (8004368 <HAL_DMA_IRQHandler+0xce4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04a      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7d      	ldr	r2, [pc, #500]	@ (800436c <HAL_DMA_IRQHandler+0xce8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d045      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a7c      	ldr	r2, [pc, #496]	@ (8004370 <HAL_DMA_IRQHandler+0xcec>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d040      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a7a      	ldr	r2, [pc, #488]	@ (8004374 <HAL_DMA_IRQHandler+0xcf0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a79      	ldr	r2, [pc, #484]	@ (8004378 <HAL_DMA_IRQHandler+0xcf4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d036      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a77      	ldr	r2, [pc, #476]	@ (800437c <HAL_DMA_IRQHandler+0xcf8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a76      	ldr	r2, [pc, #472]	@ (8004380 <HAL_DMA_IRQHandler+0xcfc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d02c      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a74      	ldr	r2, [pc, #464]	@ (8004384 <HAL_DMA_IRQHandler+0xd00>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a73      	ldr	r2, [pc, #460]	@ (8004388 <HAL_DMA_IRQHandler+0xd04>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a71      	ldr	r2, [pc, #452]	@ (800438c <HAL_DMA_IRQHandler+0xd08>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a70      	ldr	r2, [pc, #448]	@ (8004390 <HAL_DMA_IRQHandler+0xd0c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004394 <HAL_DMA_IRQHandler+0xd10>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004398 <HAL_DMA_IRQHandler+0xd14>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6b      	ldr	r2, [pc, #428]	@ (800439c <HAL_DMA_IRQHandler+0xd18>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6a      	ldr	r2, [pc, #424]	@ (80043a0 <HAL_DMA_IRQHandler+0xd1c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <HAL_DMA_IRQHandler+0xd20>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <HAL_DMA_IRQHandler+0xb94>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e007      	b.n	8004228 <HAL_DMA_IRQHandler+0xba4>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8165 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800423a:	e15f      	b.n	80044fc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2202      	movs	r2, #2
 8004246:	409a      	lsls	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80c5 	beq.w	80043dc <HAL_DMA_IRQHandler+0xd58>
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80bf 	beq.w	80043dc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2202      	movs	r2, #2
 8004268:	409a      	lsls	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 813a 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004294:	e134      	b.n	8004500 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8130 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a8:	e12a      	b.n	8004500 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 8089 	bne.w	80043c8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004368 <HAL_DMA_IRQHandler+0xce4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a29      	ldr	r2, [pc, #164]	@ (800436c <HAL_DMA_IRQHandler+0xce8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a28      	ldr	r2, [pc, #160]	@ (8004370 <HAL_DMA_IRQHandler+0xcec>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a26      	ldr	r2, [pc, #152]	@ (8004374 <HAL_DMA_IRQHandler+0xcf0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <HAL_DMA_IRQHandler+0xcf4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a23      	ldr	r2, [pc, #140]	@ (800437c <HAL_DMA_IRQHandler+0xcf8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <HAL_DMA_IRQHandler+0xcfc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a20      	ldr	r2, [pc, #128]	@ (8004384 <HAL_DMA_IRQHandler+0xd00>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <HAL_DMA_IRQHandler+0xd04>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <HAL_DMA_IRQHandler+0xd08>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <HAL_DMA_IRQHandler+0xd0c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1a      	ldr	r2, [pc, #104]	@ (8004394 <HAL_DMA_IRQHandler+0xd10>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <HAL_DMA_IRQHandler+0xd14>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a17      	ldr	r2, [pc, #92]	@ (800439c <HAL_DMA_IRQHandler+0xd18>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <HAL_DMA_IRQHandler+0xd1c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a14      	ldr	r2, [pc, #80]	@ (80043a4 <HAL_DMA_IRQHandler+0xd20>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d128      	bne.n	80043a8 <HAL_DMA_IRQHandler+0xd24>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0214 	bic.w	r2, r2, #20
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e027      	b.n	80043b8 <HAL_DMA_IRQHandler+0xd34>
 8004368:	40020010 	.word	0x40020010
 800436c:	40020028 	.word	0x40020028
 8004370:	40020040 	.word	0x40020040
 8004374:	40020058 	.word	0x40020058
 8004378:	40020070 	.word	0x40020070
 800437c:	40020088 	.word	0x40020088
 8004380:	400200a0 	.word	0x400200a0
 8004384:	400200b8 	.word	0x400200b8
 8004388:	40020410 	.word	0x40020410
 800438c:	40020428 	.word	0x40020428
 8004390:	40020440 	.word	0x40020440
 8004394:	40020458 	.word	0x40020458
 8004398:	40020470 	.word	0x40020470
 800439c:	40020488 	.word	0x40020488
 80043a0:	400204a0 	.word	0x400204a0
 80043a4:	400204b8 	.word	0x400204b8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 020a 	bic.w	r2, r2, #10
 80043b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043da:	e091      	b.n	8004500 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	2208      	movs	r2, #8
 80043e6:	409a      	lsls	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8088 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8082 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a41      	ldr	r2, [pc, #260]	@ (8004508 <HAL_DMA_IRQHandler+0xe84>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d04a      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3f      	ldr	r2, [pc, #252]	@ (800450c <HAL_DMA_IRQHandler+0xe88>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d045      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3e      	ldr	r2, [pc, #248]	@ (8004510 <HAL_DMA_IRQHandler+0xe8c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d040      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3c      	ldr	r2, [pc, #240]	@ (8004514 <HAL_DMA_IRQHandler+0xe90>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d03b      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3b      	ldr	r2, [pc, #236]	@ (8004518 <HAL_DMA_IRQHandler+0xe94>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d036      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a39      	ldr	r2, [pc, #228]	@ (800451c <HAL_DMA_IRQHandler+0xe98>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d031      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a38      	ldr	r2, [pc, #224]	@ (8004520 <HAL_DMA_IRQHandler+0xe9c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d02c      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a36      	ldr	r2, [pc, #216]	@ (8004524 <HAL_DMA_IRQHandler+0xea0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d027      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a35      	ldr	r2, [pc, #212]	@ (8004528 <HAL_DMA_IRQHandler+0xea4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d022      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a33      	ldr	r2, [pc, #204]	@ (800452c <HAL_DMA_IRQHandler+0xea8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01d      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a32      	ldr	r2, [pc, #200]	@ (8004530 <HAL_DMA_IRQHandler+0xeac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d018      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a30      	ldr	r2, [pc, #192]	@ (8004534 <HAL_DMA_IRQHandler+0xeb0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2f      	ldr	r2, [pc, #188]	@ (8004538 <HAL_DMA_IRQHandler+0xeb4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2d      	ldr	r2, [pc, #180]	@ (800453c <HAL_DMA_IRQHandler+0xeb8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2c      	ldr	r2, [pc, #176]	@ (8004540 <HAL_DMA_IRQHandler+0xebc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2a      	ldr	r2, [pc, #168]	@ (8004544 <HAL_DMA_IRQHandler+0xec0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <HAL_DMA_IRQHandler+0xe2c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 021c 	bic.w	r2, r2, #28
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e007      	b.n	80044c0 <HAL_DMA_IRQHandler+0xe3c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 020e 	bic.w	r2, r2, #14
 80044be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
 80044f6:	e004      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004500:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004502:	3728      	adds	r7, #40	@ 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40020010 	.word	0x40020010
 800450c:	40020028 	.word	0x40020028
 8004510:	40020040 	.word	0x40020040
 8004514:	40020058 	.word	0x40020058
 8004518:	40020070 	.word	0x40020070
 800451c:	40020088 	.word	0x40020088
 8004520:	400200a0 	.word	0x400200a0
 8004524:	400200b8 	.word	0x400200b8
 8004528:	40020410 	.word	0x40020410
 800452c:	40020428 	.word	0x40020428
 8004530:	40020440 	.word	0x40020440
 8004534:	40020458 	.word	0x40020458
 8004538:	40020470 	.word	0x40020470
 800453c:	40020488 	.word	0x40020488
 8004540:	400204a0 	.word	0x400204a0
 8004544:	400204b8 	.word	0x400204b8

08004548 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004572:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a7f      	ldr	r2, [pc, #508]	@ (800477c <DMA_SetConfig+0x21c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d072      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a7d      	ldr	r2, [pc, #500]	@ (8004780 <DMA_SetConfig+0x220>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d06d      	beq.n	800466a <DMA_SetConfig+0x10a>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7c      	ldr	r2, [pc, #496]	@ (8004784 <DMA_SetConfig+0x224>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d068      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a7a      	ldr	r2, [pc, #488]	@ (8004788 <DMA_SetConfig+0x228>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d063      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a79      	ldr	r2, [pc, #484]	@ (800478c <DMA_SetConfig+0x22c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d05e      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a77      	ldr	r2, [pc, #476]	@ (8004790 <DMA_SetConfig+0x230>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d059      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a76      	ldr	r2, [pc, #472]	@ (8004794 <DMA_SetConfig+0x234>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d054      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a74      	ldr	r2, [pc, #464]	@ (8004798 <DMA_SetConfig+0x238>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d04f      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a73      	ldr	r2, [pc, #460]	@ (800479c <DMA_SetConfig+0x23c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d04a      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a71      	ldr	r2, [pc, #452]	@ (80047a0 <DMA_SetConfig+0x240>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d045      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a70      	ldr	r2, [pc, #448]	@ (80047a4 <DMA_SetConfig+0x244>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d040      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a6e      	ldr	r2, [pc, #440]	@ (80047a8 <DMA_SetConfig+0x248>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d03b      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6d      	ldr	r2, [pc, #436]	@ (80047ac <DMA_SetConfig+0x24c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d036      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6b      	ldr	r2, [pc, #428]	@ (80047b0 <DMA_SetConfig+0x250>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a6a      	ldr	r2, [pc, #424]	@ (80047b4 <DMA_SetConfig+0x254>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d02c      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a68      	ldr	r2, [pc, #416]	@ (80047b8 <DMA_SetConfig+0x258>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d027      	beq.n	800466a <DMA_SetConfig+0x10a>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a67      	ldr	r2, [pc, #412]	@ (80047bc <DMA_SetConfig+0x25c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a65      	ldr	r2, [pc, #404]	@ (80047c0 <DMA_SetConfig+0x260>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <DMA_SetConfig+0x10a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a64      	ldr	r2, [pc, #400]	@ (80047c4 <DMA_SetConfig+0x264>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a62      	ldr	r2, [pc, #392]	@ (80047c8 <DMA_SetConfig+0x268>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a61      	ldr	r2, [pc, #388]	@ (80047cc <DMA_SetConfig+0x26c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <DMA_SetConfig+0x10a>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5f      	ldr	r2, [pc, #380]	@ (80047d0 <DMA_SetConfig+0x270>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5e      	ldr	r2, [pc, #376]	@ (80047d4 <DMA_SetConfig+0x274>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a5c      	ldr	r2, [pc, #368]	@ (80047d8 <DMA_SetConfig+0x278>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <DMA_SetConfig+0x10e>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <DMA_SetConfig+0x110>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800467c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800468e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a39      	ldr	r2, [pc, #228]	@ (800477c <DMA_SetConfig+0x21c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d04a      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a38      	ldr	r2, [pc, #224]	@ (8004780 <DMA_SetConfig+0x220>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d045      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a36      	ldr	r2, [pc, #216]	@ (8004784 <DMA_SetConfig+0x224>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d040      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <DMA_SetConfig+0x228>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d03b      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a33      	ldr	r2, [pc, #204]	@ (800478c <DMA_SetConfig+0x22c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d036      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a32      	ldr	r2, [pc, #200]	@ (8004790 <DMA_SetConfig+0x230>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d031      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a30      	ldr	r2, [pc, #192]	@ (8004794 <DMA_SetConfig+0x234>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02c      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2f      	ldr	r2, [pc, #188]	@ (8004798 <DMA_SetConfig+0x238>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d027      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2d      	ldr	r2, [pc, #180]	@ (800479c <DMA_SetConfig+0x23c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2c      	ldr	r2, [pc, #176]	@ (80047a0 <DMA_SetConfig+0x240>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d01d      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	@ (80047a4 <DMA_SetConfig+0x244>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a29      	ldr	r2, [pc, #164]	@ (80047a8 <DMA_SetConfig+0x248>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <DMA_SetConfig+0x24c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <DMA_SetConfig+0x250>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a24      	ldr	r2, [pc, #144]	@ (80047b4 <DMA_SetConfig+0x254>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a23      	ldr	r2, [pc, #140]	@ (80047b8 <DMA_SetConfig+0x258>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <DMA_SetConfig+0x1d4>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <DMA_SetConfig+0x1d6>
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d059      	beq.n	80047ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	223f      	movs	r2, #63	@ 0x3f
 8004744:	409a      	lsls	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004758:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b40      	cmp	r3, #64	@ 0x40
 8004768:	d138      	bne.n	80047dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800477a:	e0ae      	b.n	80048da <DMA_SetConfig+0x37a>
 800477c:	40020010 	.word	0x40020010
 8004780:	40020028 	.word	0x40020028
 8004784:	40020040 	.word	0x40020040
 8004788:	40020058 	.word	0x40020058
 800478c:	40020070 	.word	0x40020070
 8004790:	40020088 	.word	0x40020088
 8004794:	400200a0 	.word	0x400200a0
 8004798:	400200b8 	.word	0x400200b8
 800479c:	40020410 	.word	0x40020410
 80047a0:	40020428 	.word	0x40020428
 80047a4:	40020440 	.word	0x40020440
 80047a8:	40020458 	.word	0x40020458
 80047ac:	40020470 	.word	0x40020470
 80047b0:	40020488 	.word	0x40020488
 80047b4:	400204a0 	.word	0x400204a0
 80047b8:	400204b8 	.word	0x400204b8
 80047bc:	58025408 	.word	0x58025408
 80047c0:	5802541c 	.word	0x5802541c
 80047c4:	58025430 	.word	0x58025430
 80047c8:	58025444 	.word	0x58025444
 80047cc:	58025458 	.word	0x58025458
 80047d0:	5802546c 	.word	0x5802546c
 80047d4:	58025480 	.word	0x58025480
 80047d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
}
 80047ec:	e075      	b.n	80048da <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3d      	ldr	r2, [pc, #244]	@ (80048e8 <DMA_SetConfig+0x388>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04a      	beq.n	800488e <DMA_SetConfig+0x32e>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3b      	ldr	r2, [pc, #236]	@ (80048ec <DMA_SetConfig+0x38c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d045      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a3a      	ldr	r2, [pc, #232]	@ (80048f0 <DMA_SetConfig+0x390>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <DMA_SetConfig+0x32e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a38      	ldr	r2, [pc, #224]	@ (80048f4 <DMA_SetConfig+0x394>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d03b      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a37      	ldr	r2, [pc, #220]	@ (80048f8 <DMA_SetConfig+0x398>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d036      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a35      	ldr	r2, [pc, #212]	@ (80048fc <DMA_SetConfig+0x39c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <DMA_SetConfig+0x32e>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a34      	ldr	r2, [pc, #208]	@ (8004900 <DMA_SetConfig+0x3a0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d02c      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <DMA_SetConfig+0x3a4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d027      	beq.n	800488e <DMA_SetConfig+0x32e>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a31      	ldr	r2, [pc, #196]	@ (8004908 <DMA_SetConfig+0x3a8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2f      	ldr	r2, [pc, #188]	@ (800490c <DMA_SetConfig+0x3ac>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01d      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2e      	ldr	r2, [pc, #184]	@ (8004910 <DMA_SetConfig+0x3b0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <DMA_SetConfig+0x32e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2c      	ldr	r2, [pc, #176]	@ (8004914 <DMA_SetConfig+0x3b4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2b      	ldr	r2, [pc, #172]	@ (8004918 <DMA_SetConfig+0x3b8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a29      	ldr	r2, [pc, #164]	@ (800491c <DMA_SetConfig+0x3bc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <DMA_SetConfig+0x32e>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <DMA_SetConfig+0x3c0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <DMA_SetConfig+0x32e>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a26      	ldr	r2, [pc, #152]	@ (8004924 <DMA_SetConfig+0x3c4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <DMA_SetConfig+0x332>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <DMA_SetConfig+0x334>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2201      	movs	r2, #1
 80048a2:	409a      	lsls	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d108      	bne.n	80048ca <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	60da      	str	r2, [r3, #12]
}
 80048c8:	e007      	b.n	80048da <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	60da      	str	r2, [r3, #12]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	48022c08 	.word	0x48022c08
 80048ec:	48022c1c 	.word	0x48022c1c
 80048f0:	48022c30 	.word	0x48022c30
 80048f4:	48022c44 	.word	0x48022c44
 80048f8:	48022c58 	.word	0x48022c58
 80048fc:	48022c6c 	.word	0x48022c6c
 8004900:	48022c80 	.word	0x48022c80
 8004904:	48022c94 	.word	0x48022c94
 8004908:	58025408 	.word	0x58025408
 800490c:	5802541c 	.word	0x5802541c
 8004910:	58025430 	.word	0x58025430
 8004914:	58025444 	.word	0x58025444
 8004918:	58025458 	.word	0x58025458
 800491c:	5802546c 	.word	0x5802546c
 8004920:	58025480 	.word	0x58025480
 8004924:	58025494 	.word	0x58025494

08004928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a42      	ldr	r2, [pc, #264]	@ (8004a40 <DMA_CalcBaseAndBitshift+0x118>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a41      	ldr	r2, [pc, #260]	@ (8004a44 <DMA_CalcBaseAndBitshift+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a3f      	ldr	r2, [pc, #252]	@ (8004a48 <DMA_CalcBaseAndBitshift+0x120>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a3e      	ldr	r2, [pc, #248]	@ (8004a4c <DMA_CalcBaseAndBitshift+0x124>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a50 <DMA_CalcBaseAndBitshift+0x128>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a3b      	ldr	r2, [pc, #236]	@ (8004a54 <DMA_CalcBaseAndBitshift+0x12c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a39      	ldr	r2, [pc, #228]	@ (8004a58 <DMA_CalcBaseAndBitshift+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a38      	ldr	r2, [pc, #224]	@ (8004a5c <DMA_CalcBaseAndBitshift+0x134>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a36      	ldr	r2, [pc, #216]	@ (8004a60 <DMA_CalcBaseAndBitshift+0x138>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a35      	ldr	r2, [pc, #212]	@ (8004a64 <DMA_CalcBaseAndBitshift+0x13c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a33      	ldr	r2, [pc, #204]	@ (8004a68 <DMA_CalcBaseAndBitshift+0x140>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a32      	ldr	r2, [pc, #200]	@ (8004a6c <DMA_CalcBaseAndBitshift+0x144>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a30      	ldr	r2, [pc, #192]	@ (8004a70 <DMA_CalcBaseAndBitshift+0x148>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a74 <DMA_CalcBaseAndBitshift+0x14c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a78 <DMA_CalcBaseAndBitshift+0x150>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2c      	ldr	r2, [pc, #176]	@ (8004a7c <DMA_CalcBaseAndBitshift+0x154>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <DMA_CalcBaseAndBitshift+0xac>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <DMA_CalcBaseAndBitshift+0xae>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d024      	beq.n	8004a24 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	3b10      	subs	r3, #16
 80049e2:	4a27      	ldr	r2, [pc, #156]	@ (8004a80 <DMA_CalcBaseAndBitshift+0x158>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	4a24      	ldr	r2, [pc, #144]	@ (8004a84 <DMA_CalcBaseAndBitshift+0x15c>)
 80049f4:	5cd3      	ldrb	r3, [r2, r3]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d908      	bls.n	8004a14 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <DMA_CalcBaseAndBitshift+0x160>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a12:	e00d      	b.n	8004a30 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <DMA_CalcBaseAndBitshift+0x160>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a22:	e005      	b.n	8004a30 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	40020010 	.word	0x40020010
 8004a44:	40020028 	.word	0x40020028
 8004a48:	40020040 	.word	0x40020040
 8004a4c:	40020058 	.word	0x40020058
 8004a50:	40020070 	.word	0x40020070
 8004a54:	40020088 	.word	0x40020088
 8004a58:	400200a0 	.word	0x400200a0
 8004a5c:	400200b8 	.word	0x400200b8
 8004a60:	40020410 	.word	0x40020410
 8004a64:	40020428 	.word	0x40020428
 8004a68:	40020440 	.word	0x40020440
 8004a6c:	40020458 	.word	0x40020458
 8004a70:	40020470 	.word	0x40020470
 8004a74:	40020488 	.word	0x40020488
 8004a78:	400204a0 	.word	0x400204a0
 8004a7c:	400204b8 	.word	0x400204b8
 8004a80:	aaaaaaab 	.word	0xaaaaaaab
 8004a84:	0800e5dc 	.word	0x0800e5dc
 8004a88:	fffffc00 	.word	0xfffffc00

08004a8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d120      	bne.n	8004ae2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d858      	bhi.n	8004b5a <DMA_CheckFifoParam+0xce>
 8004aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <DMA_CheckFifoParam+0x24>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004ad3 	.word	0x08004ad3
 8004ab8:	08004ac1 	.word	0x08004ac1
 8004abc:	08004b5b 	.word	0x08004b5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d048      	beq.n	8004b5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ad0:	e045      	b.n	8004b5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ada:	d142      	bne.n	8004b62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ae0:	e03f      	b.n	8004b62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aea:	d123      	bne.n	8004b34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d838      	bhi.n	8004b66 <DMA_CheckFifoParam+0xda>
 8004af4:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <DMA_CheckFifoParam+0x70>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b13 	.word	0x08004b13
 8004b04:	08004b0d 	.word	0x08004b0d
 8004b08:	08004b25 	.word	0x08004b25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b10:	e030      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d025      	beq.n	8004b6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b22:	e022      	b.n	8004b6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b2c:	d11f      	bne.n	8004b6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b32:	e01c      	b.n	8004b6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d902      	bls.n	8004b42 <DMA_CheckFifoParam+0xb6>
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d003      	beq.n	8004b48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b40:	e018      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
        break;
 8004b46:	e015      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00e      	beq.n	8004b72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
    break;
 8004b58:	e00b      	b.n	8004b72 <DMA_CheckFifoParam+0xe6>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e00a      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e008      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b62:	bf00      	nop
 8004b64:	e006      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b66:	bf00      	nop
 8004b68:	e004      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e002      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
    break;
 8004b72:	bf00      	nop
    }
  }

  return status;
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop

08004b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	@ (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d022      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	@ (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01d      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a35      	ldr	r2, [pc, #212]	@ (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d018      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	@ (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a32      	ldr	r2, [pc, #200]	@ (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	@ (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3b08      	subs	r3, #8
 8004bf4:	4a28      	ldr	r2, [pc, #160]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4b26      	ldr	r3, [pc, #152]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a24      	ldr	r2, [pc, #144]	@ (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	2201      	movs	r2, #1
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c20:	e024      	b.n	8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	3b10      	subs	r3, #16
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d806      	bhi.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d902      	bls.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3308      	adds	r3, #8
 8004c48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4b18      	ldr	r3, [pc, #96]	@ (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	461a      	mov	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a16      	ldr	r2, [pc, #88]	@ (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2201      	movs	r2, #1
 8004c66:	409a      	lsls	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	58025408 	.word	0x58025408
 8004c7c:	5802541c 	.word	0x5802541c
 8004c80:	58025430 	.word	0x58025430
 8004c84:	58025444 	.word	0x58025444
 8004c88:	58025458 	.word	0x58025458
 8004c8c:	5802546c 	.word	0x5802546c
 8004c90:	58025480 	.word	0x58025480
 8004c94:	58025494 	.word	0x58025494
 8004c98:	cccccccd 	.word	0xcccccccd
 8004c9c:	16009600 	.word	0x16009600
 8004ca0:	58025880 	.word	0x58025880
 8004ca4:	aaaaaaab 	.word	0xaaaaaaab
 8004ca8:	400204b8 	.word	0x400204b8
 8004cac:	4002040f 	.word	0x4002040f
 8004cb0:	10008200 	.word	0x10008200
 8004cb4:	40020880 	.word	0x40020880

08004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d04a      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d847      	bhi.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	@ (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a24      	ldr	r2, [pc, #144]	@ (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d01d      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a22      	ldr	r2, [pc, #136]	@ (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	@ (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1f      	ldr	r2, [pc, #124]	@ (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1c      	ldr	r2, [pc, #112]	@ (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4b17      	ldr	r3, [pc, #92]	@ (8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d40:	671a      	str	r2, [r3, #112]	@ 0x70
 8004d42:	e009      	b.n	8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a11      	ldr	r2, [pc, #68]	@ (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d56:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	58025408 	.word	0x58025408
 8004d74:	5802541c 	.word	0x5802541c
 8004d78:	58025430 	.word	0x58025430
 8004d7c:	58025444 	.word	0x58025444
 8004d80:	58025458 	.word	0x58025458
 8004d84:	5802546c 	.word	0x5802546c
 8004d88:	58025480 	.word	0x58025480
 8004d8c:	58025494 	.word	0x58025494
 8004d90:	1600963f 	.word	0x1600963f
 8004d94:	58025940 	.word	0x58025940
 8004d98:	1000823f 	.word	0x1000823f
 8004d9c:	40020940 	.word	0x40020940

08004da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dae:	4b89      	ldr	r3, [pc, #548]	@ (8004fd4 <HAL_GPIO_Init+0x234>)
 8004db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004db2:	e194      	b.n	80050de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	2101      	movs	r1, #1
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 8186 	beq.w	80050d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d005      	beq.n	8004de4 <HAL_GPIO_Init+0x44>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d130      	bne.n	8004e46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2203      	movs	r2, #3
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	f003 0201 	and.w	r2, r3, #1
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d017      	beq.n	8004e82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d123      	bne.n	8004ed6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	08da      	lsrs	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3208      	adds	r2, #8
 8004e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	220f      	movs	r2, #15
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	08da      	lsrs	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3208      	adds	r2, #8
 8004ed0:	69b9      	ldr	r1, [r7, #24]
 8004ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0203 	and.w	r2, r3, #3
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80e0 	beq.w	80050d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f18:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd8 <HAL_GPIO_Init+0x238>)
 8004f1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd8 <HAL_GPIO_Init+0x238>)
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004f28:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <HAL_GPIO_Init+0x238>)
 8004f2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f36:	4a29      	ldr	r2, [pc, #164]	@ (8004fdc <HAL_GPIO_Init+0x23c>)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	220f      	movs	r2, #15
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	@ (8004fe0 <HAL_GPIO_Init+0x240>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d052      	beq.n	8005008 <HAL_GPIO_Init+0x268>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <HAL_GPIO_Init+0x244>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d031      	beq.n	8004fce <HAL_GPIO_Init+0x22e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <HAL_GPIO_Init+0x248>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <HAL_GPIO_Init+0x22a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1d      	ldr	r2, [pc, #116]	@ (8004fec <HAL_GPIO_Init+0x24c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d025      	beq.n	8004fc6 <HAL_GPIO_Init+0x226>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff0 <HAL_GPIO_Init+0x250>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01f      	beq.n	8004fc2 <HAL_GPIO_Init+0x222>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff4 <HAL_GPIO_Init+0x254>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d019      	beq.n	8004fbe <HAL_GPIO_Init+0x21e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_GPIO_Init+0x258>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_GPIO_Init+0x21a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a19      	ldr	r2, [pc, #100]	@ (8004ffc <HAL_GPIO_Init+0x25c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00d      	beq.n	8004fb6 <HAL_GPIO_Init+0x216>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a18      	ldr	r2, [pc, #96]	@ (8005000 <HAL_GPIO_Init+0x260>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <HAL_GPIO_Init+0x212>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a17      	ldr	r2, [pc, #92]	@ (8005004 <HAL_GPIO_Init+0x264>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d101      	bne.n	8004fae <HAL_GPIO_Init+0x20e>
 8004faa:	2309      	movs	r3, #9
 8004fac:	e02d      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fae:	230a      	movs	r3, #10
 8004fb0:	e02b      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	e029      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fb6:	2307      	movs	r3, #7
 8004fb8:	e027      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fba:	2306      	movs	r3, #6
 8004fbc:	e025      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fbe:	2305      	movs	r3, #5
 8004fc0:	e023      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e021      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e01f      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e01d      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e01b      	b.n	800500a <HAL_GPIO_Init+0x26a>
 8004fd2:	bf00      	nop
 8004fd4:	58000080 	.word	0x58000080
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	58000400 	.word	0x58000400
 8004fe0:	58020000 	.word	0x58020000
 8004fe4:	58020400 	.word	0x58020400
 8004fe8:	58020800 	.word	0x58020800
 8004fec:	58020c00 	.word	0x58020c00
 8004ff0:	58021000 	.word	0x58021000
 8004ff4:	58021400 	.word	0x58021400
 8004ff8:	58021800 	.word	0x58021800
 8004ffc:	58021c00 	.word	0x58021c00
 8005000:	58022000 	.word	0x58022000
 8005004:	58022400 	.word	0x58022400
 8005008:	2300      	movs	r3, #0
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	f002 0203 	and.w	r2, r2, #3
 8005010:	0092      	lsls	r2, r2, #2
 8005012:	4093      	lsls	r3, r2
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800501a:	4938      	ldr	r1, [pc, #224]	@ (80050fc <HAL_GPIO_Init+0x35c>)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	3302      	adds	r3, #2
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800504e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800507c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f47f ae63 	bne.w	8004db4 <HAL_GPIO_Init+0x14>
  }
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	3724      	adds	r7, #36	@ 0x24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	58000400 	.word	0x58000400

08005100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
 800510c:	4613      	mov	r3, r2
 800510e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005110:	787b      	ldrb	r3, [r7, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800511c:	e003      	b.n	8005126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800511e:	887b      	ldrh	r3, [r7, #2]
 8005120:	041a      	lsls	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	619a      	str	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e08b      	b.n	800525e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb fc90 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2224      	movs	r2, #36	@ 0x24
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005184:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005194:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d107      	bne.n	80051ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	e006      	b.n	80051bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d108      	bne.n	80051d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	e007      	b.n	80051e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <HAL_I2C_Init+0x134>)
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	02008000 	.word	0x02008000

0800526c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b20      	cmp	r3, #32
 8005280:	d138      	bne.n	80052f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800528c:	2302      	movs	r3, #2
 800528e:	e032      	b.n	80052f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	@ 0x24
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b20      	cmp	r3, #32
 8005316:	d139      	bne.n	800538c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005322:	2302      	movs	r3, #2
 8005324:	e033      	b.n	800538e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2224      	movs	r2, #36	@ 0x24
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005354:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80053a4:	4b29      	ldr	r3, [pc, #164]	@ (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d00a      	beq.n	80053c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053b0:	4b26      	ldr	r3, [pc, #152]	@ (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d001      	beq.n	80053c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e040      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e03e      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053c6:	4b21      	ldr	r3, [pc, #132]	@ (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80053ce:	491f      	ldr	r1, [pc, #124]	@ (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053d6:	f7fc fc41 	bl	8001c5c <HAL_GetTick>
 80053da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053dc:	e009      	b.n	80053f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053de:	f7fc fc3d 	bl	8001c5c <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053ec:	d901      	bls.n	80053f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e028      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053f2:	4b16      	ldr	r3, [pc, #88]	@ (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fe:	d1ee      	bne.n	80053de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b1e      	cmp	r3, #30
 8005404:	d008      	beq.n	8005418 <HAL_PWREx_ConfigSupply+0x7c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b2e      	cmp	r3, #46	@ 0x2e
 800540a:	d005      	beq.n	8005418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b1d      	cmp	r3, #29
 8005410:	d002      	beq.n	8005418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b2d      	cmp	r3, #45	@ 0x2d
 8005416:	d114      	bne.n	8005442 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005418:	f7fc fc20 	bl	8001c5c <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800541e:	e009      	b.n	8005434 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005420:	f7fc fc1c 	bl	8001c5c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800542e:	d901      	bls.n	8005434 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e007      	b.n	8005444 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_PWREx_ConfigSupply+0xb0>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005440:	d1ee      	bne.n	8005420 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	58024800 	.word	0x58024800

08005450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08c      	sub	sp, #48	@ 0x30
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f000 bc1f 	b.w	8005ca2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80b3 	beq.w	80055d8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005472:	4b95      	ldr	r3, [pc, #596]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800547c:	4b92      	ldr	r3, [pc, #584]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005484:	2b10      	cmp	r3, #16
 8005486:	d007      	beq.n	8005498 <HAL_RCC_OscConfig+0x48>
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	2b18      	cmp	r3, #24
 800548c:	d112      	bne.n	80054b4 <HAL_RCC_OscConfig+0x64>
 800548e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d10d      	bne.n	80054b4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005498:	4b8b      	ldr	r3, [pc, #556]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8098 	beq.w	80055d6 <HAL_RCC_OscConfig+0x186>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 8093 	bne.w	80055d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e3f6      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054bc:	d106      	bne.n	80054cc <HAL_RCC_OscConfig+0x7c>
 80054be:	4b82      	ldr	r3, [pc, #520]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a81      	ldr	r2, [pc, #516]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e058      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d112      	bne.n	80054fa <HAL_RCC_OscConfig+0xaa>
 80054d4:	4b7c      	ldr	r3, [pc, #496]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a7b      	ldr	r2, [pc, #492]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b79      	ldr	r3, [pc, #484]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a78      	ldr	r2, [pc, #480]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	4b76      	ldr	r3, [pc, #472]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a75      	ldr	r2, [pc, #468]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80054f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e041      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005502:	d112      	bne.n	800552a <HAL_RCC_OscConfig+0xda>
 8005504:	4b70      	ldr	r3, [pc, #448]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a6f      	ldr	r2, [pc, #444]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800550a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b6d      	ldr	r3, [pc, #436]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a6c      	ldr	r2, [pc, #432]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005516:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	4b6a      	ldr	r3, [pc, #424]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a69      	ldr	r2, [pc, #420]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e029      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005532:	d112      	bne.n	800555a <HAL_RCC_OscConfig+0x10a>
 8005534:	4b64      	ldr	r3, [pc, #400]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a63      	ldr	r2, [pc, #396]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800553a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	4b61      	ldr	r3, [pc, #388]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a60      	ldr	r2, [pc, #384]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	4b5e      	ldr	r3, [pc, #376]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a5d      	ldr	r2, [pc, #372]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e011      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
 800555a:	4b5b      	ldr	r3, [pc, #364]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a5a      	ldr	r2, [pc, #360]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4b58      	ldr	r3, [pc, #352]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a57      	ldr	r2, [pc, #348]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800556c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b55      	ldr	r3, [pc, #340]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a54      	ldr	r2, [pc, #336]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005578:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800557c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fc fb69 	bl	8001c5c <HAL_GetTick>
 800558a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558e:	f7fc fb65 	bl	8001c5c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b64      	cmp	r3, #100	@ 0x64
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e380      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a0:	4b49      	ldr	r3, [pc, #292]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x13e>
 80055ac:	e014      	b.n	80055d8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fc fb55 	bl	8001c5c <HAL_GetTick>
 80055b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b6:	f7fc fb51 	bl	8001c5c <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b64      	cmp	r3, #100	@ 0x64
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e36c      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055c8:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f0      	bne.n	80055b6 <HAL_RCC_OscConfig+0x166>
 80055d4:	e000      	b.n	80055d8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 808c 	beq.w	80056fe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e6:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055f0:	4b35      	ldr	r3, [pc, #212]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_RCC_OscConfig+0x1bc>
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	2b18      	cmp	r3, #24
 8005600:	d137      	bne.n	8005672 <HAL_RCC_OscConfig+0x222>
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d132      	bne.n	8005672 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560c:	4b2e      	ldr	r3, [pc, #184]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_OscConfig+0x1d4>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e33e      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005624:	4b28      	ldr	r3, [pc, #160]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f023 0219 	bic.w	r2, r3, #25
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4925      	ldr	r1, [pc, #148]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fc fb11 	bl	8001c5c <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800563e:	f7fc fb0d 	bl	8001c5c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e328      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005650:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565c:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	4917      	ldr	r1, [pc, #92]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005670:	e045      	b.n	80056fe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d028      	beq.n	80056cc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800567a:	4b13      	ldr	r3, [pc, #76]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 0219 	bic.w	r2, r3, #25
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4910      	ldr	r1, [pc, #64]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 8005688:	4313      	orrs	r3, r2
 800568a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc fae6 	bl	8001c5c <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005694:	f7fc fae2 	bl	8001c5c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e2fd      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056a6:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b2:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	061b      	lsls	r3, r3, #24
 80056c0:	4901      	ldr	r1, [pc, #4]	@ (80056c8 <HAL_RCC_OscConfig+0x278>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	604b      	str	r3, [r1, #4]
 80056c6:	e01a      	b.n	80056fe <HAL_RCC_OscConfig+0x2ae>
 80056c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056cc:	4b97      	ldr	r3, [pc, #604]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a96      	ldr	r2, [pc, #600]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fc fac0 	bl	8001c5c <HAL_GetTick>
 80056dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e0:	f7fc fabc 	bl	8001c5c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e2d7      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056f2:	4b8e      	ldr	r3, [pc, #568]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06a      	beq.n	80057e0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800570a:	4b88      	ldr	r3, [pc, #544]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005712:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005714:	4b85      	ldr	r3, [pc, #532]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d007      	beq.n	8005730 <HAL_RCC_OscConfig+0x2e0>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b18      	cmp	r3, #24
 8005724:	d11b      	bne.n	800575e <HAL_RCC_OscConfig+0x30e>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d116      	bne.n	800575e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005730:	4b7e      	ldr	r3, [pc, #504]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCC_OscConfig+0x2f8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	2b80      	cmp	r3, #128	@ 0x80
 8005742:	d001      	beq.n	8005748 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e2ac      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005748:	4b78      	ldr	r3, [pc, #480]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	4975      	ldr	r1, [pc, #468]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005758:	4313      	orrs	r3, r2
 800575a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800575c:	e040      	b.n	80057e0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d023      	beq.n	80057ae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005766:	4b71      	ldr	r3, [pc, #452]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a70      	ldr	r2, [pc, #448]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800576c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fc fa73 	bl	8001c5c <HAL_GetTick>
 8005776:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800577a:	f7fc fa6f 	bl	8001c5c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e28a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800578c:	4b67      	ldr	r3, [pc, #412]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005798:	4b64      	ldr	r3, [pc, #400]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	4961      	ldr	r1, [pc, #388]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60cb      	str	r3, [r1, #12]
 80057ac:	e018      	b.n	80057e0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80057ae:	4b5f      	ldr	r3, [pc, #380]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5e      	ldr	r2, [pc, #376]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ba:	f7fc fa4f 	bl	8001c5c <HAL_GetTick>
 80057be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80057c2:	f7fc fa4b 	bl	8001c5c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e266      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057d4:	4b55      	ldr	r3, [pc, #340]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f0      	bne.n	80057c2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d036      	beq.n	800585a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d019      	beq.n	8005828 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f4:	4b4d      	ldr	r3, [pc, #308]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f8:	4a4c      	ldr	r2, [pc, #304]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fc fa2c 	bl	8001c5c <HAL_GetTick>
 8005804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005808:	f7fc fa28 	bl	8001c5c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e243      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800581a:	4b44      	ldr	r3, [pc, #272]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800581c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x3b8>
 8005826:	e018      	b.n	800585a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005828:	4b40      	ldr	r3, [pc, #256]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800582a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800582c:	4a3f      	ldr	r2, [pc, #252]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fc fa12 	bl	8001c5c <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800583c:	f7fc fa0e 	bl	8001c5c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e229      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800584e:	4b37      	ldr	r3, [pc, #220]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d036      	beq.n	80058d4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d019      	beq.n	80058a2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800586e:	4b2f      	ldr	r3, [pc, #188]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2e      	ldr	r2, [pc, #184]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005874:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005878:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800587a:	f7fc f9ef 	bl	8001c5c <HAL_GetTick>
 800587e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005882:	f7fc f9eb 	bl	8001c5c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e206      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005894:	4b25      	ldr	r3, [pc, #148]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x432>
 80058a0:	e018      	b.n	80058d4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058a2:	4b22      	ldr	r3, [pc, #136]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a21      	ldr	r2, [pc, #132]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058ae:	f7fc f9d5 	bl	8001c5c <HAL_GetTick>
 80058b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058b6:	f7fc f9d1 	bl	8001c5c <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e1ec      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058c8:	4b18      	ldr	r3, [pc, #96]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80af 	beq.w	8005a40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <HAL_RCC_OscConfig+0x4e0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a12      	ldr	r2, [pc, #72]	@ (8005930 <HAL_RCC_OscConfig+0x4e0>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ee:	f7fc f9b5 	bl	8001c5c <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f6:	f7fc f9b1 	bl	8001c5c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b64      	cmp	r3, #100	@ 0x64
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1cc      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005908:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <HAL_RCC_OscConfig+0x4e0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10b      	bne.n	8005934 <HAL_RCC_OscConfig+0x4e4>
 800591c:	4b03      	ldr	r3, [pc, #12]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005920:	4a02      	ldr	r2, [pc, #8]	@ (800592c <HAL_RCC_OscConfig+0x4dc>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6713      	str	r3, [r2, #112]	@ 0x70
 8005928:	e05b      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
 8005930:	58024800 	.word	0x58024800
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d112      	bne.n	8005962 <HAL_RCC_OscConfig+0x512>
 800593c:	4b9d      	ldr	r3, [pc, #628]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005940:	4a9c      	ldr	r2, [pc, #624]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	@ 0x70
 8005948:	4b9a      	ldr	r3, [pc, #616]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4a99      	ldr	r2, [pc, #612]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800594e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005952:	6713      	str	r3, [r2, #112]	@ 0x70
 8005954:	4b97      	ldr	r3, [pc, #604]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	4a96      	ldr	r2, [pc, #600]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005960:	e03f      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b05      	cmp	r3, #5
 8005968:	d112      	bne.n	8005990 <HAL_RCC_OscConfig+0x540>
 800596a:	4b92      	ldr	r3, [pc, #584]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	4a91      	ldr	r2, [pc, #580]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005970:	f043 0304 	orr.w	r3, r3, #4
 8005974:	6713      	str	r3, [r2, #112]	@ 0x70
 8005976:	4b8f      	ldr	r3, [pc, #572]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	4a8e      	ldr	r2, [pc, #568]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800597c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005980:	6713      	str	r3, [r2, #112]	@ 0x70
 8005982:	4b8c      	ldr	r3, [pc, #560]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005986:	4a8b      	ldr	r2, [pc, #556]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6713      	str	r3, [r2, #112]	@ 0x70
 800598e:	e028      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b85      	cmp	r3, #133	@ 0x85
 8005996:	d112      	bne.n	80059be <HAL_RCC_OscConfig+0x56e>
 8005998:	4b86      	ldr	r3, [pc, #536]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599c:	4a85      	ldr	r2, [pc, #532]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 800599e:	f043 0304 	orr.w	r3, r3, #4
 80059a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a4:	4b83      	ldr	r3, [pc, #524]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a8:	4a82      	ldr	r2, [pc, #520]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80059b0:	4b80      	ldr	r3, [pc, #512]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b4:	4a7f      	ldr	r2, [pc, #508]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80059bc:	e011      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
 80059be:	4b7d      	ldr	r3, [pc, #500]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c2:	4a7c      	ldr	r2, [pc, #496]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ca:	4b7a      	ldr	r3, [pc, #488]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ce:	4a79      	ldr	r2, [pc, #484]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059d0:	f023 0304 	bic.w	r3, r3, #4
 80059d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d6:	4b77      	ldr	r3, [pc, #476]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059da:	4a76      	ldr	r2, [pc, #472]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 80059dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d015      	beq.n	8005a16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ea:	f7fc f937 	bl	8001c5c <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f0:	e00a      	b.n	8005a08 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f2:	f7fc f933 	bl	8001c5c <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e14c      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a08:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0ee      	beq.n	80059f2 <HAL_RCC_OscConfig+0x5a2>
 8005a14:	e014      	b.n	8005a40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fc f921 	bl	8001c5c <HAL_GetTick>
 8005a1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fc f91d 	bl	8001c5c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e136      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a34:	4b5f      	ldr	r3, [pc, #380]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ee      	bne.n	8005a1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 812b 	beq.w	8005ca0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a52:	2b18      	cmp	r3, #24
 8005a54:	f000 80bb 	beq.w	8005bce <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	f040 8095 	bne.w	8005b8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a62:	4b54      	ldr	r3, [pc, #336]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a53      	ldr	r2, [pc, #332]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fc f8f5 	bl	8001c5c <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a76:	f7fc f8f1 	bl	8001c5c <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e10c      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a88:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f0      	bne.n	8005a76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a94:	4b47      	ldr	r3, [pc, #284]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005a96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a98:	4b47      	ldr	r3, [pc, #284]	@ (8005bb8 <HAL_RCC_OscConfig+0x768>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005aa4:	0112      	lsls	r2, r2, #4
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	4942      	ldr	r1, [pc, #264]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	628b      	str	r3, [r1, #40]	@ 0x28
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abc:	3b01      	subs	r3, #1
 8005abe:	025b      	lsls	r3, r3, #9
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005ade:	4935      	ldr	r1, [pc, #212]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005ae4:	4b33      	ldr	r3, [pc, #204]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	4a32      	ldr	r2, [pc, #200]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005af0:	4b30      	ldr	r3, [pc, #192]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af4:	4b31      	ldr	r3, [pc, #196]	@ (8005bbc <HAL_RCC_OscConfig+0x76c>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005afc:	00d2      	lsls	r2, r2, #3
 8005afe:	492d      	ldr	r1, [pc, #180]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b04:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	f023 020c 	bic.w	r2, r3, #12
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b10:	4928      	ldr	r1, [pc, #160]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b16:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	f023 0202 	bic.w	r2, r3, #2
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	4924      	ldr	r1, [pc, #144]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b28:	4b22      	ldr	r3, [pc, #136]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b34:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b40:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005b4c:	4b19      	ldr	r3, [pc, #100]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	4a18      	ldr	r2, [pc, #96]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b58:	4b16      	ldr	r3, [pc, #88]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a15      	ldr	r2, [pc, #84]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc f87a 	bl	8001c5c <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fc f876 	bl	8001c5c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e091      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x71c>
 8005b8a:	e089      	b.n	8005ca0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8c:	4b09      	ldr	r3, [pc, #36]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a08      	ldr	r2, [pc, #32]	@ (8005bb4 <HAL_RCC_OscConfig+0x764>)
 8005b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fc f860 	bl	8001c5c <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b9e:	e00f      	b.n	8005bc0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fc f85c 	bl	8001c5c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d908      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e077      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	fffffc0c 	.word	0xfffffc0c
 8005bbc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e9      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x750>
 8005bcc:	e068      	b.n	8005ca0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005bce:	4b37      	ldr	r3, [pc, #220]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bd4:	4b35      	ldr	r3, [pc, #212]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d031      	beq.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f003 0203 	and.w	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d12a      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d122      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d11a      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	0a5b      	lsrs	r3, r3, #9
 8005c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d111      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d108      	bne.n	8005c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e02b      	b.n	8005ca2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005c4a:	4b18      	ldr	r3, [pc, #96]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4e:	08db      	lsrs	r3, r3, #3
 8005c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c54:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d01f      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005c60:	4b12      	ldr	r3, [pc, #72]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c64:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005c66:	f023 0301 	bic.w	r3, r3, #1
 8005c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c6c:	f7fb fff6 	bl	8001c5c <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005c72:	bf00      	nop
 8005c74:	f7fb fff2 	bl	8001c5c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d0f9      	beq.n	8005c74 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c80:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <HAL_RCC_OscConfig+0x860>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005c8c:	00d2      	lsls	r2, r2, #3
 8005c8e:	4907      	ldr	r1, [pc, #28]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005c94:	4b05      	ldr	r3, [pc, #20]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	4a04      	ldr	r2, [pc, #16]	@ (8005cac <HAL_RCC_OscConfig+0x85c>)
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3730      	adds	r7, #48	@ 0x30
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	ffff0007 	.word	0xffff0007

08005cb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e19c      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d910      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b87      	ldr	r3, [pc, #540]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 020f 	bic.w	r2, r3, #15
 8005cde:	4985      	ldr	r1, [pc, #532]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b83      	ldr	r3, [pc, #524]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e184      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	4b7b      	ldr	r3, [pc, #492]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d908      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d14:	4b78      	ldr	r3, [pc, #480]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	4975      	ldr	r1, [pc, #468]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	4b70      	ldr	r3, [pc, #448]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d908      	bls.n	8005d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d42:	4b6d      	ldr	r3, [pc, #436]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	496a      	ldr	r1, [pc, #424]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	4b64      	ldr	r3, [pc, #400]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d908      	bls.n	8005d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d70:	4b61      	ldr	r3, [pc, #388]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	495e      	ldr	r1, [pc, #376]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d010      	beq.n	8005db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69da      	ldr	r2, [r3, #28]
 8005d92:	4b59      	ldr	r3, [pc, #356]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d908      	bls.n	8005db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d9e:	4b56      	ldr	r3, [pc, #344]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	4953      	ldr	r1, [pc, #332]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d908      	bls.n	8005dde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f023 020f 	bic.w	r2, r3, #15
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4947      	ldr	r1, [pc, #284]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d055      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005dea:	4b43      	ldr	r3, [pc, #268]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	4940      	ldr	r1, [pc, #256]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d107      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e04:	4b3c      	ldr	r3, [pc, #240]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d121      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0f6      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d107      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e1c:	4b36      	ldr	r3, [pc, #216]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d115      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0ea      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d107      	bne.n	8005e44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e34:	4b30      	ldr	r3, [pc, #192]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0de      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e44:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0d6      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e54:	4b28      	ldr	r3, [pc, #160]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f023 0207 	bic.w	r2, r3, #7
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4925      	ldr	r1, [pc, #148]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e66:	f7fb fef9 	bl	8001c5c <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6c:	e00a      	b.n	8005e84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e6e:	f7fb fef5 	bl	8001c5c <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e0be      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e84:	4b1c      	ldr	r3, [pc, #112]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d1eb      	bne.n	8005e6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d010      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	4b14      	ldr	r3, [pc, #80]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d208      	bcs.n	8005ec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb2:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f023 020f 	bic.w	r2, r3, #15
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	490e      	ldr	r1, [pc, #56]	@ (8005ef8 <HAL_RCC_ClockConfig+0x244>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d214      	bcs.n	8005efc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed2:	4b08      	ldr	r3, [pc, #32]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 020f 	bic.w	r2, r3, #15
 8005eda:	4906      	ldr	r1, [pc, #24]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee2:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <HAL_RCC_ClockConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d005      	beq.n	8005efc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e086      	b.n	8006002 <HAL_RCC_ClockConfig+0x34e>
 8005ef4:	52002000 	.word	0x52002000
 8005ef8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d208      	bcs.n	8005f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f18:	4b3c      	ldr	r3, [pc, #240]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	4939      	ldr	r1, [pc, #228]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d010      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695a      	ldr	r2, [r3, #20]
 8005f3a:	4b34      	ldr	r3, [pc, #208]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d208      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f46:	4b31      	ldr	r3, [pc, #196]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	492e      	ldr	r1, [pc, #184]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d010      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	4b28      	ldr	r3, [pc, #160]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d208      	bcs.n	8005f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f74:	4b25      	ldr	r3, [pc, #148]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	4922      	ldr	r1, [pc, #136]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d010      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	4b1d      	ldr	r3, [pc, #116]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d208      	bcs.n	8005fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4917      	ldr	r1, [pc, #92]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005fb4:	f000 f834 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b14      	ldr	r3, [pc, #80]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	4912      	ldr	r1, [pc, #72]	@ (8006010 <HAL_RCC_ClockConfig+0x35c>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800600c <HAL_RCC_ClockConfig+0x358>)
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	4a0d      	ldr	r2, [pc, #52]	@ (8006010 <HAL_RCC_ClockConfig+0x35c>)
 8005fdc:	5cd3      	ldrb	r3, [r2, r3]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8006014 <HAL_RCC_ClockConfig+0x360>)
 8005fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fec:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <HAL_RCC_ClockConfig+0x364>)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <HAL_RCC_ClockConfig+0x368>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fb fde6 	bl	8001bc8 <HAL_InitTick>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	58024400 	.word	0x58024400
 8006010:	0800e5cc 	.word	0x0800e5cc
 8006014:	24000004 	.word	0x24000004
 8006018:	24000000 	.word	0x24000000
 800601c:	24000008 	.word	0x24000008

08006020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	@ 0x24
 8006024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006026:	4bb3      	ldr	r3, [pc, #716]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800602e:	2b18      	cmp	r3, #24
 8006030:	f200 8155 	bhi.w	80062de <HAL_RCC_GetSysClockFreq+0x2be>
 8006034:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	080060a1 	.word	0x080060a1
 8006040:	080062df 	.word	0x080062df
 8006044:	080062df 	.word	0x080062df
 8006048:	080062df 	.word	0x080062df
 800604c:	080062df 	.word	0x080062df
 8006050:	080062df 	.word	0x080062df
 8006054:	080062df 	.word	0x080062df
 8006058:	080062df 	.word	0x080062df
 800605c:	080060c7 	.word	0x080060c7
 8006060:	080062df 	.word	0x080062df
 8006064:	080062df 	.word	0x080062df
 8006068:	080062df 	.word	0x080062df
 800606c:	080062df 	.word	0x080062df
 8006070:	080062df 	.word	0x080062df
 8006074:	080062df 	.word	0x080062df
 8006078:	080062df 	.word	0x080062df
 800607c:	080060cd 	.word	0x080060cd
 8006080:	080062df 	.word	0x080062df
 8006084:	080062df 	.word	0x080062df
 8006088:	080062df 	.word	0x080062df
 800608c:	080062df 	.word	0x080062df
 8006090:	080062df 	.word	0x080062df
 8006094:	080062df 	.word	0x080062df
 8006098:	080062df 	.word	0x080062df
 800609c:	080060d3 	.word	0x080060d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060a0:	4b94      	ldr	r3, [pc, #592]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060ac:	4b91      	ldr	r3, [pc, #580]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	08db      	lsrs	r3, r3, #3
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	4a90      	ldr	r2, [pc, #576]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
 80060bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80060be:	e111      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80060c0:	4b8d      	ldr	r3, [pc, #564]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060c2:	61bb      	str	r3, [r7, #24]
      break;
 80060c4:	e10e      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80060c6:	4b8d      	ldr	r3, [pc, #564]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060c8:	61bb      	str	r3, [r7, #24]
      break;
 80060ca:	e10b      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80060cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80060ce:	61bb      	str	r3, [r7, #24]
      break;
 80060d0:	e108      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060d2:	4b88      	ldr	r3, [pc, #544]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80060dc:	4b85      	ldr	r3, [pc, #532]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80060e8:	4b82      	ldr	r3, [pc, #520]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80060f2:	4b80      	ldr	r3, [pc, #512]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f6:	08db      	lsrs	r3, r3, #3
 80060f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80e1 	beq.w	80062d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b02      	cmp	r3, #2
 800611a:	f000 8083 	beq.w	8006224 <HAL_RCC_GetSysClockFreq+0x204>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b02      	cmp	r3, #2
 8006122:	f200 80a1 	bhi.w	8006268 <HAL_RCC_GetSysClockFreq+0x248>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0x114>
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d056      	beq.n	80061e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006132:	e099      	b.n	8006268 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006134:	4b6f      	ldr	r3, [pc, #444]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d02d      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006140:	4b6c      	ldr	r3, [pc, #432]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	08db      	lsrs	r3, r3, #3
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	4a6b      	ldr	r2, [pc, #428]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616a:	4b62      	ldr	r3, [pc, #392]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617a:	ed97 6a02 	vldr	s12, [r7, #8]
 800617e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800618e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006196:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800619a:	e087      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006308 <HAL_RCC_GetSysClockFreq+0x2e8>
 80061aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ae:	4b51      	ldr	r3, [pc, #324]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006304 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061de:	e065      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800630c <HAL_RCC_GetSysClockFreq+0x2ec>
 80061ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f2:	4b40      	ldr	r3, [pc, #256]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006202:	ed97 6a02 	vldr	s12, [r7, #8]
 8006206:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800620a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006222:	e043      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006310 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006236:	4b2f      	ldr	r3, [pc, #188]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006246:	ed97 6a02 	vldr	s12, [r7, #8]
 800624a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800624e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800625a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006266:	e021      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800630c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627a:	4b1e      	ldr	r3, [pc, #120]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800627c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628a:	ed97 6a02 	vldr	s12, [r7, #8]
 800628e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80062ac:	4b11      	ldr	r3, [pc, #68]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b0:	0a5b      	lsrs	r3, r3, #9
 80062b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b6:	3301      	adds	r3, #1
 80062b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d0:	ee17 3a90 	vmov	r3, s15
 80062d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80062d6:	e005      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	61bb      	str	r3, [r7, #24]
      break;
 80062dc:	e002      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80062de:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062e0:	61bb      	str	r3, [r7, #24]
      break;
 80062e2:	bf00      	nop
  }

  return sysclockfreq;
 80062e4:	69bb      	ldr	r3, [r7, #24]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3724      	adds	r7, #36	@ 0x24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	58024400 	.word	0x58024400
 80062f8:	03d09000 	.word	0x03d09000
 80062fc:	003d0900 	.word	0x003d0900
 8006300:	007a1200 	.word	0x007a1200
 8006304:	46000000 	.word	0x46000000
 8006308:	4c742400 	.word	0x4c742400
 800630c:	4a742400 	.word	0x4a742400
 8006310:	4af42400 	.word	0x4af42400

08006314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800631a:	f7ff fe81 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 800631e:	4602      	mov	r2, r0
 8006320:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <HAL_RCC_GetHCLKFreq+0x50>)
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	490f      	ldr	r1, [pc, #60]	@ (8006368 <HAL_RCC_GetHCLKFreq+0x54>)
 800632c:	5ccb      	ldrb	r3, [r1, r3]
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	fa22 f303 	lsr.w	r3, r2, r3
 8006336:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006338:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <HAL_RCC_GetHCLKFreq+0x50>)
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	4a09      	ldr	r2, [pc, #36]	@ (8006368 <HAL_RCC_GetHCLKFreq+0x54>)
 8006342:	5cd3      	ldrb	r3, [r2, r3]
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	fa22 f303 	lsr.w	r3, r2, r3
 800634e:	4a07      	ldr	r2, [pc, #28]	@ (800636c <HAL_RCC_GetHCLKFreq+0x58>)
 8006350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006352:	4a07      	ldr	r2, [pc, #28]	@ (8006370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <HAL_RCC_GetHCLKFreq+0x58>)
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	58024400 	.word	0x58024400
 8006368:	0800e5cc 	.word	0x0800e5cc
 800636c:	24000004 	.word	0x24000004
 8006370:	24000000 	.word	0x24000000

08006374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006378:	f7ff ffcc 	bl	8006314 <HAL_RCC_GetHCLKFreq>
 800637c:	4602      	mov	r2, r0
 800637e:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	091b      	lsrs	r3, r3, #4
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	4904      	ldr	r1, [pc, #16]	@ (800639c <HAL_RCC_GetPCLK1Freq+0x28>)
 800638a:	5ccb      	ldrb	r3, [r1, r3]
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006394:	4618      	mov	r0, r3
 8006396:	bd80      	pop	{r7, pc}
 8006398:	58024400 	.word	0x58024400
 800639c:	0800e5cc 	.word	0x0800e5cc

080063a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80063a4:	f7ff ffb6 	bl	8006314 <HAL_RCC_GetHCLKFreq>
 80063a8:	4602      	mov	r2, r0
 80063aa:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	4904      	ldr	r1, [pc, #16]	@ (80063c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063b6:	5ccb      	ldrb	r3, [r1, r3]
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	58024400 	.word	0x58024400
 80063c8:	0800e5cc 	.word	0x0800e5cc

080063cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d0:	b0c8      	sub	sp, #288	@ 0x120
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80063f0:	2500      	movs	r5, #0
 80063f2:	ea54 0305 	orrs.w	r3, r4, r5
 80063f6:	d049      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80063f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006402:	d02f      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006404:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006408:	d828      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800640a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800640e:	d01a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006414:	d822      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800641a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800641e:	d007      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006420:	e01c      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006422:	4ba7      	ldr	r3, [pc, #668]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006426:	4aa6      	ldr	r2, [pc, #664]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800642e:	e01a      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006434:	3308      	adds	r3, #8
 8006436:	2102      	movs	r1, #2
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fc43 	bl	8007cc4 <RCCEx_PLL2_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006444:	e00f      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800644a:	3328      	adds	r3, #40	@ 0x28
 800644c:	2102      	movs	r1, #2
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fcea 	bl	8007e28 <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800645a:	e004      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006462:	e000      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006466:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800646e:	4b94      	ldr	r3, [pc, #592]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006472:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800647a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800647c:	4a90      	ldr	r2, [pc, #576]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800647e:	430b      	orrs	r3, r1
 8006480:	6513      	str	r3, [r2, #80]	@ 0x50
 8006482:	e003      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006488:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800648c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006498:	f04f 0900 	mov.w	r9, #0
 800649c:	ea58 0309 	orrs.w	r3, r8, r9
 80064a0:	d047      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80064a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d82a      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80064ac:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064c9 	.word	0x080064c9
 80064b8:	080064d7 	.word	0x080064d7
 80064bc:	080064ed 	.word	0x080064ed
 80064c0:	0800650b 	.word	0x0800650b
 80064c4:	0800650b 	.word	0x0800650b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c8:	4b7d      	ldr	r3, [pc, #500]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	4a7c      	ldr	r2, [pc, #496]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064d4:	e01a      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064da:	3308      	adds	r3, #8
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fbf0 	bl	8007cc4 <RCCEx_PLL2_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064ea:	e00f      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f0:	3328      	adds	r3, #40	@ 0x28
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fc97 	bl	8007e28 <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006514:	4b6a      	ldr	r3, [pc, #424]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006518:	f023 0107 	bic.w	r1, r3, #7
 800651c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006522:	4a67      	ldr	r2, [pc, #412]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006524:	430b      	orrs	r3, r1
 8006526:	6513      	str	r3, [r2, #80]	@ 0x50
 8006528:	e003      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800652e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800653e:	f04f 0b00 	mov.w	fp, #0
 8006542:	ea5a 030b 	orrs.w	r3, sl, fp
 8006546:	d054      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800654c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006552:	d036      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006554:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006558:	d82f      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800655a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800655e:	d032      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006564:	d829      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006566:	2bc0      	cmp	r3, #192	@ 0xc0
 8006568:	d02f      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800656a:	2bc0      	cmp	r3, #192	@ 0xc0
 800656c:	d825      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800656e:	2b80      	cmp	r3, #128	@ 0x80
 8006570:	d018      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006572:	2b80      	cmp	r3, #128	@ 0x80
 8006574:	d821      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800657a:	2b40      	cmp	r3, #64	@ 0x40
 800657c:	d007      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800657e:	e01c      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006580:	4b4f      	ldr	r3, [pc, #316]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	4a4e      	ldr	r2, [pc, #312]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800658a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800658c:	e01e      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800658e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006592:	3308      	adds	r3, #8
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f001 fb94 	bl	8007cc4 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80065a2:	e013      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a8:	3328      	adds	r3, #40	@ 0x28
 80065aa:	2100      	movs	r1, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fc3b 	bl	8007e28 <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80065b8:	e008      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065c0:	e004      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80065ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80065d4:	4b3a      	ldr	r3, [pc, #232]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80065dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e2:	4a37      	ldr	r2, [pc, #220]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80065f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80065fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006602:	2300      	movs	r3, #0
 8006604:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006608:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d05c      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006618:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800661c:	d03b      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800661e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006622:	d834      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006628:	d037      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800662a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800662e:	d82e      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006630:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006634:	d033      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006636:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800663a:	d828      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800663c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006640:	d01a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006646:	d822      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800664c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006650:	d007      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006652:	e01c      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006654:	4b1a      	ldr	r3, [pc, #104]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006658:	4a19      	ldr	r2, [pc, #100]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800665a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800665e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006660:	e01e      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006666:	3308      	adds	r3, #8
 8006668:	2100      	movs	r1, #0
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fb2a 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006676:	e013      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800667c:	3328      	adds	r3, #40	@ 0x28
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f001 fbd1 	bl	8007e28 <RCCEx_PLL3_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800668c:	e008      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006694:	e004      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006696:	bf00      	nop
 8006698:	e002      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800669a:	bf00      	nop
 800669c:	e000      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800669e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80066a8:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b6:	4a02      	ldr	r2, [pc, #8]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80066cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80066d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80066dc:	2300      	movs	r3, #0
 80066de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80066e6:	460b      	mov	r3, r1
 80066e8:	4313      	orrs	r3, r2
 80066ea:	d03a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80066ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f2:	2b30      	cmp	r3, #48	@ 0x30
 80066f4:	d01f      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80066f6:	2b30      	cmp	r3, #48	@ 0x30
 80066f8:	d819      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d00c      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d815      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d019      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006706:	2b10      	cmp	r3, #16
 8006708:	d111      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800670a:	4bae      	ldr	r3, [pc, #696]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	4aad      	ldr	r2, [pc, #692]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006716:	e011      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800671c:	3308      	adds	r3, #8
 800671e:	2102      	movs	r1, #2
 8006720:	4618      	mov	r0, r3
 8006722:	f001 facf 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006734:	e002      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800673a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006744:	4b9f      	ldr	r3, [pc, #636]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006748:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800674c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006752:	4a9c      	ldr	r2, [pc, #624]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006754:	430b      	orrs	r3, r1
 8006756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006758:	e003      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800675e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800676e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006772:	2300      	movs	r3, #0
 8006774:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006778:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800677c:	460b      	mov	r3, r1
 800677e:	4313      	orrs	r3, r2
 8006780:	d051      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800678c:	d035      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800678e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006792:	d82e      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006798:	d031      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800679a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800679e:	d828      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a4:	d01a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80067a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067aa:	d822      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b4:	d007      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80067b6:	e01c      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b8:	4b82      	ldr	r3, [pc, #520]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	4a81      	ldr	r2, [pc, #516]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067c4:	e01c      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ca:	3308      	adds	r3, #8
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fa78 	bl	8007cc4 <RCCEx_PLL2_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067da:	e011      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e0:	3328      	adds	r3, #40	@ 0x28
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fb1f 	bl	8007e28 <RCCEx_PLL3_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067f0:	e006      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067f8:	e002      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80067fa:	bf00      	nop
 80067fc:	e000      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80067fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006800:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006808:	4b6e      	ldr	r3, [pc, #440]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800680a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006816:	4a6b      	ldr	r2, [pc, #428]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006818:	430b      	orrs	r3, r1
 800681a:	6513      	str	r3, [r2, #80]	@ 0x50
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006822:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800683c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d053      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800684c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006850:	d033      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006852:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006856:	d82c      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006858:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800685c:	d02f      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800685e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006862:	d826      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006864:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006868:	d02b      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800686a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800686e:	d820      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006874:	d012      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800687a:	d81a      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d022      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006884:	d115      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800688a:	3308      	adds	r3, #8
 800688c:	2101      	movs	r1, #1
 800688e:	4618      	mov	r0, r3
 8006890:	f001 fa18 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800689a:	e015      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800689c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a0:	3328      	adds	r3, #40	@ 0x28
 80068a2:	2101      	movs	r1, #1
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fabf 	bl	8007e28 <RCCEx_PLL3_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80068b0:	e00a      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068b8:	e006      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80068ba:	bf00      	nop
 80068bc:	e004      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80068be:	bf00      	nop
 80068c0:	e002      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80068c2:	bf00      	nop
 80068c4:	e000      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80068c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80068d0:	4b3c      	ldr	r3, [pc, #240]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80068d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068de:	4a39      	ldr	r2, [pc, #228]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80068e4:	e003      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80068ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80068fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006904:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d060      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800690e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006916:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800691a:	d039      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800691c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006920:	d832      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006926:	d035      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800692c:	d82c      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006932:	d031      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006938:	d826      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800693a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800693e:	d02d      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006944:	d820      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800694a:	d012      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800694c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006950:	d81a      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d024      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800695a:	d115      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800695c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006960:	3308      	adds	r3, #8
 8006962:	2101      	movs	r1, #1
 8006964:	4618      	mov	r0, r3
 8006966:	f001 f9ad 	bl	8007cc4 <RCCEx_PLL2_Config>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006970:	e017      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006976:	3328      	adds	r3, #40	@ 0x28
 8006978:	2101      	movs	r1, #1
 800697a:	4618      	mov	r0, r3
 800697c:	f001 fa54 	bl	8007e28 <RCCEx_PLL3_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006986:	e00c      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800698e:	e008      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006990:	bf00      	nop
 8006992:	e006      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006994:	bf00      	nop
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006998:	bf00      	nop
 800699a:	e002      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10e      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80069aa:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80069b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069ba:	4a02      	ldr	r2, [pc, #8]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c0:	e006      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80069c2:	bf00      	nop
 80069c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80069dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d037      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80069f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069fa:	d00e      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80069fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a00:	d816      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d018      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a0a:	d111      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a0c:	4bc4      	ldr	r3, [pc, #784]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a10:	4ac3      	ldr	r2, [pc, #780]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a18:	e00f      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a1e:	3308      	adds	r3, #8
 8006a20:	2101      	movs	r1, #1
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 f94e 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a2e:	e004      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a36:	e000      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a42:	4bb7      	ldr	r3, [pc, #732]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a50:	4ab3      	ldr	r2, [pc, #716]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a70:	2300      	movs	r3, #0
 8006a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	d039      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d81c      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006acd 	.word	0x08006acd
 8006a94:	08006aa1 	.word	0x08006aa1
 8006a98:	08006aaf 	.word	0x08006aaf
 8006a9c:	08006acd 	.word	0x08006acd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4b9f      	ldr	r3, [pc, #636]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4a9e      	ldr	r2, [pc, #632]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006aac:	e00f      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2102      	movs	r1, #2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f904 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ac2:	e004      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006aca:	e000      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ace:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ad6:	4b92      	ldr	r3, [pc, #584]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ada:	f023 0103 	bic.w	r1, r3, #3
 8006ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006aea:	e003      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006af0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f000 8099 	beq.w	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b16:	4b83      	ldr	r3, [pc, #524]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a82      	ldr	r2, [pc, #520]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b22:	f7fb f89b 	bl	8001c5c <HAL_GetTick>
 8006b26:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b2a:	e00b      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b2c:	f7fb f896 	bl	8001c5c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b64      	cmp	r3, #100	@ 0x64
 8006b3a:	d903      	bls.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b42:	e005      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b44:	4b77      	ldr	r3, [pc, #476]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0ed      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006b50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d173      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b58:	4b71      	ldr	r3, [pc, #452]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b64:	4053      	eors	r3, r2
 8006b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d015      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b7a:	4b69      	ldr	r3, [pc, #420]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7e:	4a68      	ldr	r2, [pc, #416]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b86:	4b66      	ldr	r3, [pc, #408]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b8a:	4a65      	ldr	r2, [pc, #404]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006b92:	4a63      	ldr	r2, [pc, #396]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba6:	d118      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fb f858 	bl	8001c5c <HAL_GetTick>
 8006bac:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bb0:	e00d      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb2:	f7fb f853 	bl	8001c5c <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006bbc:	1ad2      	subs	r2, r2, r3
 8006bbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d903      	bls.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006bcc:	e005      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bce:	4b54      	ldr	r3, [pc, #336]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0eb      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006bda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d129      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf2:	d10e      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c04:	091a      	lsrs	r2, r3, #4
 8006c06:	4b48      	ldr	r3, [pc, #288]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	4a45      	ldr	r2, [pc, #276]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6113      	str	r3, [r2, #16]
 8006c10:	e005      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006c12:	4b43      	ldr	r3, [pc, #268]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	4a42      	ldr	r2, [pc, #264]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c1c:	6113      	str	r3, [r2, #16]
 8006c1e:	4b40      	ldr	r3, [pc, #256]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c2e:	4a3c      	ldr	r2, [pc, #240]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c34:	e008      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006c3e:	e003      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f002 0301 	and.w	r3, r2, #1
 8006c54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f000 8090 	beq.w	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c72:	2b28      	cmp	r3, #40	@ 0x28
 8006c74:	d870      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006c76:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006d61 	.word	0x08006d61
 8006c80:	08006d59 	.word	0x08006d59
 8006c84:	08006d59 	.word	0x08006d59
 8006c88:	08006d59 	.word	0x08006d59
 8006c8c:	08006d59 	.word	0x08006d59
 8006c90:	08006d59 	.word	0x08006d59
 8006c94:	08006d59 	.word	0x08006d59
 8006c98:	08006d59 	.word	0x08006d59
 8006c9c:	08006d2d 	.word	0x08006d2d
 8006ca0:	08006d59 	.word	0x08006d59
 8006ca4:	08006d59 	.word	0x08006d59
 8006ca8:	08006d59 	.word	0x08006d59
 8006cac:	08006d59 	.word	0x08006d59
 8006cb0:	08006d59 	.word	0x08006d59
 8006cb4:	08006d59 	.word	0x08006d59
 8006cb8:	08006d59 	.word	0x08006d59
 8006cbc:	08006d43 	.word	0x08006d43
 8006cc0:	08006d59 	.word	0x08006d59
 8006cc4:	08006d59 	.word	0x08006d59
 8006cc8:	08006d59 	.word	0x08006d59
 8006ccc:	08006d59 	.word	0x08006d59
 8006cd0:	08006d59 	.word	0x08006d59
 8006cd4:	08006d59 	.word	0x08006d59
 8006cd8:	08006d59 	.word	0x08006d59
 8006cdc:	08006d61 	.word	0x08006d61
 8006ce0:	08006d59 	.word	0x08006d59
 8006ce4:	08006d59 	.word	0x08006d59
 8006ce8:	08006d59 	.word	0x08006d59
 8006cec:	08006d59 	.word	0x08006d59
 8006cf0:	08006d59 	.word	0x08006d59
 8006cf4:	08006d59 	.word	0x08006d59
 8006cf8:	08006d59 	.word	0x08006d59
 8006cfc:	08006d61 	.word	0x08006d61
 8006d00:	08006d59 	.word	0x08006d59
 8006d04:	08006d59 	.word	0x08006d59
 8006d08:	08006d59 	.word	0x08006d59
 8006d0c:	08006d59 	.word	0x08006d59
 8006d10:	08006d59 	.word	0x08006d59
 8006d14:	08006d59 	.word	0x08006d59
 8006d18:	08006d59 	.word	0x08006d59
 8006d1c:	08006d61 	.word	0x08006d61
 8006d20:	58024400 	.word	0x58024400
 8006d24:	58024800 	.word	0x58024800
 8006d28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d30:	3308      	adds	r3, #8
 8006d32:	2101      	movs	r1, #1
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 ffc5 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d40:	e00f      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d46:	3328      	adds	r3, #40	@ 0x28
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 f86c 	bl	8007e28 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d56:	e004      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d5e:	e000      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d6a:	4bc0      	ldr	r3, [pc, #768]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d7a:	4abc      	ldr	r2, [pc, #752]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d80:	e003      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f002 0302 	and.w	r3, r2, #2
 8006d96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006da0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d043      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d824      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006db6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006e09 	.word	0x08006e09
 8006dc0:	08006dd5 	.word	0x08006dd5
 8006dc4:	08006deb 	.word	0x08006deb
 8006dc8:	08006e09 	.word	0x08006e09
 8006dcc:	08006e09 	.word	0x08006e09
 8006dd0:	08006e09 	.word	0x08006e09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 ff71 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006de8:	e00f      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dee:	3328      	adds	r3, #40	@ 0x28
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 f818 	bl	8007e28 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006dfe:	e004      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e06:	e000      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e12:	4b96      	ldr	r3, [pc, #600]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e16:	f023 0107 	bic.w	r1, r3, #7
 8006e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e22:	4a92      	ldr	r2, [pc, #584]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e28:	e003      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f002 0304 	and.w	r3, r2, #4
 8006e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e42:	2300      	movs	r3, #0
 8006e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e48:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	d043      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d824      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006eb1 	.word	0x08006eb1
 8006e68:	08006e7d 	.word	0x08006e7d
 8006e6c:	08006e93 	.word	0x08006e93
 8006e70:	08006eb1 	.word	0x08006eb1
 8006e74:	08006eb1 	.word	0x08006eb1
 8006e78:	08006eb1 	.word	0x08006eb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e80:	3308      	adds	r3, #8
 8006e82:	2101      	movs	r1, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 ff1d 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006e90:	e00f      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e96:	3328      	adds	r3, #40	@ 0x28
 8006e98:	2101      	movs	r1, #1
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 ffc4 	bl	8007e28 <RCCEx_PLL3_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ea6:	e004      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006eae:	e000      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006eba:	4b6c      	ldr	r3, [pc, #432]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebe:	f023 0107 	bic.w	r1, r3, #7
 8006ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eca:	4a68      	ldr	r2, [pc, #416]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ed0:	e003      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ed6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f002 0320 	and.w	r3, r2, #32
 8006ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006eea:	2300      	movs	r3, #0
 8006eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	d055      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f06:	d033      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f0c:	d82c      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f12:	d02f      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f18:	d826      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006f1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f1e:	d02b      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006f20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f24:	d820      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f2a:	d012      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f30:	d81a      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d022      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f3a:	d115      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f40:	3308      	adds	r3, #8
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 febd 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f50:	e015      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f56:	3328      	adds	r3, #40	@ 0x28
 8006f58:	2102      	movs	r1, #2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 ff64 	bl	8007e28 <RCCEx_PLL3_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f66:	e00a      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f6e:	e006      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006f70:	bf00      	nop
 8006f72:	e004      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006f74:	bf00      	nop
 8006f76:	e002      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006f78:	bf00      	nop
 8006f7a:	e000      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f86:	4b39      	ldr	r3, [pc, #228]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f96:	4a35      	ldr	r2, [pc, #212]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fa2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006fbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	d058      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006fd2:	d033      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006fd4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006fd8:	d82c      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fde:	d02f      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe4:	d826      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fea:	d02b      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ff0:	d820      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff6:	d012      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ffc:	d81a      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d022      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007006:	d115      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800700c:	3308      	adds	r3, #8
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fe57 	bl	8007cc4 <RCCEx_PLL2_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800701c:	e015      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800701e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007022:	3328      	adds	r3, #40	@ 0x28
 8007024:	2102      	movs	r1, #2
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fefe 	bl	8007e28 <RCCEx_PLL3_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007032:	e00a      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800703a:	e006      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800703c:	bf00      	nop
 800703e:	e004      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007040:	bf00      	nop
 8007042:	e002      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007044:	bf00      	nop
 8007046:	e000      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10e      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007052:	4b06      	ldr	r3, [pc, #24]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007056:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800705a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800705e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007062:	4a02      	ldr	r2, [pc, #8]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007064:	430b      	orrs	r3, r1
 8007066:	6593      	str	r3, [r2, #88]	@ 0x58
 8007068:	e006      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800706a:	bf00      	nop
 800706c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007074:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800708e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	d055      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800709c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80070a4:	d033      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80070a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80070aa:	d82c      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80070ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b0:	d02f      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80070b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b6:	d826      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80070b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80070bc:	d02b      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80070be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80070c2:	d820      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80070c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070c8:	d012      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80070ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070ce:	d81a      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d022      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80070d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d8:	d115      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070de:	3308      	adds	r3, #8
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fdee 	bl	8007cc4 <RCCEx_PLL2_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80070ee:	e015      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f4:	3328      	adds	r3, #40	@ 0x28
 80070f6:	2102      	movs	r1, #2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fe95 	bl	8007e28 <RCCEx_PLL3_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007104:	e00a      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800710e:	bf00      	nop
 8007110:	e004      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800711a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007124:	4ba1      	ldr	r3, [pc, #644]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007128:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800712c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007134:	4a9d      	ldr	r2, [pc, #628]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007136:	430b      	orrs	r3, r1
 8007138:	6593      	str	r3, [r2, #88]	@ 0x58
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007140:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f002 0308 	and.w	r3, r2, #8
 8007150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007154:	2300      	movs	r3, #0
 8007156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800715a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800715e:	460b      	mov	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	d01e      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800716c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007170:	d10c      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007176:	3328      	adds	r3, #40	@ 0x28
 8007178:	2102      	movs	r1, #2
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fe54 	bl	8007e28 <RCCEx_PLL3_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800718c:	4b87      	ldr	r3, [pc, #540]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800718e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007190:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800719c:	4a83      	ldr	r2, [pc, #524]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800719e:	430b      	orrs	r3, r1
 80071a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f002 0310 	and.w	r3, r2, #16
 80071ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071b2:	2300      	movs	r3, #0
 80071b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80071b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d01e      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80071c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ce:	d10c      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071d4:	3328      	adds	r3, #40	@ 0x28
 80071d6:	2102      	movs	r1, #2
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fe25 	bl	8007e28 <RCCEx_PLL3_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071ea:	4b70      	ldr	r3, [pc, #448]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071fa:	4a6c      	ldr	r2, [pc, #432]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800720c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007210:	2300      	movs	r3, #0
 8007212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007216:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800721a:	460b      	mov	r3, r1
 800721c:	4313      	orrs	r3, r2
 800721e:	d03e      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800722c:	d022      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800722e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007232:	d81b      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800723c:	d00b      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800723e:	e015      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007244:	3308      	adds	r3, #8
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fd3b 	bl	8007cc4 <RCCEx_PLL2_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007254:	e00f      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725a:	3328      	adds	r3, #40	@ 0x28
 800725c:	2102      	movs	r1, #2
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fde2 	bl	8007e28 <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800726a:	e004      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800727e:	4b4b      	ldr	r3, [pc, #300]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007282:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800728a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800728e:	4a47      	ldr	r2, [pc, #284]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007290:	430b      	orrs	r3, r1
 8007292:	6593      	str	r3, [r2, #88]	@ 0x58
 8007294:	e003      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800729a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800729e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80072aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072ac:	2300      	movs	r3, #0
 80072ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d03b      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80072ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072c6:	d01f      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80072c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072cc:	d818      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80072ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072d2:	d003      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80072d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072d8:	d007      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80072da:	e011      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072dc:	4b33      	ldr	r3, [pc, #204]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e0:	4a32      	ldr	r2, [pc, #200]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80072e8:	e00f      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ee:	3328      	adds	r3, #40	@ 0x28
 80072f0:	2101      	movs	r1, #1
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fd98 	bl	8007e28 <RCCEx_PLL3_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80072fe:	e004      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007306:	e000      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800730a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007312:	4b26      	ldr	r3, [pc, #152]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007316:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800731a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007322:	4a22      	ldr	r2, [pc, #136]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007324:	430b      	orrs	r3, r1
 8007326:	6553      	str	r3, [r2, #84]	@ 0x54
 8007328:	e003      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800732e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800733e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007340:	2300      	movs	r3, #0
 8007342:	677b      	str	r3, [r7, #116]	@ 0x74
 8007344:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007348:	460b      	mov	r3, r1
 800734a:	4313      	orrs	r3, r2
 800734c:	d034      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800734e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735c:	d007      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800735e:	e011      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007360:	4b12      	ldr	r3, [pc, #72]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007364:	4a11      	ldr	r2, [pc, #68]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800736a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800736c:	e00e      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800736e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007372:	3308      	adds	r3, #8
 8007374:	2102      	movs	r1, #2
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fca4 	bl	8007cc4 <RCCEx_PLL2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007382:	e003      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800738a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10d      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007398:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800739c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a2:	4a02      	ldr	r2, [pc, #8]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073a4:	430b      	orrs	r3, r1
 80073a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073a8:	e006      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80073c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073c6:	2300      	movs	r3, #0
 80073c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80073ce:	460b      	mov	r3, r1
 80073d0:	4313      	orrs	r3, r2
 80073d2:	d00c      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d8:	3328      	adds	r3, #40	@ 0x28
 80073da:	2102      	movs	r1, #2
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fd23 	bl	8007e28 <RCCEx_PLL3_Config>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80073fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80073fc:	2300      	movs	r3, #0
 80073fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007400:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007404:	460b      	mov	r3, r1
 8007406:	4313      	orrs	r3, r2
 8007408:	d038      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800740a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007416:	d018      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741c:	d811      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800741e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007422:	d014      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007428:	d80b      	bhi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d011      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800742e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007432:	d106      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007434:	4bc3      	ldr	r3, [pc, #780]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	4ac2      	ldr	r2, [pc, #776]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800743a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800743e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007440:	e008      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007448:	e004      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800744a:	bf00      	nop
 800744c:	e002      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800744e:	bf00      	nop
 8007450:	e000      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800745c:	4bb9      	ldr	r3, [pc, #740]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800745e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007460:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746c:	4ab5      	ldr	r2, [pc, #724]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800746e:	430b      	orrs	r3, r1
 8007470:	6553      	str	r3, [r2, #84]	@ 0x54
 8007472:	e003      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007474:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007478:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800747c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007488:	65bb      	str	r3, [r7, #88]	@ 0x58
 800748a:	2300      	movs	r3, #0
 800748c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800748e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007492:	460b      	mov	r3, r1
 8007494:	4313      	orrs	r3, r2
 8007496:	d009      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007498:	4baa      	ldr	r3, [pc, #680]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800749a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80074a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074a6:	4aa7      	ldr	r2, [pc, #668]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80074b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80074ba:	2300      	movs	r3, #0
 80074bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80074be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074c8:	4b9e      	ldr	r3, [pc, #632]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80074d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d6:	4a9b      	ldr	r2, [pc, #620]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074d8:	430b      	orrs	r3, r1
 80074da:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80074dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80074e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074ea:	2300      	movs	r3, #0
 80074ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80074f2:	460b      	mov	r3, r1
 80074f4:	4313      	orrs	r3, r2
 80074f6:	d009      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80074f8:	4b92      	ldr	r3, [pc, #584]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007506:	4a8f      	ldr	r2, [pc, #572]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007508:	430b      	orrs	r3, r1
 800750a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800750c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007518:	643b      	str	r3, [r7, #64]	@ 0x40
 800751a:	2300      	movs	r3, #0
 800751c:	647b      	str	r3, [r7, #68]	@ 0x44
 800751e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007522:	460b      	mov	r3, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	d00e      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007528:	4b86      	ldr	r3, [pc, #536]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4a85      	ldr	r2, [pc, #532]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800752e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007532:	6113      	str	r3, [r2, #16]
 8007534:	4b83      	ldr	r3, [pc, #524]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007536:	6919      	ldr	r1, [r3, #16]
 8007538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800753c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007540:	4a80      	ldr	r2, [pc, #512]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007542:	430b      	orrs	r3, r1
 8007544:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007554:	2300      	movs	r3, #0
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007558:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800755c:	460b      	mov	r3, r1
 800755e:	4313      	orrs	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007562:	4b78      	ldr	r3, [pc, #480]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007566:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800756a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007570:	4a74      	ldr	r2, [pc, #464]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007572:	430b      	orrs	r3, r1
 8007574:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007582:	633b      	str	r3, [r7, #48]	@ 0x30
 8007584:	2300      	movs	r3, #0
 8007586:	637b      	str	r3, [r7, #52]	@ 0x34
 8007588:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800758c:	460b      	mov	r3, r1
 800758e:	4313      	orrs	r3, r2
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007592:	4b6c      	ldr	r3, [pc, #432]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007596:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800759a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800759e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075a2:	4a68      	ldr	r2, [pc, #416]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075a4:	430b      	orrs	r3, r1
 80075a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80075a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	2100      	movs	r1, #0
 80075b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80075be:	460b      	mov	r3, r1
 80075c0:	4313      	orrs	r3, r2
 80075c2:	d011      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075c8:	3308      	adds	r3, #8
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fb79 	bl	8007cc4 <RCCEx_PLL2_Config>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80075d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80075e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	2100      	movs	r1, #0
 80075f2:	6239      	str	r1, [r7, #32]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d011      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007608:	3308      	adds	r3, #8
 800760a:	2101      	movs	r1, #1
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fb59 	bl	8007cc4 <RCCEx_PLL2_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007618:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007624:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	2100      	movs	r1, #0
 8007632:	61b9      	str	r1, [r7, #24]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	61fb      	str	r3, [r7, #28]
 800763a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800763e:	460b      	mov	r3, r1
 8007640:	4313      	orrs	r3, r2
 8007642:	d011      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007648:	3308      	adds	r3, #8
 800764a:	2102      	movs	r1, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb39 	bl	8007cc4 <RCCEx_PLL2_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007664:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	2100      	movs	r1, #0
 8007672:	6139      	str	r1, [r7, #16]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800767e:	460b      	mov	r3, r1
 8007680:	4313      	orrs	r3, r2
 8007682:	d011      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007688:	3328      	adds	r3, #40	@ 0x28
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fbcb 	bl	8007e28 <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80076a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	2100      	movs	r1, #0
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80076be:	460b      	mov	r3, r1
 80076c0:	4313      	orrs	r3, r2
 80076c2:	d011      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076c8:	3328      	adds	r3, #40	@ 0x28
 80076ca:	2101      	movs	r1, #1
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fbab 	bl	8007e28 <RCCEx_PLL3_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80076d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	2100      	movs	r1, #0
 80076f2:	6039      	str	r1, [r7, #0]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80076fe:	460b      	mov	r3, r1
 8007700:	4313      	orrs	r3, r2
 8007702:	d011      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007708:	3328      	adds	r3, #40	@ 0x28
 800770a:	2102      	movs	r1, #2
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fb8b 	bl	8007e28 <RCCEx_PLL3_Config>
 8007712:	4603      	mov	r3, r0
 8007714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007724:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007728:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e000      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
}
 8007736:	4618      	mov	r0, r3
 8007738:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800773c:	46bd      	mov	sp, r7
 800773e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400

08007748 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800774c:	f7fe fde2 	bl	8006314 <HAL_RCC_GetHCLKFreq>
 8007750:	4602      	mov	r2, r0
 8007752:	4b06      	ldr	r3, [pc, #24]	@ (800776c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	091b      	lsrs	r3, r3, #4
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	4904      	ldr	r1, [pc, #16]	@ (8007770 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800775e:	5ccb      	ldrb	r3, [r1, r3]
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007768:	4618      	mov	r0, r3
 800776a:	bd80      	pop	{r7, pc}
 800776c:	58024400 	.word	0x58024400
 8007770:	0800e5cc 	.word	0x0800e5cc

08007774 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007774:	b480      	push	{r7}
 8007776:	b089      	sub	sp, #36	@ 0x24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800777c:	4ba1      	ldr	r3, [pc, #644]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007786:	4b9f      	ldr	r3, [pc, #636]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778a:	0b1b      	lsrs	r3, r3, #12
 800778c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007790:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007792:	4b9c      	ldr	r3, [pc, #624]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	091b      	lsrs	r3, r3, #4
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800779e:	4b99      	ldr	r3, [pc, #612]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a2:	08db      	lsrs	r3, r3, #3
 80077a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8111 	beq.w	80079e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	f000 8083 	beq.w	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f200 80a1 	bhi.w	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d056      	beq.n	800788c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80077de:	e099      	b.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e0:	4b88      	ldr	r3, [pc, #544]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d02d      	beq.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ec:	4b85      	ldr	r3, [pc, #532]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	4a84      	ldr	r2, [pc, #528]	@ (8007a08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b7b      	ldr	r3, [pc, #492]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a03 	vldr	s12, [r7, #12]
 800782a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007846:	e087      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b6a      	ldr	r3, [pc, #424]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a03 	vldr	s12, [r7, #12]
 800786e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800788a:	e065      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b59      	ldr	r3, [pc, #356]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ce:	e043      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b48      	ldr	r3, [pc, #288]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007912:	e021      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b37      	ldr	r3, [pc, #220]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007956:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007958:	4b2a      	ldr	r3, [pc, #168]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800795a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795c:	0a5b      	lsrs	r3, r3, #9
 800795e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800796e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007972:	edd7 6a07 	vldr	s13, [r7, #28]
 8007976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797e:	ee17 2a90 	vmov	r2, s15
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007986:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800799c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	ee17 2a90 	vmov	r2, s15
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079b4:	4b13      	ldr	r3, [pc, #76]	@ (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b8:	0e1b      	lsrs	r3, r3, #24
 80079ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079da:	ee17 2a90 	vmov	r2, s15
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80079e2:	e008      	b.n	80079f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	609a      	str	r2, [r3, #8]
}
 80079f6:	bf00      	nop
 80079f8:	3724      	adds	r7, #36	@ 0x24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
 8007a08:	03d09000 	.word	0x03d09000
 8007a0c:	46000000 	.word	0x46000000
 8007a10:	4c742400 	.word	0x4c742400
 8007a14:	4a742400 	.word	0x4a742400
 8007a18:	4af42400 	.word	0x4af42400

08007a1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b089      	sub	sp, #36	@ 0x24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a24:	4ba1      	ldr	r3, [pc, #644]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a2e:	4b9f      	ldr	r3, [pc, #636]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	0d1b      	lsrs	r3, r3, #20
 8007a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a46:	4b99      	ldr	r3, [pc, #612]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4a:	08db      	lsrs	r3, r3, #3
 8007a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	fb02 f303 	mul.w	r3, r2, r3
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8111 	beq.w	8007c8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	f000 8083 	beq.w	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	f200 80a1 	bhi.w	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d056      	beq.n	8007b34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a86:	e099      	b.n	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a88:	4b88      	ldr	r3, [pc, #544]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d02d      	beq.n	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a94:	4b85      	ldr	r3, [pc, #532]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	08db      	lsrs	r3, r3, #3
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	4a84      	ldr	r2, [pc, #528]	@ (8007cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b7b      	ldr	r3, [pc, #492]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007aee:	e087      	b.n	8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b6a      	ldr	r3, [pc, #424]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b32:	e065      	b.n	8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b59      	ldr	r3, [pc, #356]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b76:	e043      	b.n	8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b48      	ldr	r3, [pc, #288]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bba:	e021      	b.n	8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bce:	4b37      	ldr	r3, [pc, #220]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c00:	4b2a      	ldr	r3, [pc, #168]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	0a5b      	lsrs	r3, r3, #9
 8007c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c26:	ee17 2a90 	vmov	r2, s15
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	0c1b      	lsrs	r3, r3, #16
 8007c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c54:	ee17 2a90 	vmov	r2, s15
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c5c:	4b13      	ldr	r3, [pc, #76]	@ (8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c60:	0e1b      	lsrs	r3, r3, #24
 8007c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c66:	ee07 3a90 	vmov	s15, r3
 8007c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c82:	ee17 2a90 	vmov	r2, s15
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c8a:	e008      	b.n	8007c9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	609a      	str	r2, [r3, #8]
}
 8007c9e:	bf00      	nop
 8007ca0:	3724      	adds	r7, #36	@ 0x24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	03d09000 	.word	0x03d09000
 8007cb4:	46000000 	.word	0x46000000
 8007cb8:	4c742400 	.word	0x4c742400
 8007cbc:	4a742400 	.word	0x4a742400
 8007cc0:	4af42400 	.word	0x4af42400

08007cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cd2:	4b53      	ldr	r3, [pc, #332]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d101      	bne.n	8007ce2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e099      	b.n	8007e16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cee:	f7f9 ffb5 	bl	8001c5c <HAL_GetTick>
 8007cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cf6:	f7f9 ffb1 	bl	8001c5c <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e086      	b.n	8007e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d08:	4b45      	ldr	r3, [pc, #276]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f0      	bne.n	8007cf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d14:	4b42      	ldr	r3, [pc, #264]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	031b      	lsls	r3, r3, #12
 8007d22:	493f      	ldr	r1, [pc, #252]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	025b      	lsls	r3, r3, #9
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	061b      	lsls	r3, r3, #24
 8007d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d58:	4931      	ldr	r1, [pc, #196]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d5e:	4b30      	ldr	r3, [pc, #192]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	492d      	ldr	r1, [pc, #180]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d70:	4b2b      	ldr	r3, [pc, #172]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	f023 0220 	bic.w	r2, r3, #32
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	4928      	ldr	r1, [pc, #160]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d82:	4b27      	ldr	r3, [pc, #156]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d86:	4a26      	ldr	r2, [pc, #152]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	f023 0310 	bic.w	r3, r3, #16
 8007d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d8e:	4b24      	ldr	r3, [pc, #144]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d92:	4b24      	ldr	r3, [pc, #144]	@ (8007e24 <RCCEx_PLL2_Config+0x160>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	69d2      	ldr	r2, [r2, #28]
 8007d9a:	00d2      	lsls	r2, r2, #3
 8007d9c:	4920      	ldr	r1, [pc, #128]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007da2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007da8:	f043 0310 	orr.w	r3, r3, #16
 8007dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007db4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	4a19      	ldr	r2, [pc, #100]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dc0:	e00f      	b.n	8007de2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d106      	bne.n	8007dd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007dc8:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dcc:	4a14      	ldr	r2, [pc, #80]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dd4:	e005      	b.n	8007de2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007dd6:	4b12      	ldr	r3, [pc, #72]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	4a11      	ldr	r2, [pc, #68]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007de2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a0e      	ldr	r2, [pc, #56]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007de8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dee:	f7f9 ff35 	bl	8001c5c <HAL_GetTick>
 8007df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007df4:	e008      	b.n	8007e08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007df6:	f7f9 ff31 	bl	8001c5c <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d901      	bls.n	8007e08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e006      	b.n	8007e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f0      	beq.n	8007df6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	ffff0007 	.word	0xffff0007

08007e28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e36:	4b53      	ldr	r3, [pc, #332]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d101      	bne.n	8007e46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e099      	b.n	8007f7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e46:	4b4f      	ldr	r3, [pc, #316]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e52:	f7f9 ff03 	bl	8001c5c <HAL_GetTick>
 8007e56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e58:	e008      	b.n	8007e6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e5a:	f7f9 feff 	bl	8001c5c <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e086      	b.n	8007f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e6c:	4b45      	ldr	r3, [pc, #276]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f0      	bne.n	8007e5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e78:	4b42      	ldr	r3, [pc, #264]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	051b      	lsls	r3, r3, #20
 8007e86:	493f      	ldr	r1, [pc, #252]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	025b      	lsls	r3, r3, #9
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	041b      	lsls	r3, r3, #16
 8007eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	061b      	lsls	r3, r3, #24
 8007eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ebc:	4931      	ldr	r1, [pc, #196]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ec2:	4b30      	ldr	r3, [pc, #192]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	492d      	ldr	r1, [pc, #180]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	4928      	ldr	r1, [pc, #160]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ee6:	4b27      	ldr	r3, [pc, #156]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	4a26      	ldr	r2, [pc, #152]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ef2:	4b24      	ldr	r3, [pc, #144]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef6:	4b24      	ldr	r3, [pc, #144]	@ (8007f88 <RCCEx_PLL3_Config+0x160>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	69d2      	ldr	r2, [r2, #28]
 8007efe:	00d2      	lsls	r2, r2, #3
 8007f00:	4920      	ldr	r1, [pc, #128]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f06:	4b1f      	ldr	r3, [pc, #124]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f18:	4b1a      	ldr	r3, [pc, #104]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	4a19      	ldr	r2, [pc, #100]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f24:	e00f      	b.n	8007f46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d106      	bne.n	8007f3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f2c:	4b15      	ldr	r3, [pc, #84]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	4a14      	ldr	r2, [pc, #80]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f38:	e005      	b.n	8007f46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f3a:	4b12      	ldr	r3, [pc, #72]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3e:	4a11      	ldr	r2, [pc, #68]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f46:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f52:	f7f9 fe83 	bl	8001c5c <HAL_GetTick>
 8007f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f58:	e008      	b.n	8007f6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f5a:	f7f9 fe7f 	bl	8001c5c <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e006      	b.n	8007f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f6c:	4b05      	ldr	r3, [pc, #20]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0f0      	beq.n	8007f5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	58024400 	.word	0x58024400
 8007f88:	ffff0007 	.word	0xffff0007

08007f8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e10f      	b.n	80081be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a87      	ldr	r2, [pc, #540]	@ (80081c8 <HAL_SPI_Init+0x23c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00f      	beq.n	8007fce <HAL_SPI_Init+0x42>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a86      	ldr	r2, [pc, #536]	@ (80081cc <HAL_SPI_Init+0x240>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00a      	beq.n	8007fce <HAL_SPI_Init+0x42>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a84      	ldr	r2, [pc, #528]	@ (80081d0 <HAL_SPI_Init+0x244>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d005      	beq.n	8007fce <HAL_SPI_Init+0x42>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b0f      	cmp	r3, #15
 8007fc8:	d901      	bls.n	8007fce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e0f7      	b.n	80081be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 ff76 	bl	8008ec0 <SPI_GetPacketSize>
 8007fd4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a7b      	ldr	r2, [pc, #492]	@ (80081c8 <HAL_SPI_Init+0x23c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00c      	beq.n	8007ffa <HAL_SPI_Init+0x6e>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a79      	ldr	r2, [pc, #484]	@ (80081cc <HAL_SPI_Init+0x240>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d007      	beq.n	8007ffa <HAL_SPI_Init+0x6e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a78      	ldr	r2, [pc, #480]	@ (80081d0 <HAL_SPI_Init+0x244>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d002      	beq.n	8007ffa <HAL_SPI_Init+0x6e>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d811      	bhi.n	800801e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ffe:	4a72      	ldr	r2, [pc, #456]	@ (80081c8 <HAL_SPI_Init+0x23c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d009      	beq.n	8008018 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a70      	ldr	r2, [pc, #448]	@ (80081cc <HAL_SPI_Init+0x240>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d004      	beq.n	8008018 <HAL_SPI_Init+0x8c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a6f      	ldr	r2, [pc, #444]	@ (80081d0 <HAL_SPI_Init+0x244>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d104      	bne.n	8008022 <HAL_SPI_Init+0x96>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b10      	cmp	r3, #16
 800801c:	d901      	bls.n	8008022 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e0cd      	b.n	80081be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f8 ffee 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800805e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008068:	d119      	bne.n	800809e <HAL_SPI_Init+0x112>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008072:	d103      	bne.n	800807c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008078:	2b00      	cmp	r3, #0
 800807a:	d008      	beq.n	800808e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10c      	bne.n	800809e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800808c:	d107      	bne.n	800809e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800809c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00f      	beq.n	80080ca <HAL_SPI_Init+0x13e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b06      	cmp	r3, #6
 80080b0:	d90b      	bls.n	80080ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	e007      	b.n	80080da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	69da      	ldr	r2, [r3, #28]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e2:	431a      	orrs	r2, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ec:	ea42 0103 	orr.w	r1, r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813a:	ea42 0103 	orr.w	r1, r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d113      	bne.n	800817a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008164:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008178:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0201 	bic.w	r2, r2, #1
 8008188:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40013000 	.word	0x40013000
 80081cc:	40003800 	.word	0x40003800
 80081d0:	40003c00 	.word	0x40003c00

080081d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3320      	adds	r3, #32
 80081ea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081ec:	f7f9 fd36 	bl	8001c5c <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d001      	beq.n	8008202 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80081fe:	2302      	movs	r3, #2
 8008200:	e1d1      	b.n	80085a6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_SPI_Transmit+0x3a>
 8008208:	88fb      	ldrh	r3, [r7, #6]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e1c9      	b.n	80085a6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_SPI_Transmit+0x4c>
 800821c:	2302      	movs	r3, #2
 800821e:	e1c2      	b.n	80085a6 <HAL_SPI_Transmit+0x3d2>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2203      	movs	r2, #3
 800822c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	88fa      	ldrh	r2, [r7, #6]
 8008242:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	88fa      	ldrh	r2, [r7, #6]
 800824a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008278:	d108      	bne.n	800828c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	e009      	b.n	80082a0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800829e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	4b96      	ldr	r3, [pc, #600]	@ (8008500 <HAL_SPI_Transmit+0x32c>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	88f9      	ldrh	r1, [r7, #6]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	6812      	ldr	r2, [r2, #0]
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0201 	orr.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082cc:	d107      	bne.n	80082de <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	2b0f      	cmp	r3, #15
 80082e4:	d947      	bls.n	8008376 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80082e6:	e03f      	b.n	8008368 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d114      	bne.n	8008320 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6812      	ldr	r2, [r2, #0]
 8008300:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800831e:	e023      	b.n	8008368 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008320:	f7f9 fc9c 	bl	8001c5c <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d803      	bhi.n	8008338 <HAL_SPI_Transmit+0x164>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008336:	d102      	bne.n	800833e <HAL_SPI_Transmit+0x16a>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d114      	bne.n	8008368 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 fcf0 	bl	8008d24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800834a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e11e      	b.n	80085a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1b9      	bne.n	80082e8 <HAL_SPI_Transmit+0x114>
 8008374:	e0f1      	b.n	800855a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	2b07      	cmp	r3, #7
 800837c:	f240 80e6 	bls.w	800854c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008380:	e05d      	b.n	800843e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b02      	cmp	r3, #2
 800838e:	d132      	bne.n	80083f6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b01      	cmp	r3, #1
 800839a:	d918      	bls.n	80083ce <HAL_SPI_Transmit+0x1fa>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d014      	beq.n	80083ce <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b02      	subs	r3, #2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80083cc:	e037      	b.n	800843e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d2:	881a      	ldrh	r2, [r3, #0]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083dc:	1c9a      	adds	r2, r3, #2
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80083f4:	e023      	b.n	800843e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f6:	f7f9 fc31 	bl	8001c5c <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d803      	bhi.n	800840e <HAL_SPI_Transmit+0x23a>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d102      	bne.n	8008414 <HAL_SPI_Transmit+0x240>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d114      	bne.n	800843e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fc85 	bl	8008d24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008420:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e0b3      	b.n	80085a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d19b      	bne.n	8008382 <HAL_SPI_Transmit+0x1ae>
 800844a:	e086      	b.n	800855a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b02      	cmp	r3, #2
 8008458:	d154      	bne.n	8008504 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b03      	cmp	r3, #3
 8008464:	d918      	bls.n	8008498 <HAL_SPI_Transmit+0x2c4>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846a:	2b40      	cmp	r3, #64	@ 0x40
 800846c:	d914      	bls.n	8008498 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800848a:	b29b      	uxth	r3, r3
 800848c:	3b04      	subs	r3, #4
 800848e:	b29a      	uxth	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008496:	e059      	b.n	800854c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800849e:	b29b      	uxth	r3, r3
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d917      	bls.n	80084d4 <HAL_SPI_Transmit+0x300>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d013      	beq.n	80084d4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084b0:	881a      	ldrh	r2, [r3, #0]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ba:	1c9a      	adds	r2, r3, #2
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b02      	subs	r3, #2
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80084d2:	e03b      	b.n	800854c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3320      	adds	r3, #32
 80084de:	7812      	ldrb	r2, [r2, #0]
 80084e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80084fe:	e025      	b.n	800854c <HAL_SPI_Transmit+0x378>
 8008500:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008504:	f7f9 fbaa 	bl	8001c5c <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d803      	bhi.n	800851c <HAL_SPI_Transmit+0x348>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d102      	bne.n	8008522 <HAL_SPI_Transmit+0x34e>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d114      	bne.n	800854c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fbfe 	bl	8008d24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800852e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e02c      	b.n	80085a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	f47f af79 	bne.w	800844c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2200      	movs	r2, #0
 8008562:	2108      	movs	r1, #8
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fc7d 	bl	8008e64 <SPI_WaitOnFlagUntilTimeout>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d007      	beq.n	8008580 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008576:	f043 0220 	orr.w	r2, r3, #32
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 fbcf 	bl	8008d24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e000      	b.n	80085a6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80085a4:	2300      	movs	r3, #0
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop

080085b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d001      	beq.n	80085ce <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80085ca:	2302      	movs	r3, #2
 80085cc:	e126      	b.n	800881c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <HAL_SPI_Transmit_DMA+0x2a>
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e11e      	b.n	800881c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_SPI_Transmit_DMA+0x3c>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e117      	b.n	800881c <HAL_SPI_Transmit_DMA+0x26c>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2203      	movs	r2, #3
 80085f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	88fa      	ldrh	r2, [r7, #6]
 800860e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	88fa      	ldrh	r2, [r7, #6]
 8008616:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008644:	d108      	bne.n	8008658 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e009      	b.n	800866c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800866a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d905      	bls.n	8008680 <HAL_SPI_Transmit_DMA+0xd0>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800867e:	d10f      	bne.n	80086a0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008684:	2b07      	cmp	r3, #7
 8008686:	d911      	bls.n	80086ac <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008692:	d00b      	beq.n	80086ac <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008698:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800869a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800869e:	d005      	beq.n	80086ac <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0b7      	b.n	800881c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b07      	cmp	r3, #7
 80086b2:	d820      	bhi.n	80086f6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086be:	d109      	bne.n	80086d4 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3301      	adds	r3, #1
 80086ca:	105b      	asrs	r3, r3, #1
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086de:	d11e      	bne.n	800871e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3303      	adds	r3, #3
 80086ea:	109b      	asrs	r3, r3, #2
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80086f4:	e013      	b.n	800871e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	2b0f      	cmp	r3, #15
 80086fc:	d80f      	bhi.n	800871e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008708:	d109      	bne.n	800871e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008710:	b29b      	uxth	r3, r3
 8008712:	3301      	adds	r3, #1
 8008714:	105b      	asrs	r3, r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008722:	4a40      	ldr	r2, [pc, #256]	@ (8008824 <HAL_SPI_Transmit_DMA+0x274>)
 8008724:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800872a:	4a3f      	ldr	r2, [pc, #252]	@ (8008828 <HAL_SPI_Transmit_DMA+0x278>)
 800872c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008732:	4a3e      	ldr	r2, [pc, #248]	@ (800882c <HAL_SPI_Transmit_DMA+0x27c>)
 8008734:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800873a:	2200      	movs	r2, #0
 800873c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800874c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008756:	4619      	mov	r1, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3320      	adds	r3, #32
 800875e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008766:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008768:	f7f9 ffbe 	bl	80026e8 <HAL_DMA_Start_IT>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d011      	beq.n	8008796 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008778:	f043 0210 	orr.w	r2, r3, #16
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e042      	b.n	800881c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a0:	d108      	bne.n	80087b4 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6859      	ldr	r1, [r3, #4]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b20      	ldr	r3, [pc, #128]	@ (8008830 <HAL_SPI_Transmit_DMA+0x280>)
 80087ae:	400b      	ands	r3, r1
 80087b0:	6053      	str	r3, [r2, #4]
 80087b2:	e009      	b.n	80087c8 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008830 <HAL_SPI_Transmit_DMA+0x280>)
 80087bc:	4013      	ands	r3, r2
 80087be:	88f9      	ldrh	r1, [r7, #6]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	6812      	ldr	r2, [r2, #0]
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087d6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80087e6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0201 	orr.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008800:	d107      	bne.n	8008812 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008810:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	08008c8f 	.word	0x08008c8f
 8008828:	08008c49 	.word	0x08008c49
 800882c:	08008cab 	.word	0x08008cab
 8008830:	ffff0000 	.word	0xffff0000

08008834 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	@ 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800884c:	6a3a      	ldr	r2, [r7, #32]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4013      	ands	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800885c:	2300      	movs	r3, #0
 800885e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008866:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3330      	adds	r3, #48	@ 0x30
 800886e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008876:	2b00      	cmp	r3, #0
 8008878:	d010      	beq.n	800889c <HAL_SPI_IRQHandler+0x68>
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008892:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f9cd 	bl	8008c34 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800889a:	e192      	b.n	8008bc2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d113      	bne.n	80088ce <HAL_SPI_IRQHandler+0x9a>
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10e      	bne.n	80088ce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
    handled = 1UL;
 80088ca:	2301      	movs	r3, #1
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10f      	bne.n	80088f8 <HAL_SPI_IRQHandler+0xc4>
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d105      	bne.n	80088f8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	4798      	blx	r3
    handled = 1UL;
 80088f4:	2301      	movs	r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10f      	bne.n	8008922 <HAL_SPI_IRQHandler+0xee>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008912:	2b00      	cmp	r3, #0
 8008914:	d105      	bne.n	8008922 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
    handled = 1UL;
 800891e:	2301      	movs	r3, #1
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 8147 	bne.w	8008bb8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 808b 	beq.w	8008a4c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0208 	orr.w	r2, r2, #8
 8008944:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699a      	ldr	r2, [r3, #24]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f042 0210 	orr.w	r2, r2, #16
 8008954:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008964:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0208 	bic.w	r2, r2, #8
 8008974:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d13d      	bne.n	8008a00 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008984:	e036      	b.n	80089f4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	2b0f      	cmp	r3, #15
 800898c:	d90b      	bls.n	80089a6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008996:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008998:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800899e:	1d1a      	adds	r2, r3, #4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	665a      	str	r2, [r3, #100]	@ 0x64
 80089a4:	e01d      	b.n	80089e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	2b07      	cmp	r3, #7
 80089ac:	d90b      	bls.n	80089c6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	8812      	ldrh	r2, [r2, #0]
 80089b6:	b292      	uxth	r2, r2
 80089b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089be:	1c9a      	adds	r2, r3, #2
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	665a      	str	r2, [r3, #100]	@ 0x64
 80089c4:	e00d      	b.n	80089e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089d2:	7812      	ldrb	r2, [r2, #0]
 80089d4:	b2d2      	uxtb	r2, r2
 80089d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1c2      	bne.n	8008986 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f98f 	bl	8008d24 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f901 	bl	8008c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008a1e:	e0d0      	b.n	8008bc2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008a20:	7cfb      	ldrb	r3, [r7, #19]
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d103      	bne.n	8008a2e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f8e6 	bl	8008bf8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008a2c:	e0c6      	b.n	8008bbc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008a2e:	7cfb      	ldrb	r3, [r7, #19]
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d103      	bne.n	8008a3c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f8d5 	bl	8008be4 <HAL_SPI_RxCpltCallback>
    return;
 8008a3a:	e0bf      	b.n	8008bbc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	f040 80bc 	bne.w	8008bbc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f8c3 	bl	8008bd0 <HAL_SPI_TxCpltCallback>
    return;
 8008a4a:	e0b7      	b.n	8008bbc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 80b5 	beq.w	8008bc2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00f      	beq.n	8008a82 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a68:	f043 0204 	orr.w	r2, r3, #4
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	699a      	ldr	r2, [r3, #24]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a80:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00f      	beq.n	8008aac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a92:	f043 0201 	orr.w	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aaa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00f      	beq.n	8008ad6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008abc:	f043 0208 	orr.w	r2, r3, #8
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	699a      	ldr	r2, [r3, #24]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ad4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0320 	and.w	r3, r3, #32
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00f      	beq.n	8008b00 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ae6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0220 	orr.w	r2, r2, #32
 8008afe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d05a      	beq.n	8008bc0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6919      	ldr	r1, [r3, #16]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	4b28      	ldr	r3, [pc, #160]	@ (8008bc8 <HAL_SPI_IRQHandler+0x394>)
 8008b26:	400b      	ands	r3, r1
 8008b28:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008b30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008b34:	d138      	bne.n	8008ba8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008b44:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d013      	beq.n	8008b76 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b52:	4a1e      	ldr	r2, [pc, #120]	@ (8008bcc <HAL_SPI_IRQHandler+0x398>)
 8008b54:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fa fb4c 	bl	80031f8 <HAL_DMA_Abort_IT>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d020      	beq.n	8008bc0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b82:	4a12      	ldr	r2, [pc, #72]	@ (8008bcc <HAL_SPI_IRQHandler+0x398>)
 8008b84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fa fb34 	bl	80031f8 <HAL_DMA_Abort_IT>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d014      	beq.n	8008bc0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ba6:	e00b      	b.n	8008bc0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f835 	bl	8008c20 <HAL_SPI_ErrorCallback>
    return;
 8008bb6:	e003      	b.n	8008bc0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008bb8:	bf00      	nop
 8008bba:	e002      	b.n	8008bc2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008bbc:	bf00      	nop
 8008bbe:	e000      	b.n	8008bc2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008bc0:	bf00      	nop
  }
}
 8008bc2:	3728      	adds	r7, #40	@ 0x28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	fffffc94 	.word	0xfffffc94
 8008bcc:	08008cf1 	.word	0x08008cf1

08008bd0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c54:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b07      	cmp	r3, #7
 8008c60:	d011      	beq.n	8008c86 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c6c:	d103      	bne.n	8008c76 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff ffae 	bl	8008bd0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008c74:	e007      	b.n	8008c86 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0208 	orr.w	r2, r2, #8
 8008c84:	611a      	str	r2, [r3, #16]
}
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7ff ffb5 	bl	8008c0c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7fb fc45 	bl	8004548 <HAL_DMA_GetError>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d011      	beq.n	8008ce8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f82d 	bl	8008d24 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cd0:	f043 0210 	orr.w	r2, r3, #16
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f7ff ff9c 	bl	8008c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008ce8:	bf00      	nop
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff ff82 	bl	8008c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0208 	orr.w	r2, r2, #8
 8008d42:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0210 	orr.w	r2, r2, #16
 8008d52:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0201 	bic.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6919      	ldr	r1, [r3, #16]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8008e60 <SPI_CloseTransfer+0x13c>)
 8008d70:	400b      	ands	r3, r1
 8008d72:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008d82:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d014      	beq.n	8008dba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00f      	beq.n	8008dba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008da0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	699a      	ldr	r2, [r3, #24]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0220 	orr.w	r2, r2, #32
 8008db8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d014      	beq.n	8008df0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00f      	beq.n	8008df0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dd6:	f043 0204 	orr.w	r2, r3, #4
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00f      	beq.n	8008e1a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e00:	f043 0201 	orr.w	r2, r3, #1
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	699a      	ldr	r2, [r3, #24]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e18:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00f      	beq.n	8008e44 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e2a:	f043 0208 	orr.w	r2, r3, #8
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	699a      	ldr	r2, [r3, #24]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e42:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008e54:	bf00      	nop
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	fffffc90 	.word	0xfffffc90

08008e64 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	603b      	str	r3, [r7, #0]
 8008e70:	4613      	mov	r3, r2
 8008e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e74:	e010      	b.n	8008e98 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e76:	f7f8 fef1 	bl	8001c5c <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d803      	bhi.n	8008e8e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d102      	bne.n	8008e94 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e00f      	b.n	8008eb8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d0df      	beq.n	8008e76 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	3307      	adds	r3, #7
 8008ede:	08db      	lsrs	r3, r3, #3
 8008ee0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e042      	b.n	8008f8e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7f8 fc08 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2224      	movs	r2, #36	@ 0x24
 8008f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0201 	bic.w	r2, r2, #1
 8008f36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f001 fbd7 	bl	800a6f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd68 	bl	8009a1c <UART_SetConfig>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e01b      	b.n	8008f8e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f042 0201 	orr.w	r2, r2, #1
 8008f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fc56 	bl	800a838 <UART_CheckIdleState>
 8008f8c:	4603      	mov	r3, r0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b08a      	sub	sp, #40	@ 0x28
 8008f9a:	af02      	add	r7, sp, #8
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	603b      	str	r3, [r7, #0]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d17b      	bne.n	80090a8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <HAL_UART_Transmit+0x26>
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e074      	b.n	80090aa <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2221      	movs	r2, #33	@ 0x21
 8008fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fd0:	f7f8 fe44 	bl	8001c5c <HAL_GetTick>
 8008fd4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	88fa      	ldrh	r2, [r7, #6]
 8008fda:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fee:	d108      	bne.n	8009002 <HAL_UART_Transmit+0x6c>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d104      	bne.n	8009002 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	61bb      	str	r3, [r7, #24]
 8009000:	e003      	b.n	800900a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009006:	2300      	movs	r3, #0
 8009008:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800900a:	e030      	b.n	800906e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2200      	movs	r2, #0
 8009014:	2180      	movs	r1, #128	@ 0x80
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f001 fcb8 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e03d      	b.n	80090aa <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10b      	bne.n	800904c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009042:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	3302      	adds	r3, #2
 8009048:	61bb      	str	r3, [r7, #24]
 800904a:	e007      	b.n	800905c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	3301      	adds	r3, #1
 800905a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009062:	b29b      	uxth	r3, r3
 8009064:	3b01      	subs	r3, #1
 8009066:	b29a      	uxth	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1c8      	bne.n	800900c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2200      	movs	r2, #0
 8009082:	2140      	movs	r1, #64	@ 0x40
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f001 fc81 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2220      	movs	r2, #32
 8009094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e006      	b.n	80090aa <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	e000      	b.n	80090aa <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80090a8:	2302      	movs	r3, #2
  }
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b09a      	sub	sp, #104	@ 0x68
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80090ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090da:	657b      	str	r3, [r7, #84]	@ 0x54
 80090dc:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80090e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e6      	bne.n	80090bc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009100:	4b46      	ldr	r3, [pc, #280]	@ (800921c <HAL_UART_AbortReceive+0x168>)
 8009102:	4013      	ands	r3, r2
 8009104:	663b      	str	r3, [r7, #96]	@ 0x60
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800910e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800911c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e5      	bne.n	80090ee <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d118      	bne.n	800915c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	61fb      	str	r3, [r7, #28]
   return(result);
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f023 0310 	bic.w	r3, r3, #16
 800913e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800914a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800914e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e6      	bne.n	800912a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009166:	2b40      	cmp	r3, #64	@ 0x40
 8009168:	d13b      	bne.n	80091e2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3308      	adds	r3, #8
 8009170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	60bb      	str	r3, [r7, #8]
   return(result);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009180:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800918a:	61ba      	str	r2, [r7, #24]
 800918c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6979      	ldr	r1, [r7, #20]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	613b      	str	r3, [r7, #16]
   return(result);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e5      	bne.n	800916a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01c      	beq.n	80091e2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ae:	2200      	movs	r2, #0
 80091b0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7f9 fcff 	bl	8002bbc <HAL_DMA_Abort>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00e      	beq.n	80091e2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fb f9bc 	bl	8004548 <HAL_DMA_GetError>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d105      	bne.n	80091e2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2210      	movs	r2, #16
 80091da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e017      	b.n	8009212 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	220f      	movs	r2, #15
 80091f0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f042 0208 	orr.w	r2, r2, #8
 8009200:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2220      	movs	r2, #32
 8009206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3768      	adds	r7, #104	@ 0x68
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	effffffe 	.word	0xeffffffe

08009220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b0ba      	sub	sp, #232	@ 0xe8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800924a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800924e:	4013      	ands	r3, r2
 8009250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009258:	2b00      	cmp	r3, #0
 800925a:	d11b      	bne.n	8009294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800925c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d015      	beq.n	8009294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800926c:	f003 0320 	and.w	r3, r3, #32
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8393 	beq.w	80099b0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	4798      	blx	r3
      }
      return;
 8009292:	e38d      	b.n	80099b0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 8123 	beq.w	80094e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800929e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092a2:	4b8d      	ldr	r3, [pc, #564]	@ (80094d8 <HAL_UART_IRQHandler+0x2b8>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d106      	bne.n	80092b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80092ae:	4b8b      	ldr	r3, [pc, #556]	@ (80094dc <HAL_UART_IRQHandler+0x2bc>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 8116 	beq.w	80094e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d011      	beq.n	80092e8 <HAL_UART_IRQHandler+0xc8>
 80092c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00b      	beq.n	80092e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2201      	movs	r2, #1
 80092d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092de:	f043 0201 	orr.w	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d011      	beq.n	8009318 <HAL_UART_IRQHandler+0xf8>
 80092f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2202      	movs	r2, #2
 8009306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930e:	f043 0204 	orr.w	r2, r3, #4
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d011      	beq.n	8009348 <HAL_UART_IRQHandler+0x128>
 8009324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2204      	movs	r2, #4
 8009336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933e:	f043 0202 	orr.w	r2, r3, #2
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800934c:	f003 0308 	and.w	r3, r3, #8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d017      	beq.n	8009384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b00      	cmp	r3, #0
 800935e:	d105      	bne.n	800936c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009364:	4b5c      	ldr	r3, [pc, #368]	@ (80094d8 <HAL_UART_IRQHandler+0x2b8>)
 8009366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2208      	movs	r2, #8
 8009372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937a:	f043 0208 	orr.w	r2, r3, #8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800938c:	2b00      	cmp	r3, #0
 800938e:	d012      	beq.n	80093b6 <HAL_UART_IRQHandler+0x196>
 8009390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00c      	beq.n	80093b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ac:	f043 0220 	orr.w	r2, r3, #32
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 82f9 	beq.w	80099b4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d013      	beq.n	80093f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d105      	bne.n	80093e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d007      	beq.n	80093f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940a:	2b40      	cmp	r3, #64	@ 0x40
 800940c:	d005      	beq.n	800941a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800940e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009416:	2b00      	cmp	r3, #0
 8009418:	d054      	beq.n	80094c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 fc0c 	bl	800ac38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800942a:	2b40      	cmp	r3, #64	@ 0x40
 800942c:	d146      	bne.n	80094bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800944c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800945a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800945e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1d9      	bne.n	800942e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009480:	2b00      	cmp	r3, #0
 8009482:	d017      	beq.n	80094b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800948a:	4a15      	ldr	r2, [pc, #84]	@ (80094e0 <HAL_UART_IRQHandler+0x2c0>)
 800948c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009494:	4618      	mov	r0, r3
 8009496:	f7f9 feaf 	bl	80031f8 <HAL_DMA_Abort_IT>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d019      	beq.n	80094d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80094ae:	4610      	mov	r0, r2
 80094b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b2:	e00f      	b.n	80094d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 faa7 	bl	8009a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ba:	e00b      	b.n	80094d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 faa3 	bl	8009a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c2:	e007      	b.n	80094d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa9f 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80094d2:	e26f      	b.n	80099b4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d4:	bf00      	nop
    return;
 80094d6:	e26d      	b.n	80099b4 <HAL_UART_IRQHandler+0x794>
 80094d8:	10000001 	.word	0x10000001
 80094dc:	04000120 	.word	0x04000120
 80094e0:	0800aeeb 	.word	0x0800aeeb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	f040 8203 	bne.w	80098f4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f2:	f003 0310 	and.w	r3, r3, #16
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 81fc 	beq.w	80098f4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009500:	f003 0310 	and.w	r3, r3, #16
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 81f5 	beq.w	80098f4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2210      	movs	r2, #16
 8009510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	f040 816d 	bne.w	80097fc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4aa4      	ldr	r2, [pc, #656]	@ (80097bc <HAL_UART_IRQHandler+0x59c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d068      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4aa1      	ldr	r2, [pc, #644]	@ (80097c0 <HAL_UART_IRQHandler+0x5a0>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d061      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a9f      	ldr	r2, [pc, #636]	@ (80097c4 <HAL_UART_IRQHandler+0x5a4>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d05a      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a9c      	ldr	r2, [pc, #624]	@ (80097c8 <HAL_UART_IRQHandler+0x5a8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d053      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a9a      	ldr	r2, [pc, #616]	@ (80097cc <HAL_UART_IRQHandler+0x5ac>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d04c      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a97      	ldr	r2, [pc, #604]	@ (80097d0 <HAL_UART_IRQHandler+0x5b0>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d045      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a95      	ldr	r2, [pc, #596]	@ (80097d4 <HAL_UART_IRQHandler+0x5b4>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d03e      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a92      	ldr	r2, [pc, #584]	@ (80097d8 <HAL_UART_IRQHandler+0x5b8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d037      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a90      	ldr	r2, [pc, #576]	@ (80097dc <HAL_UART_IRQHandler+0x5bc>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d030      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a8d      	ldr	r2, [pc, #564]	@ (80097e0 <HAL_UART_IRQHandler+0x5c0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d029      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a8b      	ldr	r2, [pc, #556]	@ (80097e4 <HAL_UART_IRQHandler+0x5c4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d022      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a88      	ldr	r2, [pc, #544]	@ (80097e8 <HAL_UART_IRQHandler+0x5c8>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d01b      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a86      	ldr	r2, [pc, #536]	@ (80097ec <HAL_UART_IRQHandler+0x5cc>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d014      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a83      	ldr	r2, [pc, #524]	@ (80097f0 <HAL_UART_IRQHandler+0x5d0>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00d      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a81      	ldr	r2, [pc, #516]	@ (80097f4 <HAL_UART_IRQHandler+0x5d4>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d006      	beq.n	8009602 <HAL_UART_IRQHandler+0x3e2>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a7e      	ldr	r2, [pc, #504]	@ (80097f8 <HAL_UART_IRQHandler+0x5d8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d106      	bne.n	8009610 <HAL_UART_IRQHandler+0x3f0>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	b29b      	uxth	r3, r3
 800960e:	e005      	b.n	800961c <HAL_UART_IRQHandler+0x3fc>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80ad 	beq.w	8009784 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009634:	429a      	cmp	r2, r3
 8009636:	f080 80a5 	bcs.w	8009784 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009650:	f000 8087 	beq.w	8009762 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800966c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800967e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009682:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800968a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1da      	bne.n	8009654 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096b0:	f023 0301 	bic.w	r3, r3, #1
 80096b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e1      	bne.n	800969e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80096fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009700:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800970c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e3      	bne.n	80096da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800972e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009730:	f023 0310 	bic.w	r3, r3, #16
 8009734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e4      	bne.n	8009720 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800975c:	4618      	mov	r0, r3
 800975e:	f7f9 fa2d 	bl	8002bbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2202      	movs	r2, #2
 8009766:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009774:	b29b      	uxth	r3, r3
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	b29b      	uxth	r3, r3
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7f7 fae1 	bl	8000d44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009782:	e119      	b.n	80099b8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800978a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800978e:	429a      	cmp	r2, r3
 8009790:	f040 8112 	bne.w	80099b8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a0:	f040 810a 	bne.w	80099b8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7f7 fac6 	bl	8000d44 <HAL_UARTEx_RxEventCallback>
      return;
 80097b8:	e0fe      	b.n	80099b8 <HAL_UART_IRQHandler+0x798>
 80097ba:	bf00      	nop
 80097bc:	40020010 	.word	0x40020010
 80097c0:	40020028 	.word	0x40020028
 80097c4:	40020040 	.word	0x40020040
 80097c8:	40020058 	.word	0x40020058
 80097cc:	40020070 	.word	0x40020070
 80097d0:	40020088 	.word	0x40020088
 80097d4:	400200a0 	.word	0x400200a0
 80097d8:	400200b8 	.word	0x400200b8
 80097dc:	40020410 	.word	0x40020410
 80097e0:	40020428 	.word	0x40020428
 80097e4:	40020440 	.word	0x40020440
 80097e8:	40020458 	.word	0x40020458
 80097ec:	40020470 	.word	0x40020470
 80097f0:	40020488 	.word	0x40020488
 80097f4:	400204a0 	.word	0x400204a0
 80097f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009808:	b29b      	uxth	r3, r3
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009816:	b29b      	uxth	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80cf 	beq.w	80099bc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800981e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 80ca 	beq.w	80099bc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800983c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800984a:	647b      	str	r3, [r7, #68]	@ 0x44
 800984c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e4      	bne.n	8009828 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	623b      	str	r3, [r7, #32]
   return(result);
 800986e:	6a3a      	ldr	r2, [r7, #32]
 8009870:	4b55      	ldr	r3, [pc, #340]	@ (80099c8 <HAL_UART_IRQHandler+0x7a8>)
 8009872:	4013      	ands	r3, r2
 8009874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009882:	633a      	str	r2, [r7, #48]	@ 0x30
 8009884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e3      	bne.n	800985e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2220      	movs	r2, #32
 800989a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0310 	bic.w	r3, r3, #16
 80098be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80098cc:	61fb      	str	r3, [r7, #28]
 80098ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	69b9      	ldr	r1, [r7, #24]
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	617b      	str	r3, [r7, #20]
   return(result);
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e4      	bne.n	80098aa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7f7 fa29 	bl	8000d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098f2:	e063      	b.n	80099bc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00e      	beq.n	800991e <HAL_UART_IRQHandler+0x6fe>
 8009900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d008      	beq.n	800991e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 fb24 	bl	800af64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800991c:	e051      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009926:	2b00      	cmp	r3, #0
 8009928:	d014      	beq.n	8009954 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800992a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800992e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009932:	2b00      	cmp	r3, #0
 8009934:	d105      	bne.n	8009942 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800993a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009946:	2b00      	cmp	r3, #0
 8009948:	d03a      	beq.n	80099c0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
    }
    return;
 8009952:	e035      	b.n	80099c0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800995c:	2b00      	cmp	r3, #0
 800995e:	d009      	beq.n	8009974 <HAL_UART_IRQHandler+0x754>
 8009960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 face 	bl	800af0e <UART_EndTransmit_IT>
    return;
 8009972:	e026      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d009      	beq.n	8009994 <HAL_UART_IRQHandler+0x774>
 8009980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009984:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 fafd 	bl	800af8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009992:	e016      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d010      	beq.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
 80099a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	da0c      	bge.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 fae5 	bl	800af78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ae:	e008      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80099b0:	bf00      	nop
 80099b2:	e006      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80099b4:	bf00      	nop
 80099b6:	e004      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80099b8:	bf00      	nop
 80099ba:	e002      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80099bc:	bf00      	nop
 80099be:	e000      	b.n	80099c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80099c0:	bf00      	nop
  }
}
 80099c2:	37e8      	adds	r7, #232	@ 0xe8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	effffffe 	.word	0xeffffffe

080099cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a20:	b092      	sub	sp, #72	@ 0x48
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4bbe      	ldr	r3, [pc, #760]	@ (8009d44 <UART_SetConfig+0x328>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	6812      	ldr	r2, [r2, #0]
 8009a52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a54:	430b      	orrs	r3, r1
 8009a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4ab3      	ldr	r2, [pc, #716]	@ (8009d48 <UART_SetConfig+0x32c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d004      	beq.n	8009a88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a84:	4313      	orrs	r3, r2
 8009a86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	4baf      	ldr	r3, [pc, #700]	@ (8009d4c <UART_SetConfig+0x330>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	6812      	ldr	r2, [r2, #0]
 8009a96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a98:	430b      	orrs	r3, r1
 8009a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa2:	f023 010f 	bic.w	r1, r3, #15
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4aa6      	ldr	r2, [pc, #664]	@ (8009d50 <UART_SetConfig+0x334>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d177      	bne.n	8009bac <UART_SetConfig+0x190>
 8009abc:	4ba5      	ldr	r3, [pc, #660]	@ (8009d54 <UART_SetConfig+0x338>)
 8009abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ac4:	2b28      	cmp	r3, #40	@ 0x28
 8009ac6:	d86d      	bhi.n	8009ba4 <UART_SetConfig+0x188>
 8009ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <UART_SetConfig+0xb4>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009b75 	.word	0x08009b75
 8009ad4:	08009ba5 	.word	0x08009ba5
 8009ad8:	08009ba5 	.word	0x08009ba5
 8009adc:	08009ba5 	.word	0x08009ba5
 8009ae0:	08009ba5 	.word	0x08009ba5
 8009ae4:	08009ba5 	.word	0x08009ba5
 8009ae8:	08009ba5 	.word	0x08009ba5
 8009aec:	08009ba5 	.word	0x08009ba5
 8009af0:	08009b7d 	.word	0x08009b7d
 8009af4:	08009ba5 	.word	0x08009ba5
 8009af8:	08009ba5 	.word	0x08009ba5
 8009afc:	08009ba5 	.word	0x08009ba5
 8009b00:	08009ba5 	.word	0x08009ba5
 8009b04:	08009ba5 	.word	0x08009ba5
 8009b08:	08009ba5 	.word	0x08009ba5
 8009b0c:	08009ba5 	.word	0x08009ba5
 8009b10:	08009b85 	.word	0x08009b85
 8009b14:	08009ba5 	.word	0x08009ba5
 8009b18:	08009ba5 	.word	0x08009ba5
 8009b1c:	08009ba5 	.word	0x08009ba5
 8009b20:	08009ba5 	.word	0x08009ba5
 8009b24:	08009ba5 	.word	0x08009ba5
 8009b28:	08009ba5 	.word	0x08009ba5
 8009b2c:	08009ba5 	.word	0x08009ba5
 8009b30:	08009b8d 	.word	0x08009b8d
 8009b34:	08009ba5 	.word	0x08009ba5
 8009b38:	08009ba5 	.word	0x08009ba5
 8009b3c:	08009ba5 	.word	0x08009ba5
 8009b40:	08009ba5 	.word	0x08009ba5
 8009b44:	08009ba5 	.word	0x08009ba5
 8009b48:	08009ba5 	.word	0x08009ba5
 8009b4c:	08009ba5 	.word	0x08009ba5
 8009b50:	08009b95 	.word	0x08009b95
 8009b54:	08009ba5 	.word	0x08009ba5
 8009b58:	08009ba5 	.word	0x08009ba5
 8009b5c:	08009ba5 	.word	0x08009ba5
 8009b60:	08009ba5 	.word	0x08009ba5
 8009b64:	08009ba5 	.word	0x08009ba5
 8009b68:	08009ba5 	.word	0x08009ba5
 8009b6c:	08009ba5 	.word	0x08009ba5
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7a:	e326      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009b7c:	2304      	movs	r3, #4
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e322      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009b84:	2308      	movs	r3, #8
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	e31e      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b92:	e31a      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009b94:	2320      	movs	r3, #32
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e316      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009b9c:	2340      	movs	r3, #64	@ 0x40
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e312      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ba4:	2380      	movs	r3, #128	@ 0x80
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e30e      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a69      	ldr	r2, [pc, #420]	@ (8009d58 <UART_SetConfig+0x33c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d130      	bne.n	8009c18 <UART_SetConfig+0x1fc>
 8009bb6:	4b67      	ldr	r3, [pc, #412]	@ (8009d54 <UART_SetConfig+0x338>)
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bba:	f003 0307 	and.w	r3, r3, #7
 8009bbe:	2b05      	cmp	r3, #5
 8009bc0:	d826      	bhi.n	8009c10 <UART_SetConfig+0x1f4>
 8009bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <UART_SetConfig+0x1ac>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009be1 	.word	0x08009be1
 8009bcc:	08009be9 	.word	0x08009be9
 8009bd0:	08009bf1 	.word	0x08009bf1
 8009bd4:	08009bf9 	.word	0x08009bf9
 8009bd8:	08009c01 	.word	0x08009c01
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be6:	e2f0      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009be8:	2304      	movs	r3, #4
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e2ec      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf6:	e2e8      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfe:	e2e4      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c00:	2320      	movs	r3, #32
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c06:	e2e0      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c08:	2340      	movs	r3, #64	@ 0x40
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0e:	e2dc      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c10:	2380      	movs	r3, #128	@ 0x80
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c16:	e2d8      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8009d5c <UART_SetConfig+0x340>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d130      	bne.n	8009c84 <UART_SetConfig+0x268>
 8009c22:	4b4c      	ldr	r3, [pc, #304]	@ (8009d54 <UART_SetConfig+0x338>)
 8009c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d826      	bhi.n	8009c7c <UART_SetConfig+0x260>
 8009c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c34 <UART_SetConfig+0x218>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c4d 	.word	0x08009c4d
 8009c38:	08009c55 	.word	0x08009c55
 8009c3c:	08009c5d 	.word	0x08009c5d
 8009c40:	08009c65 	.word	0x08009c65
 8009c44:	08009c6d 	.word	0x08009c6d
 8009c48:	08009c75 	.word	0x08009c75
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e2ba      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c54:	2304      	movs	r3, #4
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e2b6      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e2b2      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c64:	2310      	movs	r3, #16
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e2ae      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e2aa      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c74:	2340      	movs	r3, #64	@ 0x40
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7a:	e2a6      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c7c:	2380      	movs	r3, #128	@ 0x80
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c82:	e2a2      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a35      	ldr	r2, [pc, #212]	@ (8009d60 <UART_SetConfig+0x344>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d130      	bne.n	8009cf0 <UART_SetConfig+0x2d4>
 8009c8e:	4b31      	ldr	r3, [pc, #196]	@ (8009d54 <UART_SetConfig+0x338>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	2b05      	cmp	r3, #5
 8009c98:	d826      	bhi.n	8009ce8 <UART_SetConfig+0x2cc>
 8009c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <UART_SetConfig+0x284>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cb9 	.word	0x08009cb9
 8009ca4:	08009cc1 	.word	0x08009cc1
 8009ca8:	08009cc9 	.word	0x08009cc9
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009cd9 	.word	0x08009cd9
 8009cb4:	08009ce1 	.word	0x08009ce1
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e284      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e280      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009cc8:	2308      	movs	r3, #8
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e27c      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e278      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e274      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ce0:	2340      	movs	r3, #64	@ 0x40
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e270      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ce8:	2380      	movs	r3, #128	@ 0x80
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e26c      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d64 <UART_SetConfig+0x348>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d142      	bne.n	8009d80 <UART_SetConfig+0x364>
 8009cfa:	4b16      	ldr	r3, [pc, #88]	@ (8009d54 <UART_SetConfig+0x338>)
 8009cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	d838      	bhi.n	8009d78 <UART_SetConfig+0x35c>
 8009d06:	a201      	add	r2, pc, #4	@ (adr r2, 8009d0c <UART_SetConfig+0x2f0>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d25 	.word	0x08009d25
 8009d10:	08009d2d 	.word	0x08009d2d
 8009d14:	08009d35 	.word	0x08009d35
 8009d18:	08009d3d 	.word	0x08009d3d
 8009d1c:	08009d69 	.word	0x08009d69
 8009d20:	08009d71 	.word	0x08009d71
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e24e      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009d2c:	2304      	movs	r3, #4
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e24a      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009d34:	2308      	movs	r3, #8
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e246      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e242      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009d44:	cfff69f3 	.word	0xcfff69f3
 8009d48:	58000c00 	.word	0x58000c00
 8009d4c:	11fff4ff 	.word	0x11fff4ff
 8009d50:	40011000 	.word	0x40011000
 8009d54:	58024400 	.word	0x58024400
 8009d58:	40004400 	.word	0x40004400
 8009d5c:	40004800 	.word	0x40004800
 8009d60:	40004c00 	.word	0x40004c00
 8009d64:	40005000 	.word	0x40005000
 8009d68:	2320      	movs	r3, #32
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e22c      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009d70:	2340      	movs	r3, #64	@ 0x40
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e228      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009d78:	2380      	movs	r3, #128	@ 0x80
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e224      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4ab1      	ldr	r2, [pc, #708]	@ (800a04c <UART_SetConfig+0x630>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d176      	bne.n	8009e78 <UART_SetConfig+0x45c>
 8009d8a:	4bb1      	ldr	r3, [pc, #708]	@ (800a050 <UART_SetConfig+0x634>)
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d92:	2b28      	cmp	r3, #40	@ 0x28
 8009d94:	d86c      	bhi.n	8009e70 <UART_SetConfig+0x454>
 8009d96:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <UART_SetConfig+0x380>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009e41 	.word	0x08009e41
 8009da0:	08009e71 	.word	0x08009e71
 8009da4:	08009e71 	.word	0x08009e71
 8009da8:	08009e71 	.word	0x08009e71
 8009dac:	08009e71 	.word	0x08009e71
 8009db0:	08009e71 	.word	0x08009e71
 8009db4:	08009e71 	.word	0x08009e71
 8009db8:	08009e71 	.word	0x08009e71
 8009dbc:	08009e49 	.word	0x08009e49
 8009dc0:	08009e71 	.word	0x08009e71
 8009dc4:	08009e71 	.word	0x08009e71
 8009dc8:	08009e71 	.word	0x08009e71
 8009dcc:	08009e71 	.word	0x08009e71
 8009dd0:	08009e71 	.word	0x08009e71
 8009dd4:	08009e71 	.word	0x08009e71
 8009dd8:	08009e71 	.word	0x08009e71
 8009ddc:	08009e51 	.word	0x08009e51
 8009de0:	08009e71 	.word	0x08009e71
 8009de4:	08009e71 	.word	0x08009e71
 8009de8:	08009e71 	.word	0x08009e71
 8009dec:	08009e71 	.word	0x08009e71
 8009df0:	08009e71 	.word	0x08009e71
 8009df4:	08009e71 	.word	0x08009e71
 8009df8:	08009e71 	.word	0x08009e71
 8009dfc:	08009e59 	.word	0x08009e59
 8009e00:	08009e71 	.word	0x08009e71
 8009e04:	08009e71 	.word	0x08009e71
 8009e08:	08009e71 	.word	0x08009e71
 8009e0c:	08009e71 	.word	0x08009e71
 8009e10:	08009e71 	.word	0x08009e71
 8009e14:	08009e71 	.word	0x08009e71
 8009e18:	08009e71 	.word	0x08009e71
 8009e1c:	08009e61 	.word	0x08009e61
 8009e20:	08009e71 	.word	0x08009e71
 8009e24:	08009e71 	.word	0x08009e71
 8009e28:	08009e71 	.word	0x08009e71
 8009e2c:	08009e71 	.word	0x08009e71
 8009e30:	08009e71 	.word	0x08009e71
 8009e34:	08009e71 	.word	0x08009e71
 8009e38:	08009e71 	.word	0x08009e71
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e1c0      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e1bc      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009e50:	2308      	movs	r3, #8
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e1b8      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e1b4      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009e60:	2320      	movs	r3, #32
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e1b0      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009e68:	2340      	movs	r3, #64	@ 0x40
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e1ac      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009e70:	2380      	movs	r3, #128	@ 0x80
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e1a8      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a75      	ldr	r2, [pc, #468]	@ (800a054 <UART_SetConfig+0x638>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d130      	bne.n	8009ee4 <UART_SetConfig+0x4c8>
 8009e82:	4b73      	ldr	r3, [pc, #460]	@ (800a050 <UART_SetConfig+0x634>)
 8009e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	d826      	bhi.n	8009edc <UART_SetConfig+0x4c0>
 8009e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <UART_SetConfig+0x478>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009ead 	.word	0x08009ead
 8009e98:	08009eb5 	.word	0x08009eb5
 8009e9c:	08009ebd 	.word	0x08009ebd
 8009ea0:	08009ec5 	.word	0x08009ec5
 8009ea4:	08009ecd 	.word	0x08009ecd
 8009ea8:	08009ed5 	.word	0x08009ed5
 8009eac:	2300      	movs	r3, #0
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e18a      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e186      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e182      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eca:	e17e      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ecc:	2320      	movs	r3, #32
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed2:	e17a      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ed4:	2340      	movs	r3, #64	@ 0x40
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eda:	e176      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009edc:	2380      	movs	r3, #128	@ 0x80
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee2:	e172      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a5b      	ldr	r2, [pc, #364]	@ (800a058 <UART_SetConfig+0x63c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d130      	bne.n	8009f50 <UART_SetConfig+0x534>
 8009eee:	4b58      	ldr	r3, [pc, #352]	@ (800a050 <UART_SetConfig+0x634>)
 8009ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	2b05      	cmp	r3, #5
 8009ef8:	d826      	bhi.n	8009f48 <UART_SetConfig+0x52c>
 8009efa:	a201      	add	r2, pc, #4	@ (adr r2, 8009f00 <UART_SetConfig+0x4e4>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f19 	.word	0x08009f19
 8009f04:	08009f21 	.word	0x08009f21
 8009f08:	08009f29 	.word	0x08009f29
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f39 	.word	0x08009f39
 8009f14:	08009f41 	.word	0x08009f41
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e154      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009f20:	2304      	movs	r3, #4
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e150      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e14c      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009f30:	2310      	movs	r3, #16
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e148      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e144      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009f40:	2340      	movs	r3, #64	@ 0x40
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f46:	e140      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009f48:	2380      	movs	r3, #128	@ 0x80
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4e:	e13c      	b.n	800a1ca <UART_SetConfig+0x7ae>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a41      	ldr	r2, [pc, #260]	@ (800a05c <UART_SetConfig+0x640>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	f040 8082 	bne.w	800a060 <UART_SetConfig+0x644>
 8009f5c:	4b3c      	ldr	r3, [pc, #240]	@ (800a050 <UART_SetConfig+0x634>)
 8009f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f64:	2b28      	cmp	r3, #40	@ 0x28
 8009f66:	d86d      	bhi.n	800a044 <UART_SetConfig+0x628>
 8009f68:	a201      	add	r2, pc, #4	@ (adr r2, 8009f70 <UART_SetConfig+0x554>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	0800a015 	.word	0x0800a015
 8009f74:	0800a045 	.word	0x0800a045
 8009f78:	0800a045 	.word	0x0800a045
 8009f7c:	0800a045 	.word	0x0800a045
 8009f80:	0800a045 	.word	0x0800a045
 8009f84:	0800a045 	.word	0x0800a045
 8009f88:	0800a045 	.word	0x0800a045
 8009f8c:	0800a045 	.word	0x0800a045
 8009f90:	0800a01d 	.word	0x0800a01d
 8009f94:	0800a045 	.word	0x0800a045
 8009f98:	0800a045 	.word	0x0800a045
 8009f9c:	0800a045 	.word	0x0800a045
 8009fa0:	0800a045 	.word	0x0800a045
 8009fa4:	0800a045 	.word	0x0800a045
 8009fa8:	0800a045 	.word	0x0800a045
 8009fac:	0800a045 	.word	0x0800a045
 8009fb0:	0800a025 	.word	0x0800a025
 8009fb4:	0800a045 	.word	0x0800a045
 8009fb8:	0800a045 	.word	0x0800a045
 8009fbc:	0800a045 	.word	0x0800a045
 8009fc0:	0800a045 	.word	0x0800a045
 8009fc4:	0800a045 	.word	0x0800a045
 8009fc8:	0800a045 	.word	0x0800a045
 8009fcc:	0800a045 	.word	0x0800a045
 8009fd0:	0800a02d 	.word	0x0800a02d
 8009fd4:	0800a045 	.word	0x0800a045
 8009fd8:	0800a045 	.word	0x0800a045
 8009fdc:	0800a045 	.word	0x0800a045
 8009fe0:	0800a045 	.word	0x0800a045
 8009fe4:	0800a045 	.word	0x0800a045
 8009fe8:	0800a045 	.word	0x0800a045
 8009fec:	0800a045 	.word	0x0800a045
 8009ff0:	0800a035 	.word	0x0800a035
 8009ff4:	0800a045 	.word	0x0800a045
 8009ff8:	0800a045 	.word	0x0800a045
 8009ffc:	0800a045 	.word	0x0800a045
 800a000:	0800a045 	.word	0x0800a045
 800a004:	0800a045 	.word	0x0800a045
 800a008:	0800a045 	.word	0x0800a045
 800a00c:	0800a045 	.word	0x0800a045
 800a010:	0800a03d 	.word	0x0800a03d
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01a:	e0d6      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a01c:	2304      	movs	r3, #4
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a022:	e0d2      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a024:	2308      	movs	r3, #8
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02a:	e0ce      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a02c:	2310      	movs	r3, #16
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a032:	e0ca      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a034:	2320      	movs	r3, #32
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e0c6      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a03c:	2340      	movs	r3, #64	@ 0x40
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e0c2      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a044:	2380      	movs	r3, #128	@ 0x80
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e0be      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a04c:	40011400 	.word	0x40011400
 800a050:	58024400 	.word	0x58024400
 800a054:	40007800 	.word	0x40007800
 800a058:	40007c00 	.word	0x40007c00
 800a05c:	40011800 	.word	0x40011800
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4aad      	ldr	r2, [pc, #692]	@ (800a31c <UART_SetConfig+0x900>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d176      	bne.n	800a158 <UART_SetConfig+0x73c>
 800a06a:	4bad      	ldr	r3, [pc, #692]	@ (800a320 <UART_SetConfig+0x904>)
 800a06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a072:	2b28      	cmp	r3, #40	@ 0x28
 800a074:	d86c      	bhi.n	800a150 <UART_SetConfig+0x734>
 800a076:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <UART_SetConfig+0x660>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a121 	.word	0x0800a121
 800a080:	0800a151 	.word	0x0800a151
 800a084:	0800a151 	.word	0x0800a151
 800a088:	0800a151 	.word	0x0800a151
 800a08c:	0800a151 	.word	0x0800a151
 800a090:	0800a151 	.word	0x0800a151
 800a094:	0800a151 	.word	0x0800a151
 800a098:	0800a151 	.word	0x0800a151
 800a09c:	0800a129 	.word	0x0800a129
 800a0a0:	0800a151 	.word	0x0800a151
 800a0a4:	0800a151 	.word	0x0800a151
 800a0a8:	0800a151 	.word	0x0800a151
 800a0ac:	0800a151 	.word	0x0800a151
 800a0b0:	0800a151 	.word	0x0800a151
 800a0b4:	0800a151 	.word	0x0800a151
 800a0b8:	0800a151 	.word	0x0800a151
 800a0bc:	0800a131 	.word	0x0800a131
 800a0c0:	0800a151 	.word	0x0800a151
 800a0c4:	0800a151 	.word	0x0800a151
 800a0c8:	0800a151 	.word	0x0800a151
 800a0cc:	0800a151 	.word	0x0800a151
 800a0d0:	0800a151 	.word	0x0800a151
 800a0d4:	0800a151 	.word	0x0800a151
 800a0d8:	0800a151 	.word	0x0800a151
 800a0dc:	0800a139 	.word	0x0800a139
 800a0e0:	0800a151 	.word	0x0800a151
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a151 	.word	0x0800a151
 800a0ec:	0800a151 	.word	0x0800a151
 800a0f0:	0800a151 	.word	0x0800a151
 800a0f4:	0800a151 	.word	0x0800a151
 800a0f8:	0800a151 	.word	0x0800a151
 800a0fc:	0800a141 	.word	0x0800a141
 800a100:	0800a151 	.word	0x0800a151
 800a104:	0800a151 	.word	0x0800a151
 800a108:	0800a151 	.word	0x0800a151
 800a10c:	0800a151 	.word	0x0800a151
 800a110:	0800a151 	.word	0x0800a151
 800a114:	0800a151 	.word	0x0800a151
 800a118:	0800a151 	.word	0x0800a151
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	2301      	movs	r3, #1
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a126:	e050      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a128:	2304      	movs	r3, #4
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e04c      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a130:	2308      	movs	r3, #8
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e048      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a138:	2310      	movs	r3, #16
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e044      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a140:	2320      	movs	r3, #32
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a146:	e040      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a148:	2340      	movs	r3, #64	@ 0x40
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14e:	e03c      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a150:	2380      	movs	r3, #128	@ 0x80
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a156:	e038      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a71      	ldr	r2, [pc, #452]	@ (800a324 <UART_SetConfig+0x908>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d130      	bne.n	800a1c4 <UART_SetConfig+0x7a8>
 800a162:	4b6f      	ldr	r3, [pc, #444]	@ (800a320 <UART_SetConfig+0x904>)
 800a164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	d826      	bhi.n	800a1bc <UART_SetConfig+0x7a0>
 800a16e:	a201      	add	r2, pc, #4	@ (adr r2, 800a174 <UART_SetConfig+0x758>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a18d 	.word	0x0800a18d
 800a178:	0800a195 	.word	0x0800a195
 800a17c:	0800a19d 	.word	0x0800a19d
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1ad 	.word	0x0800a1ad
 800a188:	0800a1b5 	.word	0x0800a1b5
 800a18c:	2302      	movs	r3, #2
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a192:	e01a      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a194:	2304      	movs	r3, #4
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e016      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a19c:	2308      	movs	r3, #8
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e012      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e00e      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a1ac:	2320      	movs	r3, #32
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b2:	e00a      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a1b4:	2340      	movs	r3, #64	@ 0x40
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ba:	e006      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a1bc:	2380      	movs	r3, #128	@ 0x80
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c2:	e002      	b.n	800a1ca <UART_SetConfig+0x7ae>
 800a1c4:	2380      	movs	r3, #128	@ 0x80
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a55      	ldr	r2, [pc, #340]	@ (800a324 <UART_SetConfig+0x908>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	f040 80f8 	bne.w	800a3c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1da:	2b20      	cmp	r3, #32
 800a1dc:	dc46      	bgt.n	800a26c <UART_SetConfig+0x850>
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	db75      	blt.n	800a2ce <UART_SetConfig+0x8b2>
 800a1e2:	3b02      	subs	r3, #2
 800a1e4:	2b1e      	cmp	r3, #30
 800a1e6:	d872      	bhi.n	800a2ce <UART_SetConfig+0x8b2>
 800a1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f0 <UART_SetConfig+0x7d4>)
 800a1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ee:	bf00      	nop
 800a1f0:	0800a273 	.word	0x0800a273
 800a1f4:	0800a2cf 	.word	0x0800a2cf
 800a1f8:	0800a27b 	.word	0x0800a27b
 800a1fc:	0800a2cf 	.word	0x0800a2cf
 800a200:	0800a2cf 	.word	0x0800a2cf
 800a204:	0800a2cf 	.word	0x0800a2cf
 800a208:	0800a28b 	.word	0x0800a28b
 800a20c:	0800a2cf 	.word	0x0800a2cf
 800a210:	0800a2cf 	.word	0x0800a2cf
 800a214:	0800a2cf 	.word	0x0800a2cf
 800a218:	0800a2cf 	.word	0x0800a2cf
 800a21c:	0800a2cf 	.word	0x0800a2cf
 800a220:	0800a2cf 	.word	0x0800a2cf
 800a224:	0800a2cf 	.word	0x0800a2cf
 800a228:	0800a29b 	.word	0x0800a29b
 800a22c:	0800a2cf 	.word	0x0800a2cf
 800a230:	0800a2cf 	.word	0x0800a2cf
 800a234:	0800a2cf 	.word	0x0800a2cf
 800a238:	0800a2cf 	.word	0x0800a2cf
 800a23c:	0800a2cf 	.word	0x0800a2cf
 800a240:	0800a2cf 	.word	0x0800a2cf
 800a244:	0800a2cf 	.word	0x0800a2cf
 800a248:	0800a2cf 	.word	0x0800a2cf
 800a24c:	0800a2cf 	.word	0x0800a2cf
 800a250:	0800a2cf 	.word	0x0800a2cf
 800a254:	0800a2cf 	.word	0x0800a2cf
 800a258:	0800a2cf 	.word	0x0800a2cf
 800a25c:	0800a2cf 	.word	0x0800a2cf
 800a260:	0800a2cf 	.word	0x0800a2cf
 800a264:	0800a2cf 	.word	0x0800a2cf
 800a268:	0800a2c1 	.word	0x0800a2c1
 800a26c:	2b40      	cmp	r3, #64	@ 0x40
 800a26e:	d02a      	beq.n	800a2c6 <UART_SetConfig+0x8aa>
 800a270:	e02d      	b.n	800a2ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a272:	f7fd fa69 	bl	8007748 <HAL_RCCEx_GetD3PCLK1Freq>
 800a276:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a278:	e02f      	b.n	800a2da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a27a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fd fa78 	bl	8007774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a288:	e027      	b.n	800a2da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28a:	f107 0318 	add.w	r3, r7, #24
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fd fbc4 	bl	8007a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a298:	e01f      	b.n	800a2da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a29a:	4b21      	ldr	r3, [pc, #132]	@ (800a320 <UART_SetConfig+0x904>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d009      	beq.n	800a2ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2a6:	4b1e      	ldr	r3, [pc, #120]	@ (800a320 <UART_SetConfig+0x904>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	08db      	lsrs	r3, r3, #3
 800a2ac:	f003 0303 	and.w	r3, r3, #3
 800a2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a328 <UART_SetConfig+0x90c>)
 800a2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2b8:	e00f      	b.n	800a2da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a2ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a328 <UART_SetConfig+0x90c>)
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2be:	e00c      	b.n	800a2da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a32c <UART_SetConfig+0x910>)
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c4:	e009      	b.n	800a2da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2cc:	e005      	b.n	800a2da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 81ee 	beq.w	800a6be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e6:	4a12      	ldr	r2, [pc, #72]	@ (800a330 <UART_SetConfig+0x914>)
 800a2e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2f4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	4413      	add	r3, r2
 800a300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a302:	429a      	cmp	r2, r3
 800a304:	d305      	bcc.n	800a312 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a30c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a30e:	429a      	cmp	r2, r3
 800a310:	d910      	bls.n	800a334 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a318:	e1d1      	b.n	800a6be <UART_SetConfig+0xca2>
 800a31a:	bf00      	nop
 800a31c:	40011c00 	.word	0x40011c00
 800a320:	58024400 	.word	0x58024400
 800a324:	58000c00 	.word	0x58000c00
 800a328:	03d09000 	.word	0x03d09000
 800a32c:	003d0900 	.word	0x003d0900
 800a330:	0800e5e4 	.word	0x0800e5e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	2200      	movs	r2, #0
 800a338:	60bb      	str	r3, [r7, #8]
 800a33a:	60fa      	str	r2, [r7, #12]
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a340:	4ac0      	ldr	r2, [pc, #768]	@ (800a644 <UART_SetConfig+0xc28>)
 800a342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a346:	b29b      	uxth	r3, r3
 800a348:	2200      	movs	r2, #0
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	607a      	str	r2, [r7, #4]
 800a34e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a356:	f7f6 f823 	bl	80003a0 <__aeabi_uldivmod>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4610      	mov	r0, r2
 800a360:	4619      	mov	r1, r3
 800a362:	f04f 0200 	mov.w	r2, #0
 800a366:	f04f 0300 	mov.w	r3, #0
 800a36a:	020b      	lsls	r3, r1, #8
 800a36c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a370:	0202      	lsls	r2, r0, #8
 800a372:	6979      	ldr	r1, [r7, #20]
 800a374:	6849      	ldr	r1, [r1, #4]
 800a376:	0849      	lsrs	r1, r1, #1
 800a378:	2000      	movs	r0, #0
 800a37a:	460c      	mov	r4, r1
 800a37c:	4605      	mov	r5, r0
 800a37e:	eb12 0804 	adds.w	r8, r2, r4
 800a382:	eb43 0905 	adc.w	r9, r3, r5
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	469a      	mov	sl, r3
 800a38e:	4693      	mov	fp, r2
 800a390:	4652      	mov	r2, sl
 800a392:	465b      	mov	r3, fp
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f6 f802 	bl	80003a0 <__aeabi_uldivmod>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3aa:	d308      	bcc.n	800a3be <UART_SetConfig+0x9a2>
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3b2:	d204      	bcs.n	800a3be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3ba:	60da      	str	r2, [r3, #12]
 800a3bc:	e17f      	b.n	800a6be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3c4:	e17b      	b.n	800a6be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3ce:	f040 80bd 	bne.w	800a54c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a3d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	dc48      	bgt.n	800a46c <UART_SetConfig+0xa50>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	db7b      	blt.n	800a4d6 <UART_SetConfig+0xaba>
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d879      	bhi.n	800a4d6 <UART_SetConfig+0xaba>
 800a3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e8 <UART_SetConfig+0x9cc>)
 800a3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e8:	0800a473 	.word	0x0800a473
 800a3ec:	0800a47b 	.word	0x0800a47b
 800a3f0:	0800a4d7 	.word	0x0800a4d7
 800a3f4:	0800a4d7 	.word	0x0800a4d7
 800a3f8:	0800a483 	.word	0x0800a483
 800a3fc:	0800a4d7 	.word	0x0800a4d7
 800a400:	0800a4d7 	.word	0x0800a4d7
 800a404:	0800a4d7 	.word	0x0800a4d7
 800a408:	0800a493 	.word	0x0800a493
 800a40c:	0800a4d7 	.word	0x0800a4d7
 800a410:	0800a4d7 	.word	0x0800a4d7
 800a414:	0800a4d7 	.word	0x0800a4d7
 800a418:	0800a4d7 	.word	0x0800a4d7
 800a41c:	0800a4d7 	.word	0x0800a4d7
 800a420:	0800a4d7 	.word	0x0800a4d7
 800a424:	0800a4d7 	.word	0x0800a4d7
 800a428:	0800a4a3 	.word	0x0800a4a3
 800a42c:	0800a4d7 	.word	0x0800a4d7
 800a430:	0800a4d7 	.word	0x0800a4d7
 800a434:	0800a4d7 	.word	0x0800a4d7
 800a438:	0800a4d7 	.word	0x0800a4d7
 800a43c:	0800a4d7 	.word	0x0800a4d7
 800a440:	0800a4d7 	.word	0x0800a4d7
 800a444:	0800a4d7 	.word	0x0800a4d7
 800a448:	0800a4d7 	.word	0x0800a4d7
 800a44c:	0800a4d7 	.word	0x0800a4d7
 800a450:	0800a4d7 	.word	0x0800a4d7
 800a454:	0800a4d7 	.word	0x0800a4d7
 800a458:	0800a4d7 	.word	0x0800a4d7
 800a45c:	0800a4d7 	.word	0x0800a4d7
 800a460:	0800a4d7 	.word	0x0800a4d7
 800a464:	0800a4d7 	.word	0x0800a4d7
 800a468:	0800a4c9 	.word	0x0800a4c9
 800a46c:	2b40      	cmp	r3, #64	@ 0x40
 800a46e:	d02e      	beq.n	800a4ce <UART_SetConfig+0xab2>
 800a470:	e031      	b.n	800a4d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a472:	f7fb ff7f 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 800a476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a478:	e033      	b.n	800a4e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a47a:	f7fb ff91 	bl	80063a0 <HAL_RCC_GetPCLK2Freq>
 800a47e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a480:	e02f      	b.n	800a4e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a486:	4618      	mov	r0, r3
 800a488:	f7fd f974 	bl	8007774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a490:	e027      	b.n	800a4e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a492:	f107 0318 	add.w	r3, r7, #24
 800a496:	4618      	mov	r0, r3
 800a498:	f7fd fac0 	bl	8007a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a0:	e01f      	b.n	800a4e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a2:	4b69      	ldr	r3, [pc, #420]	@ (800a648 <UART_SetConfig+0xc2c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4ae:	4b66      	ldr	r3, [pc, #408]	@ (800a648 <UART_SetConfig+0xc2c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	08db      	lsrs	r3, r3, #3
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	4a64      	ldr	r2, [pc, #400]	@ (800a64c <UART_SetConfig+0xc30>)
 800a4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4c0:	e00f      	b.n	800a4e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a4c2:	4b62      	ldr	r3, [pc, #392]	@ (800a64c <UART_SetConfig+0xc30>)
 800a4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c6:	e00c      	b.n	800a4e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4c8:	4b61      	ldr	r3, [pc, #388]	@ (800a650 <UART_SetConfig+0xc34>)
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4cc:	e009      	b.n	800a4e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	e005      	b.n	800a4e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a4e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80ea 	beq.w	800a6be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ee:	4a55      	ldr	r2, [pc, #340]	@ (800a644 <UART_SetConfig+0xc28>)
 800a4f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4fc:	005a      	lsls	r2, r3, #1
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	085b      	lsrs	r3, r3, #1
 800a504:	441a      	add	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a512:	2b0f      	cmp	r3, #15
 800a514:	d916      	bls.n	800a544 <UART_SetConfig+0xb28>
 800a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a51c:	d212      	bcs.n	800a544 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	b29b      	uxth	r3, r3
 800a522:	f023 030f 	bic.w	r3, r3, #15
 800a526:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	085b      	lsrs	r3, r3, #1
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	b29a      	uxth	r2, r3
 800a534:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a536:	4313      	orrs	r3, r2
 800a538:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a540:	60da      	str	r2, [r3, #12]
 800a542:	e0bc      	b.n	800a6be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a54a:	e0b8      	b.n	800a6be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a54c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a550:	2b20      	cmp	r3, #32
 800a552:	dc4b      	bgt.n	800a5ec <UART_SetConfig+0xbd0>
 800a554:	2b00      	cmp	r3, #0
 800a556:	f2c0 8087 	blt.w	800a668 <UART_SetConfig+0xc4c>
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	f200 8084 	bhi.w	800a668 <UART_SetConfig+0xc4c>
 800a560:	a201      	add	r2, pc, #4	@ (adr r2, 800a568 <UART_SetConfig+0xb4c>)
 800a562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a566:	bf00      	nop
 800a568:	0800a5f3 	.word	0x0800a5f3
 800a56c:	0800a5fb 	.word	0x0800a5fb
 800a570:	0800a669 	.word	0x0800a669
 800a574:	0800a669 	.word	0x0800a669
 800a578:	0800a603 	.word	0x0800a603
 800a57c:	0800a669 	.word	0x0800a669
 800a580:	0800a669 	.word	0x0800a669
 800a584:	0800a669 	.word	0x0800a669
 800a588:	0800a613 	.word	0x0800a613
 800a58c:	0800a669 	.word	0x0800a669
 800a590:	0800a669 	.word	0x0800a669
 800a594:	0800a669 	.word	0x0800a669
 800a598:	0800a669 	.word	0x0800a669
 800a59c:	0800a669 	.word	0x0800a669
 800a5a0:	0800a669 	.word	0x0800a669
 800a5a4:	0800a669 	.word	0x0800a669
 800a5a8:	0800a623 	.word	0x0800a623
 800a5ac:	0800a669 	.word	0x0800a669
 800a5b0:	0800a669 	.word	0x0800a669
 800a5b4:	0800a669 	.word	0x0800a669
 800a5b8:	0800a669 	.word	0x0800a669
 800a5bc:	0800a669 	.word	0x0800a669
 800a5c0:	0800a669 	.word	0x0800a669
 800a5c4:	0800a669 	.word	0x0800a669
 800a5c8:	0800a669 	.word	0x0800a669
 800a5cc:	0800a669 	.word	0x0800a669
 800a5d0:	0800a669 	.word	0x0800a669
 800a5d4:	0800a669 	.word	0x0800a669
 800a5d8:	0800a669 	.word	0x0800a669
 800a5dc:	0800a669 	.word	0x0800a669
 800a5e0:	0800a669 	.word	0x0800a669
 800a5e4:	0800a669 	.word	0x0800a669
 800a5e8:	0800a65b 	.word	0x0800a65b
 800a5ec:	2b40      	cmp	r3, #64	@ 0x40
 800a5ee:	d037      	beq.n	800a660 <UART_SetConfig+0xc44>
 800a5f0:	e03a      	b.n	800a668 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f2:	f7fb febf 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 800a5f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5f8:	e03c      	b.n	800a674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5fa:	f7fb fed1 	bl	80063a0 <HAL_RCC_GetPCLK2Freq>
 800a5fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a600:	e038      	b.n	800a674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a606:	4618      	mov	r0, r3
 800a608:	f7fd f8b4 	bl	8007774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a610:	e030      	b.n	800a674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a612:	f107 0318 	add.w	r3, r7, #24
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd fa00 	bl	8007a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a620:	e028      	b.n	800a674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a622:	4b09      	ldr	r3, [pc, #36]	@ (800a648 <UART_SetConfig+0xc2c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d012      	beq.n	800a654 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a62e:	4b06      	ldr	r3, [pc, #24]	@ (800a648 <UART_SetConfig+0xc2c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	08db      	lsrs	r3, r3, #3
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	4a04      	ldr	r2, [pc, #16]	@ (800a64c <UART_SetConfig+0xc30>)
 800a63a:	fa22 f303 	lsr.w	r3, r2, r3
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a640:	e018      	b.n	800a674 <UART_SetConfig+0xc58>
 800a642:	bf00      	nop
 800a644:	0800e5e4 	.word	0x0800e5e4
 800a648:	58024400 	.word	0x58024400
 800a64c:	03d09000 	.word	0x03d09000
 800a650:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a654:	4b24      	ldr	r3, [pc, #144]	@ (800a6e8 <UART_SetConfig+0xccc>)
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a658:	e00c      	b.n	800a674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a65a:	4b24      	ldr	r3, [pc, #144]	@ (800a6ec <UART_SetConfig+0xcd0>)
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a65e:	e009      	b.n	800a674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a666:	e005      	b.n	800a674 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a672:	bf00      	nop
    }

    if (pclk != 0U)
 800a674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d021      	beq.n	800a6be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67e:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f0 <UART_SetConfig+0xcd4>)
 800a680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a684:	461a      	mov	r2, r3
 800a686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a688:	fbb3 f2f2 	udiv	r2, r3, r2
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	441a      	add	r2, r3
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a0:	2b0f      	cmp	r3, #15
 800a6a2:	d909      	bls.n	800a6b8 <UART_SetConfig+0xc9c>
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6aa:	d205      	bcs.n	800a6b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60da      	str	r2, [r3, #12]
 800a6b6:	e002      	b.n	800a6be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3748      	adds	r7, #72	@ 0x48
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6e8:	03d09000 	.word	0x03d09000
 800a6ec:	003d0900 	.word	0x003d0900
 800a6f0:	0800e5e4 	.word	0x0800e5e4

0800a6f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00a      	beq.n	800a71e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00a      	beq.n	800a762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a788:	f003 0310 	and.w	r3, r3, #16
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00a      	beq.n	800a7a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01a      	beq.n	800a80a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7f2:	d10a      	bne.n	800a80a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00a      	beq.n	800a82c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	605a      	str	r2, [r3, #4]
  }
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b098      	sub	sp, #96	@ 0x60
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a848:	f7f7 fa08 	bl	8001c5c <HAL_GetTick>
 800a84c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d12f      	bne.n	800a8bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a85c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a864:	2200      	movs	r2, #0
 800a866:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f88e 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d022      	beq.n	800a8bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	e853 3f00 	ldrex	r3, [r3]
 800a882:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a88a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	461a      	mov	r2, r3
 800a892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a894:	647b      	str	r3, [r7, #68]	@ 0x44
 800a896:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a89a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e6      	bne.n	800a876 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e063      	b.n	800a984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d149      	bne.n	800a95e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f857 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d03c      	beq.n	800a95e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a902:	633b      	str	r3, [r7, #48]	@ 0x30
 800a904:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e6      	bne.n	800a8e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	60fb      	str	r3, [r7, #12]
   return(result);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f023 0301 	bic.w	r3, r3, #1
 800a92c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3308      	adds	r3, #8
 800a934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a936:	61fa      	str	r2, [r7, #28]
 800a938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	69b9      	ldr	r1, [r7, #24]
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	617b      	str	r3, [r7, #20]
   return(result);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e5      	bne.n	800a916 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e012      	b.n	800a984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3758      	adds	r7, #88	@ 0x58
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	4613      	mov	r3, r2
 800a99a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a99c:	e04f      	b.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a4:	d04b      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9a6:	f7f7 f959 	bl	8001c5c <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d302      	bcc.n	800a9bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e04e      	b.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0304 	and.w	r3, r3, #4
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d037      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b80      	cmp	r3, #128	@ 0x80
 800a9d2:	d034      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2b40      	cmp	r3, #64	@ 0x40
 800a9d8:	d031      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f003 0308 	and.w	r3, r3, #8
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d110      	bne.n	800aa0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2208      	movs	r2, #8
 800a9ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 f921 	bl	800ac38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2208      	movs	r2, #8
 800a9fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e029      	b.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa18:	d111      	bne.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 f907 	bl	800ac38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e00f      	b.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	69da      	ldr	r2, [r3, #28]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4013      	ands	r3, r2
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	bf0c      	ite	eq
 800aa4e:	2301      	moveq	r3, #1
 800aa50:	2300      	movne	r3, #0
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	461a      	mov	r2, r3
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d0a0      	beq.n	800a99e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b096      	sub	sp, #88	@ 0x58
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	4613      	mov	r3, r2
 800aa74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	88fa      	ldrh	r2, [r7, #6]
 800aa80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2222      	movs	r2, #34	@ 0x22
 800aa90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d02d      	beq.n	800aafa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaa4:	4a40      	ldr	r2, [pc, #256]	@ (800aba8 <UART_Start_Receive_DMA+0x140>)
 800aaa6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaae:	4a3f      	ldr	r2, [pc, #252]	@ (800abac <UART_Start_Receive_DMA+0x144>)
 800aab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aab8:	4a3d      	ldr	r2, [pc, #244]	@ (800abb0 <UART_Start_Receive_DMA+0x148>)
 800aaba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aac2:	2200      	movs	r2, #0
 800aac4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3324      	adds	r3, #36	@ 0x24
 800aad2:	4619      	mov	r1, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aad8:	461a      	mov	r2, r3
 800aada:	88fb      	ldrh	r3, [r7, #6]
 800aadc:	f7f7 fe04 	bl	80026e8 <HAL_DMA_Start_IT>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2210      	movs	r2, #16
 800aaea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e051      	b.n	800ab9e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d018      	beq.n	800ab34 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab0a:	e853 3f00 	ldrex	r3, [r3]
 800ab0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab16:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab22:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ab2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e6      	bne.n	800ab02 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3308      	adds	r3, #8
 800ab3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3308      	adds	r3, #8
 800ab52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab54:	637a      	str	r2, [r7, #52]	@ 0x34
 800ab56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ab62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e5      	bne.n	800ab34 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	e853 3f00 	ldrex	r3, [r3]
 800ab76:	613b      	str	r3, [r7, #16]
   return(result);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3308      	adds	r3, #8
 800ab86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab88:	623a      	str	r2, [r7, #32]
 800ab8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	6a3a      	ldr	r2, [r7, #32]
 800ab90:	e841 2300 	strex	r3, r2, [r1]
 800ab94:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1e5      	bne.n	800ab68 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3758      	adds	r7, #88	@ 0x58
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	0800ad05 	.word	0x0800ad05
 800abac:	0800ae2d 	.word	0x0800ae2d
 800abb0:	0800ae6b 	.word	0x0800ae6b

0800abb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b08f      	sub	sp, #60	@ 0x3c
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	e853 3f00 	ldrex	r3, [r3]
 800abc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800abd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abdc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e6      	bne.n	800abbc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3308      	adds	r3, #8
 800abf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	60bb      	str	r3, [r7, #8]
   return(result);
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac04:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac0e:	61ba      	str	r2, [r7, #24]
 800ac10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6979      	ldr	r1, [r7, #20]
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e5      	bne.n	800abee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2220      	movs	r2, #32
 800ac26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ac2a:	bf00      	nop
 800ac2c:	373c      	adds	r7, #60	@ 0x3c
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
	...

0800ac38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b095      	sub	sp, #84	@ 0x54
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac48:	e853 3f00 	ldrex	r3, [r3]
 800ac4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac66:	e841 2300 	strex	r3, r2, [r1]
 800ac6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e6      	bne.n	800ac40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3308      	adds	r3, #8
 800ac78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	4b1e      	ldr	r3, [pc, #120]	@ (800ad00 <UART_EndRxTransfer+0xc8>)
 800ac86:	4013      	ands	r3, r2
 800ac88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3308      	adds	r3, #8
 800ac90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e5      	bne.n	800ac72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d118      	bne.n	800ace0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	e853 3f00 	ldrex	r3, [r3]
 800acba:	60bb      	str	r3, [r7, #8]
   return(result);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f023 0310 	bic.w	r3, r3, #16
 800acc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800accc:	61bb      	str	r3, [r7, #24]
 800acce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	6979      	ldr	r1, [r7, #20]
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	e841 2300 	strex	r3, r2, [r1]
 800acd8:	613b      	str	r3, [r7, #16]
   return(result);
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e6      	bne.n	800acae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2220      	movs	r2, #32
 800ace4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800acf4:	bf00      	nop
 800acf6:	3754      	adds	r7, #84	@ 0x54
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr
 800ad00:	effffffe 	.word	0xeffffffe

0800ad04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b09c      	sub	sp, #112	@ 0x70
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad10:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad1a:	d071      	beq.n	800ae00 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ad1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e6      	bne.n	800ad24 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad68:	f023 0301 	bic.w	r3, r3, #1
 800ad6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad76:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e5      	bne.n	800ad56 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3308      	adds	r3, #8
 800ad90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	623b      	str	r3, [r7, #32]
   return(result);
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ada0:	663b      	str	r3, [r7, #96]	@ 0x60
 800ada2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3308      	adds	r3, #8
 800ada8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800adaa:	633a      	str	r2, [r7, #48]	@ 0x30
 800adac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e5      	bne.n	800ad8a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d118      	bne.n	800ae00 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	e853 3f00 	ldrex	r3, [r3]
 800adda:	60fb      	str	r3, [r7, #12]
   return(result);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f023 0310 	bic.w	r3, r3, #16
 800ade2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ade4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adec:	61fb      	str	r3, [r7, #28]
 800adee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	69b9      	ldr	r1, [r7, #24]
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	617b      	str	r3, [r7, #20]
   return(result);
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e6      	bne.n	800adce <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae02:	2200      	movs	r2, #0
 800ae04:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d107      	bne.n	800ae1e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae14:	4619      	mov	r1, r3
 800ae16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae18:	f7f5 ff94 	bl	8000d44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae1c:	e002      	b.n	800ae24 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ae1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae20:	f7fe fdde 	bl	80099e0 <HAL_UART_RxCpltCallback>
}
 800ae24:	bf00      	nop
 800ae26:	3770      	adds	r7, #112	@ 0x70
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d109      	bne.n	800ae5c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae4e:	085b      	lsrs	r3, r3, #1
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	4619      	mov	r1, r3
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7f5 ff75 	bl	8000d44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae5a:	e002      	b.n	800ae62 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f7fe fdc9 	bl	80099f4 <HAL_UART_RxHalfCpltCallback>
}
 800ae62:	bf00      	nop
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b086      	sub	sp, #24
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae76:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae92:	2b80      	cmp	r3, #128	@ 0x80
 800ae94:	d109      	bne.n	800aeaa <UART_DMAError+0x40>
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b21      	cmp	r3, #33	@ 0x21
 800ae9a:	d106      	bne.n	800aeaa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800aea4:	6978      	ldr	r0, [r7, #20]
 800aea6:	f7ff fe85 	bl	800abb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb4:	2b40      	cmp	r3, #64	@ 0x40
 800aeb6:	d109      	bne.n	800aecc <UART_DMAError+0x62>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b22      	cmp	r3, #34	@ 0x22
 800aebc:	d106      	bne.n	800aecc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800aec6:	6978      	ldr	r0, [r7, #20]
 800aec8:	f7ff feb6 	bl	800ac38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aed2:	f043 0210 	orr.w	r2, r3, #16
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aedc:	6978      	ldr	r0, [r7, #20]
 800aede:	f7fe fd93 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aee2:	bf00      	nop
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7fe fd81 	bl	8009a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b088      	sub	sp, #32
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	60bb      	str	r3, [r7, #8]
   return(result);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af2a:	61fb      	str	r3, [r7, #28]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	461a      	mov	r2, r3
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6979      	ldr	r1, [r7, #20]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	613b      	str	r3, [r7, #16]
   return(result);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e6      	bne.n	800af16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7fe fd38 	bl	80099cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af5c:	bf00      	nop
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d101      	bne.n	800afb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800afb2:	2302      	movs	r3, #2
 800afb4:	e027      	b.n	800b006 <HAL_UARTEx_DisableFifoMode+0x66>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2224      	movs	r2, #36	@ 0x24
 800afc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f022 0201 	bic.w	r2, r2, #1
 800afdc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800afe4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2220      	movs	r2, #32
 800aff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b022:	2b01      	cmp	r3, #1
 800b024:	d101      	bne.n	800b02a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b026:	2302      	movs	r3, #2
 800b028:	e02d      	b.n	800b086 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2224      	movs	r2, #36	@ 0x24
 800b036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0201 	bic.w	r2, r2, #1
 800b050:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	430a      	orrs	r2, r1
 800b064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f8a4 	bl	800b1b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2220      	movs	r2, #32
 800b078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d101      	bne.n	800b0a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	e02d      	b.n	800b102 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2224      	movs	r2, #36	@ 0x24
 800b0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f022 0201 	bic.w	r2, r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f866 	bl	800b1b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2220      	movs	r2, #32
 800b0f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b08c      	sub	sp, #48	@ 0x30
 800b10e:	af00      	add	r7, sp, #0
 800b110:	60f8      	str	r0, [r7, #12]
 800b112:	60b9      	str	r1, [r7, #8]
 800b114:	4613      	mov	r3, r2
 800b116:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d142      	bne.n	800b1a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b128:	88fb      	ldrh	r3, [r7, #6]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e03b      	b.n	800b1aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2201      	movs	r2, #1
 800b136:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b13e:	88fb      	ldrh	r3, [r7, #6]
 800b140:	461a      	mov	r2, r3
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7ff fc8f 	bl	800aa68 <UART_Start_Receive_DMA>
 800b14a:	4603      	mov	r3, r0
 800b14c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b150:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b154:	2b00      	cmp	r3, #0
 800b156:	d124      	bne.n	800b1a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d11d      	bne.n	800b19c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2210      	movs	r2, #16
 800b166:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	617b      	str	r3, [r7, #20]
   return(result);
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f043 0310 	orr.w	r3, r3, #16
 800b17c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b186:	627b      	str	r3, [r7, #36]	@ 0x24
 800b188:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6a39      	ldr	r1, [r7, #32]
 800b18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	61fb      	str	r3, [r7, #28]
   return(result);
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e6      	bne.n	800b168 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b19a:	e002      	b.n	800b1a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1a6:	e000      	b.n	800b1aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b1a8:	2302      	movs	r3, #2
  }
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3730      	adds	r7, #48	@ 0x30
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d108      	bne.n	800b1d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1d4:	e031      	b.n	800b23a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1d6:	2310      	movs	r3, #16
 800b1d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1da:	2310      	movs	r3, #16
 800b1dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	0e5b      	lsrs	r3, r3, #25
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	0f5b      	lsrs	r3, r3, #29
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	7b3a      	ldrb	r2, [r7, #12]
 800b202:	4911      	ldr	r1, [pc, #68]	@ (800b248 <UARTEx_SetNbDataToProcess+0x94>)
 800b204:	5c8a      	ldrb	r2, [r1, r2]
 800b206:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b20a:	7b3a      	ldrb	r2, [r7, #12]
 800b20c:	490f      	ldr	r1, [pc, #60]	@ (800b24c <UARTEx_SetNbDataToProcess+0x98>)
 800b20e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b210:	fb93 f3f2 	sdiv	r3, r3, r2
 800b214:	b29a      	uxth	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
 800b21e:	7b7a      	ldrb	r2, [r7, #13]
 800b220:	4909      	ldr	r1, [pc, #36]	@ (800b248 <UARTEx_SetNbDataToProcess+0x94>)
 800b222:	5c8a      	ldrb	r2, [r1, r2]
 800b224:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b228:	7b7a      	ldrb	r2, [r7, #13]
 800b22a:	4908      	ldr	r1, [pc, #32]	@ (800b24c <UARTEx_SetNbDataToProcess+0x98>)
 800b22c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b22e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b232:	b29a      	uxth	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	0800e5fc 	.word	0x0800e5fc
 800b24c:	0800e604 	.word	0x0800e604

0800b250 <split_color_array>:

}

//this shit is need to have the output image with the right color
void split_color_array(const uint16_t *input, uint8_t *output, size_t length)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
	for (size_t i = 0; i < length; ++i)
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	e01b      	b.n	800b29a <split_color_array+0x4a>
	{
		output[2 * i] = COLOR_HIGH_BYTE(input[i]);  // High byte first
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	0a1b      	lsrs	r3, r3, #8
 800b26e:	b299      	uxth	r1, r3
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	4413      	add	r3, r2
 800b278:	b2ca      	uxtb	r2, r1
 800b27a:	701a      	strb	r2, [r3, #0]
		output[2 * i + 1] = COLOR_LOW_BYTE(input[i]);   // Then low byte
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	4413      	add	r3, r2
 800b284:	8819      	ldrh	r1, [r3, #0]
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	3301      	adds	r3, #1
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	4413      	add	r3, r2
 800b290:	b2ca      	uxtb	r2, r1
 800b292:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; ++i)
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	3301      	adds	r3, #1
 800b298:	617b      	str	r3, [r7, #20]
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d3df      	bcc.n	800b262 <split_color_array+0x12>
	}
}
 800b2a2:	bf00      	nop
 800b2a4:	bf00      	nop
 800b2a6:	371c      	adds	r7, #28
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <Display_Image>:

void Display_Image(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t *img,size_t pixel_count)
{
 800b2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	b089      	sub	sp, #36	@ 0x24
 800b2b6:	af02      	add	r7, sp, #8
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	4611      	mov	r1, r2
 800b2be:	461a      	mov	r2, r3
 800b2c0:	4633      	mov	r3, r6
 800b2c2:	80fb      	strh	r3, [r7, #6]
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	80bb      	strh	r3, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	807b      	strh	r3, [r7, #2]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	803b      	strh	r3, [r7, #0]
 800b2d0:	466b      	mov	r3, sp
 800b2d2:	461e      	mov	r6, r3
	// We use the fixed size from the image data now
	uint16_t img_x = x_center - (x_width / 2);
 800b2d4:	887b      	ldrh	r3, [r7, #2]
 800b2d6:	085b      	lsrs	r3, r3, #1
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	88fa      	ldrh	r2, [r7, #6]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	82fb      	strh	r3, [r7, #22]
	uint16_t img_y = y_center - (y_width / 2);
 800b2e0:	883b      	ldrh	r3, [r7, #0]
 800b2e2:	085b      	lsrs	r3, r3, #1
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	88ba      	ldrh	r2, [r7, #4]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	82bb      	strh	r3, [r7, #20]

	uint8_t result[pixel_count * 2];
 800b2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ee:	0059      	lsls	r1, r3, #1
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	613b      	str	r3, [r7, #16]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4688      	mov	r8, r1
 800b2fa:	4699      	mov	r9, r3
 800b2fc:	f04f 0200 	mov.w	r2, #0
 800b300:	f04f 0300 	mov.w	r3, #0
 800b304:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b308:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b30c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b310:	2300      	movs	r3, #0
 800b312:	460c      	mov	r4, r1
 800b314:	461d      	mov	r5, r3
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	f04f 0300 	mov.w	r3, #0
 800b31e:	00eb      	lsls	r3, r5, #3
 800b320:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b324:	00e2      	lsls	r2, r4, #3
 800b326:	1dcb      	adds	r3, r1, #7
 800b328:	08db      	lsrs	r3, r3, #3
 800b32a:	00db      	lsls	r3, r3, #3
 800b32c:	ebad 0d03 	sub.w	sp, sp, r3
 800b330:	ab02      	add	r3, sp, #8
 800b332:	3300      	adds	r3, #0
 800b334:	60fb      	str	r3, [r7, #12]

	//lenght of the array
	split_color_array(img, result,
 800b336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b338:	085b      	lsrs	r3, r3, #1
 800b33a:	461a      	mov	r2, r3
 800b33c:	68f9      	ldr	r1, [r7, #12]
 800b33e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b340:	f7ff ff86 	bl	800b250 <split_color_array>
			pixel_count/ sizeof(uint16_t));

	ST7789_DrawImage(img_x, img_y, x_width, y_width, result);
 800b344:	883c      	ldrh	r4, [r7, #0]
 800b346:	887a      	ldrh	r2, [r7, #2]
 800b348:	8ab9      	ldrh	r1, [r7, #20]
 800b34a:	8af8      	ldrh	r0, [r7, #22]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	4623      	mov	r3, r4
 800b352:	f000 faad 	bl	800b8b0 <ST7789_DrawImage>
 800b356:	46b5      	mov	sp, r6
}
 800b358:	bf00      	nop
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800b364 <Display_EnvironnementData>:
	ST7789_WriteString(x_center + text_x_offset, y_center + text_y_offset, buf, Font_11x18, RED, BLACK);
	Display_DrawHeart(x_center, y_center);
}

void Display_EnvironnementData(uint16_t x, uint16_t y,const SmartWatchData_t* pData)
{
 800b364:	b5b0      	push	{r4, r5, r7, lr}
 800b366:	b092      	sub	sp, #72	@ 0x48
 800b368:	af04      	add	r7, sp, #16
 800b36a:	4603      	mov	r3, r0
 800b36c:	603a      	str	r2, [r7, #0]
 800b36e:	80fb      	strh	r3, [r7, #6]
 800b370:	460b      	mov	r3, r1
 800b372:	80bb      	strh	r3, [r7, #4]
	//uint8_t hr = SmartWatchData_handle.heart_rate;
	uint16_t temp = pData->temperature;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	edd3 7a00 	vldr	s15, [r3]
 800b37a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b37e:	ee17 3a90 	vmov	r3, s15
 800b382:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16_t pressure = pData->pressure;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	edd3 7a01 	vldr	s15, [r3, #4]
 800b38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b38e:	ee17 3a90 	vmov	r3, s15
 800b392:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t humidity = pData->humidity;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	edd3 7a02 	vldr	s15, [r3, #8]
 800b39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b39e:	ee17 3a90 	vmov	r3, s15
 800b3a2:	867b      	strh	r3, [r7, #50]	@ 0x32


	temp = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	pressure = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
	humidity = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	867b      	strh	r3, [r7, #50]	@ 0x32

	char buf[32];
	snprintf(buf, sizeof(buf), " T :%d, P : %d, H : %d", temp, pressure,
 800b3b0:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 800b3b2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b3b4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b3b6:	f107 0008 	add.w	r0, r7, #8
 800b3ba:	9201      	str	r2, [sp, #4]
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4a0e      	ldr	r2, [pc, #56]	@ (800b3fc <Display_EnvironnementData+0x98>)
 800b3c2:	2120      	movs	r1, #32
 800b3c4:	f000 ffbc 	bl	800c340 <sniprintf>
			humidity);

	//for coorect rendering of both text and heart
	int text_x_offset = 30;
 800b3c8:	231e      	movs	r3, #30
 800b3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int text_y_offset = -5;
 800b3cc:	f06f 0304 	mvn.w	r3, #4
 800b3d0:	62bb      	str	r3, [r7, #40]	@ 0x28

//	ST7789_WriteString(x + text_x_offset, y + text_y_offset, buf, Font_11x18, GREEN, BLACK);
//	Display_DrawThermo(x,y);
	Display_RenderAnimation(x,y,weather_animation_width,weather_animation_height,weather_gif_array,weather_gif_array_LEN,weather_gif_frame_pixel_count);
 800b3d2:	2430      	movs	r4, #48	@ 0x30
 800b3d4:	2530      	movs	r5, #48	@ 0x30
 800b3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b400 <Display_EnvironnementData+0x9c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	4a09      	ldr	r2, [pc, #36]	@ (800b404 <Display_EnvironnementData+0xa0>)
 800b3de:	6812      	ldr	r2, [r2, #0]
 800b3e0:	88b9      	ldrh	r1, [r7, #4]
 800b3e2:	88f8      	ldrh	r0, [r7, #6]
 800b3e4:	9202      	str	r2, [sp, #8]
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	4b07      	ldr	r3, [pc, #28]	@ (800b408 <Display_EnvironnementData+0xa4>)
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	462b      	mov	r3, r5
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	f000 f80c 	bl	800b40c <Display_RenderAnimation>

}
 800b3f4:	bf00      	nop
 800b3f6:	3738      	adds	r7, #56	@ 0x38
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b3fc:	0800e50c 	.word	0x0800e50c
 800b400:	08035c0c 	.word	0x08035c0c
 800b404:	08035c10 	.word	0x08035c10
 800b408:	24000010 	.word	0x24000010

0800b40c <Display_RenderAnimation>:

// --- Animation Function ---
// This function should be called repeatedly (e.g., from the main loop or Display_Update)
// when the animation needs to be displayed.
void Display_RenderAnimation(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t **frame_array,uint8_t animation_frame_array_len,size_t pixel_count)
{
 800b40c:	b590      	push	{r4, r7, lr}
 800b40e:	b087      	sub	sp, #28
 800b410:	af02      	add	r7, sp, #8
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4623      	mov	r3, r4
 800b41c:	80fb      	strh	r3, [r7, #6]
 800b41e:	4603      	mov	r3, r0
 800b420:	80bb      	strh	r3, [r7, #4]
 800b422:	460b      	mov	r3, r1
 800b424:	807b      	strh	r3, [r7, #2]
 800b426:	4613      	mov	r3, r2
 800b428:	803b      	strh	r3, [r7, #0]
    uint32_t current_tick = HAL_GetTick();
 800b42a:	f7f6 fc17 	bl	8001c5c <HAL_GetTick>
 800b42e:	60f8      	str	r0, [r7, #12]

    // Check if it's time to update the frame
    if (current_tick - s_animation_last_update_tick >= ANIMATION_FRAME_DELAY_MS) {
 800b430:	4b16      	ldr	r3, [pc, #88]	@ (800b48c <Display_RenderAnimation+0x80>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	2b4f      	cmp	r3, #79	@ 0x4f
 800b43a:	d923      	bls.n	800b484 <Display_RenderAnimation+0x78>
        s_animation_last_update_tick = current_tick;
 800b43c:	4a13      	ldr	r2, [pc, #76]	@ (800b48c <Display_RenderAnimation+0x80>)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6013      	str	r3, [r2, #0]

        // Get the pointer to the current frame data
        const uint16_t* frame_data = frame_array[s_animation_current_frame];
 800b442:	4b13      	ldr	r3, [pc, #76]	@ (800b490 <Display_RenderAnimation+0x84>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	6a3a      	ldr	r2, [r7, #32]
 800b44a:	4413      	add	r3, r2
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	60bb      	str	r3, [r7, #8]
    	Display_Image(x_center,y_center,x_width,y_width,frame_data,pixel_count );
 800b450:	883c      	ldrh	r4, [r7, #0]
 800b452:	887a      	ldrh	r2, [r7, #2]
 800b454:	88b9      	ldrh	r1, [r7, #4]
 800b456:	88f8      	ldrh	r0, [r7, #6]
 800b458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	4623      	mov	r3, r4
 800b462:	f7ff ff25 	bl	800b2b0 <Display_Image>

        // Advance to the next frame
        s_animation_current_frame++;
 800b466:	4b0a      	ldr	r3, [pc, #40]	@ (800b490 <Display_RenderAnimation+0x84>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	3301      	adds	r3, #1
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	4b08      	ldr	r3, [pc, #32]	@ (800b490 <Display_RenderAnimation+0x84>)
 800b470:	701a      	strb	r2, [r3, #0]
        if (s_animation_current_frame >= animation_frame_array_len) {
 800b472:	4b07      	ldr	r3, [pc, #28]	@ (800b490 <Display_RenderAnimation+0x84>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d802      	bhi.n	800b484 <Display_RenderAnimation+0x78>
            s_animation_current_frame = 0; // Loop back to the beginning
 800b47e:	4b04      	ldr	r3, [pc, #16]	@ (800b490 <Display_RenderAnimation+0x84>)
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
        }
    }
    // If not enough time has passed, do nothing, the previous frame remains displayed.
}
 800b484:	bf00      	nop
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd90      	pop	{r4, r7, pc}
 800b48c:	240009d8 	.word	0x240009d8
 800b490:	240009d4 	.word	0x240009d4

0800b494 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4a4:	480c      	ldr	r0, [pc, #48]	@ (800b4d8 <ST7789_WriteCommand+0x44>)
 800b4a6:	f7f9 fe2b 	bl	8005100 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b4b0:	480a      	ldr	r0, [pc, #40]	@ (800b4dc <ST7789_WriteCommand+0x48>)
 800b4b2:	f7f9 fe25 	bl	8005100 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b4b6:	1df9      	adds	r1, r7, #7
 800b4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4bc:	2201      	movs	r2, #1
 800b4be:	4808      	ldr	r0, [pc, #32]	@ (800b4e0 <ST7789_WriteCommand+0x4c>)
 800b4c0:	f7fc fe88 	bl	80081d4 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4ca:	4803      	ldr	r0, [pc, #12]	@ (800b4d8 <ST7789_WriteCommand+0x44>)
 800b4cc:	f7f9 fe18 	bl	8005100 <HAL_GPIO_WritePin>
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	58021800 	.word	0x58021800
 800b4dc:	58020c00 	.word	0x58020c00
 800b4e0:	24000430 	.word	0x24000430

0800b4e4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4f4:	4820      	ldr	r0, [pc, #128]	@ (800b578 <ST7789_WriteData+0x94>)
 800b4f6:	f7f9 fe03 	bl	8005100 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b500:	481e      	ldr	r0, [pc, #120]	@ (800b57c <ST7789_WriteData+0x98>)
 800b502:	f7f9 fdfd 	bl	8005100 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800b506:	e02a      	b.n	800b55e <ST7789_WriteData+0x7a>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b50e:	4293      	cmp	r3, r2
 800b510:	bf28      	it	cs
 800b512:	4613      	movcs	r3, r2
 800b514:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800b516:	4b1a      	ldr	r3, [pc, #104]	@ (800b580 <ST7789_WriteData+0x9c>)
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	4293      	cmp	r3, r2
 800b520:	d30e      	bcc.n	800b540 <ST7789_WriteData+0x5c>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800b522:	89fb      	ldrh	r3, [r7, #14]
 800b524:	461a      	mov	r2, r3
 800b526:	6879      	ldr	r1, [r7, #4]
 800b528:	4816      	ldr	r0, [pc, #88]	@ (800b584 <ST7789_WriteData+0xa0>)
 800b52a:	f7fd f841 	bl	80085b0 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800b52e:	bf00      	nop
 800b530:	4b14      	ldr	r3, [pc, #80]	@ (800b584 <ST7789_WriteData+0xa0>)
 800b532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d1f8      	bne.n	800b530 <ST7789_WriteData+0x4c>
 800b53e:	e006      	b.n	800b54e <ST7789_WriteData+0x6a>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800b540:	89fa      	ldrh	r2, [r7, #14]
 800b542:	f04f 33ff 	mov.w	r3, #4294967295
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	480e      	ldr	r0, [pc, #56]	@ (800b584 <ST7789_WriteData+0xa0>)
 800b54a:	f7fc fe43 	bl	80081d4 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 800b54e:	89fb      	ldrh	r3, [r7, #14]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	4413      	add	r3, r2
 800b554:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800b556:	89fb      	ldrh	r3, [r7, #14]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1d1      	bne.n	800b508 <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 800b564:	2201      	movs	r2, #1
 800b566:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b56a:	4803      	ldr	r0, [pc, #12]	@ (800b578 <ST7789_WriteData+0x94>)
 800b56c:	f7f9 fdc8 	bl	8005100 <HAL_GPIO_WritePin>
}
 800b570:	bf00      	nop
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	58021800 	.word	0x58021800
 800b57c:	58020c00 	.word	0x58020c00
 800b580:	2400009c 	.word	0x2400009c
 800b584:	24000430 	.word	0x24000430

0800b588 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800b592:	2200      	movs	r2, #0
 800b594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b598:	480c      	ldr	r0, [pc, #48]	@ (800b5cc <ST7789_WriteSmallData+0x44>)
 800b59a:	f7f9 fdb1 	bl	8005100 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b5a4:	480a      	ldr	r0, [pc, #40]	@ (800b5d0 <ST7789_WriteSmallData+0x48>)
 800b5a6:	f7f9 fdab 	bl	8005100 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800b5aa:	1df9      	adds	r1, r7, #7
 800b5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	4808      	ldr	r0, [pc, #32]	@ (800b5d4 <ST7789_WriteSmallData+0x4c>)
 800b5b4:	f7fc fe0e 	bl	80081d4 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b5be:	4803      	ldr	r0, [pc, #12]	@ (800b5cc <ST7789_WriteSmallData+0x44>)
 800b5c0:	f7f9 fd9e 	bl	8005100 <HAL_GPIO_WritePin>
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	58021800 	.word	0x58021800
 800b5d0:	58020c00 	.word	0x58020c00
 800b5d4:	24000430 	.word	0x24000430

0800b5d8 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800b5e2:	2036      	movs	r0, #54	@ 0x36
 800b5e4:	f7ff ff56 	bl	800b494 <ST7789_WriteCommand>
	switch (m) {
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d81a      	bhi.n	800b624 <ST7789_SetRotation+0x4c>
 800b5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <ST7789_SetRotation+0x1c>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b605 	.word	0x0800b605
 800b5f8:	0800b60d 	.word	0x0800b60d
 800b5fc:	0800b615 	.word	0x0800b615
 800b600:	0800b61d 	.word	0x0800b61d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800b604:	20c0      	movs	r0, #192	@ 0xc0
 800b606:	f7ff ffbf 	bl	800b588 <ST7789_WriteSmallData>
		break;
 800b60a:	e00c      	b.n	800b626 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800b60c:	20a0      	movs	r0, #160	@ 0xa0
 800b60e:	f7ff ffbb 	bl	800b588 <ST7789_WriteSmallData>
		break;
 800b612:	e008      	b.n	800b626 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800b614:	2000      	movs	r0, #0
 800b616:	f7ff ffb7 	bl	800b588 <ST7789_WriteSmallData>
		break;
 800b61a:	e004      	b.n	800b626 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800b61c:	2060      	movs	r0, #96	@ 0x60
 800b61e:	f7ff ffb3 	bl	800b588 <ST7789_WriteSmallData>
		break;
 800b622:	e000      	b.n	800b626 <ST7789_SetRotation+0x4e>
	default:
		break;
 800b624:	bf00      	nop
	}
}
 800b626:	bf00      	nop
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop

0800b630 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	4611      	mov	r1, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	4623      	mov	r3, r4
 800b640:	80fb      	strh	r3, [r7, #6]
 800b642:	4603      	mov	r3, r0
 800b644:	80bb      	strh	r3, [r7, #4]
 800b646:	460b      	mov	r3, r1
 800b648:	807b      	strh	r3, [r7, #2]
 800b64a:	4613      	mov	r3, r2
 800b64c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800b64e:	2200      	movs	r2, #0
 800b650:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b654:	4825      	ldr	r0, [pc, #148]	@ (800b6ec <ST7789_SetAddressWindow+0xbc>)
 800b656:	f7f9 fd53 	bl	8005100 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	82fb      	strh	r3, [r7, #22]
 800b65e:	887b      	ldrh	r3, [r7, #2]
 800b660:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800b662:	88bb      	ldrh	r3, [r7, #4]
 800b664:	3323      	adds	r3, #35	@ 0x23
 800b666:	827b      	strh	r3, [r7, #18]
 800b668:	883b      	ldrh	r3, [r7, #0]
 800b66a:	3323      	adds	r3, #35	@ 0x23
 800b66c:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800b66e:	202a      	movs	r0, #42	@ 0x2a
 800b670:	f7ff ff10 	bl	800b494 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800b674:	8afb      	ldrh	r3, [r7, #22]
 800b676:	0a1b      	lsrs	r3, r3, #8
 800b678:	b29b      	uxth	r3, r3
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	733b      	strb	r3, [r7, #12]
 800b67e:	8afb      	ldrh	r3, [r7, #22]
 800b680:	b2db      	uxtb	r3, r3
 800b682:	737b      	strb	r3, [r7, #13]
 800b684:	8abb      	ldrh	r3, [r7, #20]
 800b686:	0a1b      	lsrs	r3, r3, #8
 800b688:	b29b      	uxth	r3, r3
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	73bb      	strb	r3, [r7, #14]
 800b68e:	8abb      	ldrh	r3, [r7, #20]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800b694:	f107 030c 	add.w	r3, r7, #12
 800b698:	2104      	movs	r1, #4
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff ff22 	bl	800b4e4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800b6a0:	202b      	movs	r0, #43	@ 0x2b
 800b6a2:	f7ff fef7 	bl	800b494 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800b6a6:	8a7b      	ldrh	r3, [r7, #18]
 800b6a8:	0a1b      	lsrs	r3, r3, #8
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	723b      	strb	r3, [r7, #8]
 800b6b0:	8a7b      	ldrh	r3, [r7, #18]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	727b      	strb	r3, [r7, #9]
 800b6b6:	8a3b      	ldrh	r3, [r7, #16]
 800b6b8:	0a1b      	lsrs	r3, r3, #8
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	72bb      	strb	r3, [r7, #10]
 800b6c0:	8a3b      	ldrh	r3, [r7, #16]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	2104      	movs	r1, #4
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff ff09 	bl	800b4e4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800b6d2:	202c      	movs	r0, #44	@ 0x2c
 800b6d4:	f7ff fede 	bl	800b494 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b6de:	4803      	ldr	r0, [pc, #12]	@ (800b6ec <ST7789_SetAddressWindow+0xbc>)
 800b6e0:	f7f9 fd0e 	bl	8005100 <HAL_GPIO_WritePin>
}
 800b6e4:	bf00      	nop
 800b6e6:	371c      	adds	r7, #28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd90      	pop	{r4, r7, pc}
 800b6ec:	58021800 	.word	0x58021800

0800b6f0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800b6f0:	b590      	push	{r4, r7, lr}
 800b6f2:	b08b      	sub	sp, #44	@ 0x2c
 800b6f4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800b6f6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	484c      	ldr	r0, [pc, #304]	@ (800b830 <ST7789_Init+0x140>)
 800b6fe:	f000 fe98 	bl	800c432 <memset>
	#endif
	HAL_Delay(10);
 800b702:	200a      	movs	r0, #10
 800b704:	f7f6 fab6 	bl	8001c74 <HAL_Delay>
    ST7789_RST_Clr();
 800b708:	2200      	movs	r2, #0
 800b70a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b70e:	4849      	ldr	r0, [pc, #292]	@ (800b834 <ST7789_Init+0x144>)
 800b710:	f7f9 fcf6 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800b714:	200a      	movs	r0, #10
 800b716:	f7f6 faad 	bl	8001c74 <HAL_Delay>
    ST7789_RST_Set();
 800b71a:	2201      	movs	r2, #1
 800b71c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b720:	4844      	ldr	r0, [pc, #272]	@ (800b834 <ST7789_Init+0x144>)
 800b722:	f7f9 fced 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800b726:	2014      	movs	r0, #20
 800b728:	f7f6 faa4 	bl	8001c74 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800b72c:	203a      	movs	r0, #58	@ 0x3a
 800b72e:	f7ff feb1 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800b732:	2055      	movs	r0, #85	@ 0x55
 800b734:	f7ff ff28 	bl	800b588 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800b738:	20b2      	movs	r0, #178	@ 0xb2
 800b73a:	f7ff feab 	bl	800b494 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800b73e:	4a3e      	ldr	r2, [pc, #248]	@ (800b838 <ST7789_Init+0x148>)
 800b740:	f107 0320 	add.w	r3, r7, #32
 800b744:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b748:	6018      	str	r0, [r3, #0]
 800b74a:	3304      	adds	r3, #4
 800b74c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800b74e:	f107 0320 	add.w	r3, r7, #32
 800b752:	2105      	movs	r1, #5
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff fec5 	bl	800b4e4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800b75a:	2003      	movs	r0, #3
 800b75c:	f7ff ff3c 	bl	800b5d8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800b760:	20b7      	movs	r0, #183	@ 0xb7
 800b762:	f7ff fe97 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800b766:	2035      	movs	r0, #53	@ 0x35
 800b768:	f7ff ff0e 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800b76c:	20bb      	movs	r0, #187	@ 0xbb
 800b76e:	f7ff fe91 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800b772:	2019      	movs	r0, #25
 800b774:	f7ff ff08 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800b778:	20c0      	movs	r0, #192	@ 0xc0
 800b77a:	f7ff fe8b 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800b77e:	202c      	movs	r0, #44	@ 0x2c
 800b780:	f7ff ff02 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800b784:	20c2      	movs	r0, #194	@ 0xc2
 800b786:	f7ff fe85 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800b78a:	2001      	movs	r0, #1
 800b78c:	f7ff fefc 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800b790:	20c3      	movs	r0, #195	@ 0xc3
 800b792:	f7ff fe7f 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800b796:	2012      	movs	r0, #18
 800b798:	f7ff fef6 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800b79c:	20c4      	movs	r0, #196	@ 0xc4
 800b79e:	f7ff fe79 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800b7a2:	2020      	movs	r0, #32
 800b7a4:	f7ff fef0 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800b7a8:	20c6      	movs	r0, #198	@ 0xc6
 800b7aa:	f7ff fe73 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800b7ae:	200f      	movs	r0, #15
 800b7b0:	f7ff feea 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800b7b4:	20d0      	movs	r0, #208	@ 0xd0
 800b7b6:	f7ff fe6d 	bl	800b494 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800b7ba:	20a4      	movs	r0, #164	@ 0xa4
 800b7bc:	f7ff fee4 	bl	800b588 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800b7c0:	20a1      	movs	r0, #161	@ 0xa1
 800b7c2:	f7ff fee1 	bl	800b588 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800b7c6:	20e0      	movs	r0, #224	@ 0xe0
 800b7c8:	f7ff fe64 	bl	800b494 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800b7cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b83c <ST7789_Init+0x14c>)
 800b7ce:	f107 0410 	add.w	r4, r7, #16
 800b7d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7d4:	c407      	stmia	r4!, {r0, r1, r2}
 800b7d6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800b7d8:	f107 0310 	add.w	r3, r7, #16
 800b7dc:	210e      	movs	r1, #14
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7ff fe80 	bl	800b4e4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800b7e4:	20e1      	movs	r0, #225	@ 0xe1
 800b7e6:	f7ff fe55 	bl	800b494 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800b7ea:	4b15      	ldr	r3, [pc, #84]	@ (800b840 <ST7789_Init+0x150>)
 800b7ec:	463c      	mov	r4, r7
 800b7ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7f0:	c407      	stmia	r4!, {r0, r1, r2}
 800b7f2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800b7f4:	463b      	mov	r3, r7
 800b7f6:	210e      	movs	r1, #14
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff fe73 	bl	800b4e4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800b7fe:	2021      	movs	r0, #33	@ 0x21
 800b800:	f7ff fe48 	bl	800b494 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800b804:	2011      	movs	r0, #17
 800b806:	f7ff fe45 	bl	800b494 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800b80a:	2013      	movs	r0, #19
 800b80c:	f7ff fe42 	bl	800b494 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800b810:	2029      	movs	r0, #41	@ 0x29
 800b812:	f7ff fe3f 	bl	800b494 <ST7789_WriteCommand>

	HAL_Delay(50);
 800b816:	2032      	movs	r0, #50	@ 0x32
 800b818:	f7f6 fa2c 	bl	8001c74 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800b81c:	2000      	movs	r0, #0
 800b81e:	f000 f811 	bl	800b844 <ST7789_Fill_Color>
	HAL_Delay(50);
 800b822:	2032      	movs	r0, #50	@ 0x32
 800b824:	f7f6 fa26 	bl	8001c74 <HAL_Delay>

}
 800b828:	bf00      	nop
 800b82a:	372c      	adds	r7, #44	@ 0x2c
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd90      	pop	{r4, r7, pc}
 800b830:	24000b98 	.word	0x24000b98
 800b834:	58020c00 	.word	0x58020c00
 800b838:	0800e534 	.word	0x0800e534
 800b83c:	0800e53c 	.word	0x0800e53c
 800b840:	0800e54c 	.word	0x0800e54c

0800b844 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800b84e:	23a9      	movs	r3, #169	@ 0xa9
 800b850:	f240 123f 	movw	r2, #319	@ 0x13f
 800b854:	2100      	movs	r1, #0
 800b856:	2000      	movs	r0, #0
 800b858:	f7ff feea 	bl	800b630 <ST7789_SetAddressWindow>
	ST7789_Select();
 800b85c:	2200      	movs	r2, #0
 800b85e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b862:	4811      	ldr	r0, [pc, #68]	@ (800b8a8 <ST7789_Fill_Color+0x64>)
 800b864:	f7f9 fc4c 	bl	8005100 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800b868:	2300      	movs	r3, #0
 800b86a:	81fb      	strh	r3, [r7, #14]
 800b86c:	e00e      	b.n	800b88c <ST7789_Fill_Color+0x48>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800b86e:	88fb      	ldrh	r3, [r7, #6]
 800b870:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800b874:	4619      	mov	r1, r3
 800b876:	480d      	ldr	r0, [pc, #52]	@ (800b8ac <ST7789_Fill_Color+0x68>)
 800b878:	f000 fddb 	bl	800c432 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800b87c:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 800b880:	480a      	ldr	r0, [pc, #40]	@ (800b8ac <ST7789_Fill_Color+0x68>)
 800b882:	f7ff fe2f 	bl	800b4e4 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800b886:	89fb      	ldrh	r3, [r7, #14]
 800b888:	3301      	adds	r3, #1
 800b88a:	81fb      	strh	r3, [r7, #14]
 800b88c:	89fb      	ldrh	r3, [r7, #14]
 800b88e:	2b21      	cmp	r3, #33	@ 0x21
 800b890:	d9ed      	bls.n	800b86e <ST7789_Fill_Color+0x2a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800b892:	2201      	movs	r2, #1
 800b894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b898:	4803      	ldr	r0, [pc, #12]	@ (800b8a8 <ST7789_Fill_Color+0x64>)
 800b89a:	f7f9 fc31 	bl	8005100 <HAL_GPIO_WritePin>
}
 800b89e:	bf00      	nop
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	58021800 	.word	0x58021800
 800b8ac:	24000b98 	.word	0x24000b98

0800b8b0 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	461a      	mov	r2, r3
 800b8be:	4623      	mov	r3, r4
 800b8c0:	80fb      	strh	r3, [r7, #6]
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	80bb      	strh	r3, [r7, #4]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	807b      	strh	r3, [r7, #2]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 800b8ce:	88fb      	ldrh	r3, [r7, #6]
 800b8d0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b8d4:	d234      	bcs.n	800b940 <ST7789_DrawImage+0x90>
 800b8d6:	88bb      	ldrh	r3, [r7, #4]
 800b8d8:	2ba9      	cmp	r3, #169	@ 0xa9
 800b8da:	d831      	bhi.n	800b940 <ST7789_DrawImage+0x90>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800b8dc:	88fa      	ldrh	r2, [r7, #6]
 800b8de:	887b      	ldrh	r3, [r7, #2]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b8e6:	dc2d      	bgt.n	800b944 <ST7789_DrawImage+0x94>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800b8e8:	88ba      	ldrh	r2, [r7, #4]
 800b8ea:	883b      	ldrh	r3, [r7, #0]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	2baa      	cmp	r3, #170	@ 0xaa
 800b8f0:	dc2a      	bgt.n	800b948 <ST7789_DrawImage+0x98>
		return;

	ST7789_Select();
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b8f8:	4815      	ldr	r0, [pc, #84]	@ (800b950 <ST7789_DrawImage+0xa0>)
 800b8fa:	f7f9 fc01 	bl	8005100 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800b8fe:	88fa      	ldrh	r2, [r7, #6]
 800b900:	887b      	ldrh	r3, [r7, #2]
 800b902:	4413      	add	r3, r2
 800b904:	b29b      	uxth	r3, r3
 800b906:	3b01      	subs	r3, #1
 800b908:	b29c      	uxth	r4, r3
 800b90a:	88ba      	ldrh	r2, [r7, #4]
 800b90c:	883b      	ldrh	r3, [r7, #0]
 800b90e:	4413      	add	r3, r2
 800b910:	b29b      	uxth	r3, r3
 800b912:	3b01      	subs	r3, #1
 800b914:	b29b      	uxth	r3, r3
 800b916:	88b9      	ldrh	r1, [r7, #4]
 800b918:	88f8      	ldrh	r0, [r7, #6]
 800b91a:	4622      	mov	r2, r4
 800b91c:	f7ff fe88 	bl	800b630 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 800b920:	887b      	ldrh	r3, [r7, #2]
 800b922:	883a      	ldrh	r2, [r7, #0]
 800b924:	fb02 f303 	mul.w	r3, r2, r3
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	4619      	mov	r1, r3
 800b92c:	69b8      	ldr	r0, [r7, #24]
 800b92e:	f7ff fdd9 	bl	800b4e4 <ST7789_WriteData>
	ST7789_UnSelect();
 800b932:	2201      	movs	r2, #1
 800b934:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b938:	4805      	ldr	r0, [pc, #20]	@ (800b950 <ST7789_DrawImage+0xa0>)
 800b93a:	f7f9 fbe1 	bl	8005100 <HAL_GPIO_WritePin>
 800b93e:	e004      	b.n	800b94a <ST7789_DrawImage+0x9a>
		return;
 800b940:	bf00      	nop
 800b942:	e002      	b.n	800b94a <ST7789_DrawImage+0x9a>
		return;
 800b944:	bf00      	nop
 800b946:	e000      	b.n	800b94a <ST7789_DrawImage+0x9a>
		return;
 800b948:	bf00      	nop
}
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}
 800b950:	58021800 	.word	0x58021800

0800b954 <__cvt>:
 800b954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b956:	ed2d 8b02 	vpush	{d8}
 800b95a:	eeb0 8b40 	vmov.f64	d8, d0
 800b95e:	b085      	sub	sp, #20
 800b960:	4617      	mov	r7, r2
 800b962:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b966:	ee18 2a90 	vmov	r2, s17
 800b96a:	f025 0520 	bic.w	r5, r5, #32
 800b96e:	2a00      	cmp	r2, #0
 800b970:	bfb6      	itet	lt
 800b972:	222d      	movlt	r2, #45	@ 0x2d
 800b974:	2200      	movge	r2, #0
 800b976:	eeb1 8b40 	vneglt.f64	d8, d0
 800b97a:	2d46      	cmp	r5, #70	@ 0x46
 800b97c:	460c      	mov	r4, r1
 800b97e:	701a      	strb	r2, [r3, #0]
 800b980:	d004      	beq.n	800b98c <__cvt+0x38>
 800b982:	2d45      	cmp	r5, #69	@ 0x45
 800b984:	d100      	bne.n	800b988 <__cvt+0x34>
 800b986:	3401      	adds	r4, #1
 800b988:	2102      	movs	r1, #2
 800b98a:	e000      	b.n	800b98e <__cvt+0x3a>
 800b98c:	2103      	movs	r1, #3
 800b98e:	ab03      	add	r3, sp, #12
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	ab02      	add	r3, sp, #8
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	4622      	mov	r2, r4
 800b998:	4633      	mov	r3, r6
 800b99a:	eeb0 0b48 	vmov.f64	d0, d8
 800b99e:	f000 fe5f 	bl	800c660 <_dtoa_r>
 800b9a2:	2d47      	cmp	r5, #71	@ 0x47
 800b9a4:	d114      	bne.n	800b9d0 <__cvt+0x7c>
 800b9a6:	07fb      	lsls	r3, r7, #31
 800b9a8:	d50a      	bpl.n	800b9c0 <__cvt+0x6c>
 800b9aa:	1902      	adds	r2, r0, r4
 800b9ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b4:	bf08      	it	eq
 800b9b6:	9203      	streq	r2, [sp, #12]
 800b9b8:	2130      	movs	r1, #48	@ 0x30
 800b9ba:	9b03      	ldr	r3, [sp, #12]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d319      	bcc.n	800b9f4 <__cvt+0xa0>
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9c4:	1a1b      	subs	r3, r3, r0
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	b005      	add	sp, #20
 800b9ca:	ecbd 8b02 	vpop	{d8}
 800b9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d0:	2d46      	cmp	r5, #70	@ 0x46
 800b9d2:	eb00 0204 	add.w	r2, r0, r4
 800b9d6:	d1e9      	bne.n	800b9ac <__cvt+0x58>
 800b9d8:	7803      	ldrb	r3, [r0, #0]
 800b9da:	2b30      	cmp	r3, #48	@ 0x30
 800b9dc:	d107      	bne.n	800b9ee <__cvt+0x9a>
 800b9de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e6:	bf1c      	itt	ne
 800b9e8:	f1c4 0401 	rsbne	r4, r4, #1
 800b9ec:	6034      	strne	r4, [r6, #0]
 800b9ee:	6833      	ldr	r3, [r6, #0]
 800b9f0:	441a      	add	r2, r3
 800b9f2:	e7db      	b.n	800b9ac <__cvt+0x58>
 800b9f4:	1c5c      	adds	r4, r3, #1
 800b9f6:	9403      	str	r4, [sp, #12]
 800b9f8:	7019      	strb	r1, [r3, #0]
 800b9fa:	e7de      	b.n	800b9ba <__cvt+0x66>

0800b9fc <__exponent>:
 800b9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	bfba      	itte	lt
 800ba02:	4249      	neglt	r1, r1
 800ba04:	232d      	movlt	r3, #45	@ 0x2d
 800ba06:	232b      	movge	r3, #43	@ 0x2b
 800ba08:	2909      	cmp	r1, #9
 800ba0a:	7002      	strb	r2, [r0, #0]
 800ba0c:	7043      	strb	r3, [r0, #1]
 800ba0e:	dd29      	ble.n	800ba64 <__exponent+0x68>
 800ba10:	f10d 0307 	add.w	r3, sp, #7
 800ba14:	461d      	mov	r5, r3
 800ba16:	270a      	movs	r7, #10
 800ba18:	461a      	mov	r2, r3
 800ba1a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba1e:	fb07 1416 	mls	r4, r7, r6, r1
 800ba22:	3430      	adds	r4, #48	@ 0x30
 800ba24:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba28:	460c      	mov	r4, r1
 800ba2a:	2c63      	cmp	r4, #99	@ 0x63
 800ba2c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba30:	4631      	mov	r1, r6
 800ba32:	dcf1      	bgt.n	800ba18 <__exponent+0x1c>
 800ba34:	3130      	adds	r1, #48	@ 0x30
 800ba36:	1e94      	subs	r4, r2, #2
 800ba38:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba3c:	1c41      	adds	r1, r0, #1
 800ba3e:	4623      	mov	r3, r4
 800ba40:	42ab      	cmp	r3, r5
 800ba42:	d30a      	bcc.n	800ba5a <__exponent+0x5e>
 800ba44:	f10d 0309 	add.w	r3, sp, #9
 800ba48:	1a9b      	subs	r3, r3, r2
 800ba4a:	42ac      	cmp	r4, r5
 800ba4c:	bf88      	it	hi
 800ba4e:	2300      	movhi	r3, #0
 800ba50:	3302      	adds	r3, #2
 800ba52:	4403      	add	r3, r0
 800ba54:	1a18      	subs	r0, r3, r0
 800ba56:	b003      	add	sp, #12
 800ba58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba62:	e7ed      	b.n	800ba40 <__exponent+0x44>
 800ba64:	2330      	movs	r3, #48	@ 0x30
 800ba66:	3130      	adds	r1, #48	@ 0x30
 800ba68:	7083      	strb	r3, [r0, #2]
 800ba6a:	70c1      	strb	r1, [r0, #3]
 800ba6c:	1d03      	adds	r3, r0, #4
 800ba6e:	e7f1      	b.n	800ba54 <__exponent+0x58>

0800ba70 <_printf_float>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	b08d      	sub	sp, #52	@ 0x34
 800ba76:	460c      	mov	r4, r1
 800ba78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	461f      	mov	r7, r3
 800ba80:	4605      	mov	r5, r0
 800ba82:	f000 fcdf 	bl	800c444 <_localeconv_r>
 800ba86:	f8d0 b000 	ldr.w	fp, [r0]
 800ba8a:	4658      	mov	r0, fp
 800ba8c:	f7f4 fc80 	bl	8000390 <strlen>
 800ba90:	2300      	movs	r3, #0
 800ba92:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba94:	f8d8 3000 	ldr.w	r3, [r8]
 800ba98:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ba9c:	6822      	ldr	r2, [r4, #0]
 800ba9e:	9005      	str	r0, [sp, #20]
 800baa0:	3307      	adds	r3, #7
 800baa2:	f023 0307 	bic.w	r3, r3, #7
 800baa6:	f103 0108 	add.w	r1, r3, #8
 800baaa:	f8c8 1000 	str.w	r1, [r8]
 800baae:	ed93 0b00 	vldr	d0, [r3]
 800bab2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800bd10 <_printf_float+0x2a0>
 800bab6:	eeb0 7bc0 	vabs.f64	d7, d0
 800baba:	eeb4 7b46 	vcmp.f64	d7, d6
 800babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bac6:	dd24      	ble.n	800bb12 <_printf_float+0xa2>
 800bac8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad0:	d502      	bpl.n	800bad8 <_printf_float+0x68>
 800bad2:	232d      	movs	r3, #45	@ 0x2d
 800bad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bad8:	498f      	ldr	r1, [pc, #572]	@ (800bd18 <_printf_float+0x2a8>)
 800bada:	4b90      	ldr	r3, [pc, #576]	@ (800bd1c <_printf_float+0x2ac>)
 800badc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bae0:	bf8c      	ite	hi
 800bae2:	4688      	movhi	r8, r1
 800bae4:	4698      	movls	r8, r3
 800bae6:	f022 0204 	bic.w	r2, r2, #4
 800baea:	2303      	movs	r3, #3
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	f04f 0a00 	mov.w	sl, #0
 800baf4:	9700      	str	r7, [sp, #0]
 800baf6:	4633      	mov	r3, r6
 800baf8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bafa:	4621      	mov	r1, r4
 800bafc:	4628      	mov	r0, r5
 800bafe:	f000 f9d1 	bl	800bea4 <_printf_common>
 800bb02:	3001      	adds	r0, #1
 800bb04:	f040 8089 	bne.w	800bc1a <_printf_float+0x1aa>
 800bb08:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0c:	b00d      	add	sp, #52	@ 0x34
 800bb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	eeb4 0b40 	vcmp.f64	d0, d0
 800bb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb1a:	d709      	bvc.n	800bb30 <_printf_float+0xc0>
 800bb1c:	ee10 3a90 	vmov	r3, s1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bfbc      	itt	lt
 800bb24:	232d      	movlt	r3, #45	@ 0x2d
 800bb26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb2a:	497d      	ldr	r1, [pc, #500]	@ (800bd20 <_printf_float+0x2b0>)
 800bb2c:	4b7d      	ldr	r3, [pc, #500]	@ (800bd24 <_printf_float+0x2b4>)
 800bb2e:	e7d5      	b.n	800badc <_printf_float+0x6c>
 800bb30:	6863      	ldr	r3, [r4, #4]
 800bb32:	1c59      	adds	r1, r3, #1
 800bb34:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bb38:	d139      	bne.n	800bbae <_printf_float+0x13e>
 800bb3a:	2306      	movs	r3, #6
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bb42:	2300      	movs	r3, #0
 800bb44:	6022      	str	r2, [r4, #0]
 800bb46:	9303      	str	r3, [sp, #12]
 800bb48:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bb4e:	ab09      	add	r3, sp, #36	@ 0x24
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	6861      	ldr	r1, [r4, #4]
 800bb54:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb58:	4628      	mov	r0, r5
 800bb5a:	f7ff fefb 	bl	800b954 <__cvt>
 800bb5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb64:	4680      	mov	r8, r0
 800bb66:	d129      	bne.n	800bbbc <_printf_float+0x14c>
 800bb68:	1cc8      	adds	r0, r1, #3
 800bb6a:	db02      	blt.n	800bb72 <_printf_float+0x102>
 800bb6c:	6863      	ldr	r3, [r4, #4]
 800bb6e:	4299      	cmp	r1, r3
 800bb70:	dd41      	ble.n	800bbf6 <_printf_float+0x186>
 800bb72:	f1a9 0902 	sub.w	r9, r9, #2
 800bb76:	fa5f f989 	uxtb.w	r9, r9
 800bb7a:	3901      	subs	r1, #1
 800bb7c:	464a      	mov	r2, r9
 800bb7e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb82:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb84:	f7ff ff3a 	bl	800b9fc <__exponent>
 800bb88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb8a:	1813      	adds	r3, r2, r0
 800bb8c:	2a01      	cmp	r2, #1
 800bb8e:	4682      	mov	sl, r0
 800bb90:	6123      	str	r3, [r4, #16]
 800bb92:	dc02      	bgt.n	800bb9a <_printf_float+0x12a>
 800bb94:	6822      	ldr	r2, [r4, #0]
 800bb96:	07d2      	lsls	r2, r2, #31
 800bb98:	d501      	bpl.n	800bb9e <_printf_float+0x12e>
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	6123      	str	r3, [r4, #16]
 800bb9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0a6      	beq.n	800baf4 <_printf_float+0x84>
 800bba6:	232d      	movs	r3, #45	@ 0x2d
 800bba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbac:	e7a2      	b.n	800baf4 <_printf_float+0x84>
 800bbae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bbb2:	d1c4      	bne.n	800bb3e <_printf_float+0xce>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1c2      	bne.n	800bb3e <_printf_float+0xce>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e7bf      	b.n	800bb3c <_printf_float+0xcc>
 800bbbc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bbc0:	d9db      	bls.n	800bb7a <_printf_float+0x10a>
 800bbc2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bbc6:	d118      	bne.n	800bbfa <_printf_float+0x18a>
 800bbc8:	2900      	cmp	r1, #0
 800bbca:	6863      	ldr	r3, [r4, #4]
 800bbcc:	dd0b      	ble.n	800bbe6 <_printf_float+0x176>
 800bbce:	6121      	str	r1, [r4, #16]
 800bbd0:	b913      	cbnz	r3, 800bbd8 <_printf_float+0x168>
 800bbd2:	6822      	ldr	r2, [r4, #0]
 800bbd4:	07d0      	lsls	r0, r2, #31
 800bbd6:	d502      	bpl.n	800bbde <_printf_float+0x16e>
 800bbd8:	3301      	adds	r3, #1
 800bbda:	440b      	add	r3, r1
 800bbdc:	6123      	str	r3, [r4, #16]
 800bbde:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bbe0:	f04f 0a00 	mov.w	sl, #0
 800bbe4:	e7db      	b.n	800bb9e <_printf_float+0x12e>
 800bbe6:	b913      	cbnz	r3, 800bbee <_printf_float+0x17e>
 800bbe8:	6822      	ldr	r2, [r4, #0]
 800bbea:	07d2      	lsls	r2, r2, #31
 800bbec:	d501      	bpl.n	800bbf2 <_printf_float+0x182>
 800bbee:	3302      	adds	r3, #2
 800bbf0:	e7f4      	b.n	800bbdc <_printf_float+0x16c>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e7f2      	b.n	800bbdc <_printf_float+0x16c>
 800bbf6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bbfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbfc:	4299      	cmp	r1, r3
 800bbfe:	db05      	blt.n	800bc0c <_printf_float+0x19c>
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	6121      	str	r1, [r4, #16]
 800bc04:	07d8      	lsls	r0, r3, #31
 800bc06:	d5ea      	bpl.n	800bbde <_printf_float+0x16e>
 800bc08:	1c4b      	adds	r3, r1, #1
 800bc0a:	e7e7      	b.n	800bbdc <_printf_float+0x16c>
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	bfd4      	ite	le
 800bc10:	f1c1 0202 	rsble	r2, r1, #2
 800bc14:	2201      	movgt	r2, #1
 800bc16:	4413      	add	r3, r2
 800bc18:	e7e0      	b.n	800bbdc <_printf_float+0x16c>
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	055a      	lsls	r2, r3, #21
 800bc1e:	d407      	bmi.n	800bc30 <_printf_float+0x1c0>
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	4642      	mov	r2, r8
 800bc24:	4631      	mov	r1, r6
 800bc26:	4628      	mov	r0, r5
 800bc28:	47b8      	blx	r7
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	d12a      	bne.n	800bc84 <_printf_float+0x214>
 800bc2e:	e76b      	b.n	800bb08 <_printf_float+0x98>
 800bc30:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bc34:	f240 80e0 	bls.w	800bdf8 <_printf_float+0x388>
 800bc38:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bc3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc44:	d133      	bne.n	800bcae <_printf_float+0x23e>
 800bc46:	4a38      	ldr	r2, [pc, #224]	@ (800bd28 <_printf_float+0x2b8>)
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	47b8      	blx	r7
 800bc50:	3001      	adds	r0, #1
 800bc52:	f43f af59 	beq.w	800bb08 <_printf_float+0x98>
 800bc56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc5a:	4543      	cmp	r3, r8
 800bc5c:	db02      	blt.n	800bc64 <_printf_float+0x1f4>
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	07d8      	lsls	r0, r3, #31
 800bc62:	d50f      	bpl.n	800bc84 <_printf_float+0x214>
 800bc64:	9b05      	ldr	r3, [sp, #20]
 800bc66:	465a      	mov	r2, fp
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b8      	blx	r7
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f43f af4a 	beq.w	800bb08 <_printf_float+0x98>
 800bc74:	f04f 0900 	mov.w	r9, #0
 800bc78:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc7c:	f104 0a1a 	add.w	sl, r4, #26
 800bc80:	45c8      	cmp	r8, r9
 800bc82:	dc09      	bgt.n	800bc98 <_printf_float+0x228>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	079b      	lsls	r3, r3, #30
 800bc88:	f100 8107 	bmi.w	800be9a <_printf_float+0x42a>
 800bc8c:	68e0      	ldr	r0, [r4, #12]
 800bc8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc90:	4298      	cmp	r0, r3
 800bc92:	bfb8      	it	lt
 800bc94:	4618      	movlt	r0, r3
 800bc96:	e739      	b.n	800bb0c <_printf_float+0x9c>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	4652      	mov	r2, sl
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	f43f af30 	beq.w	800bb08 <_printf_float+0x98>
 800bca8:	f109 0901 	add.w	r9, r9, #1
 800bcac:	e7e8      	b.n	800bc80 <_printf_float+0x210>
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc3b      	bgt.n	800bd2c <_printf_float+0x2bc>
 800bcb4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd28 <_printf_float+0x2b8>)
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b8      	blx	r7
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f43f af22 	beq.w	800bb08 <_printf_float+0x98>
 800bcc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bcc8:	ea59 0303 	orrs.w	r3, r9, r3
 800bccc:	d102      	bne.n	800bcd4 <_printf_float+0x264>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	07d9      	lsls	r1, r3, #31
 800bcd2:	d5d7      	bpl.n	800bc84 <_printf_float+0x214>
 800bcd4:	9b05      	ldr	r3, [sp, #20]
 800bcd6:	465a      	mov	r2, fp
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b8      	blx	r7
 800bcde:	3001      	adds	r0, #1
 800bce0:	f43f af12 	beq.w	800bb08 <_printf_float+0x98>
 800bce4:	f04f 0a00 	mov.w	sl, #0
 800bce8:	f104 0b1a 	add.w	fp, r4, #26
 800bcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcee:	425b      	negs	r3, r3
 800bcf0:	4553      	cmp	r3, sl
 800bcf2:	dc01      	bgt.n	800bcf8 <_printf_float+0x288>
 800bcf4:	464b      	mov	r3, r9
 800bcf6:	e794      	b.n	800bc22 <_printf_float+0x1b2>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	465a      	mov	r2, fp
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4628      	mov	r0, r5
 800bd00:	47b8      	blx	r7
 800bd02:	3001      	adds	r0, #1
 800bd04:	f43f af00 	beq.w	800bb08 <_printf_float+0x98>
 800bd08:	f10a 0a01 	add.w	sl, sl, #1
 800bd0c:	e7ee      	b.n	800bcec <_printf_float+0x27c>
 800bd0e:	bf00      	nop
 800bd10:	ffffffff 	.word	0xffffffff
 800bd14:	7fefffff 	.word	0x7fefffff
 800bd18:	08035c18 	.word	0x08035c18
 800bd1c:	08035c14 	.word	0x08035c14
 800bd20:	08035c20 	.word	0x08035c20
 800bd24:	08035c1c 	.word	0x08035c1c
 800bd28:	08035c24 	.word	0x08035c24
 800bd2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd32:	4553      	cmp	r3, sl
 800bd34:	bfa8      	it	ge
 800bd36:	4653      	movge	r3, sl
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	4699      	mov	r9, r3
 800bd3c:	dc37      	bgt.n	800bdae <_printf_float+0x33e>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	9307      	str	r3, [sp, #28]
 800bd42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd46:	f104 021a 	add.w	r2, r4, #26
 800bd4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd4c:	9907      	ldr	r1, [sp, #28]
 800bd4e:	9306      	str	r3, [sp, #24]
 800bd50:	eba3 0309 	sub.w	r3, r3, r9
 800bd54:	428b      	cmp	r3, r1
 800bd56:	dc31      	bgt.n	800bdbc <_printf_float+0x34c>
 800bd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5a:	459a      	cmp	sl, r3
 800bd5c:	dc3b      	bgt.n	800bdd6 <_printf_float+0x366>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	07da      	lsls	r2, r3, #31
 800bd62:	d438      	bmi.n	800bdd6 <_printf_float+0x366>
 800bd64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd66:	ebaa 0903 	sub.w	r9, sl, r3
 800bd6a:	9b06      	ldr	r3, [sp, #24]
 800bd6c:	ebaa 0303 	sub.w	r3, sl, r3
 800bd70:	4599      	cmp	r9, r3
 800bd72:	bfa8      	it	ge
 800bd74:	4699      	movge	r9, r3
 800bd76:	f1b9 0f00 	cmp.w	r9, #0
 800bd7a:	dc34      	bgt.n	800bde6 <_printf_float+0x376>
 800bd7c:	f04f 0800 	mov.w	r8, #0
 800bd80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd84:	f104 0b1a 	add.w	fp, r4, #26
 800bd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd8a:	ebaa 0303 	sub.w	r3, sl, r3
 800bd8e:	eba3 0309 	sub.w	r3, r3, r9
 800bd92:	4543      	cmp	r3, r8
 800bd94:	f77f af76 	ble.w	800bc84 <_printf_float+0x214>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	465a      	mov	r2, fp
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	4628      	mov	r0, r5
 800bda0:	47b8      	blx	r7
 800bda2:	3001      	adds	r0, #1
 800bda4:	f43f aeb0 	beq.w	800bb08 <_printf_float+0x98>
 800bda8:	f108 0801 	add.w	r8, r8, #1
 800bdac:	e7ec      	b.n	800bd88 <_printf_float+0x318>
 800bdae:	4642      	mov	r2, r8
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	47b8      	blx	r7
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d1c1      	bne.n	800bd3e <_printf_float+0x2ce>
 800bdba:	e6a5      	b.n	800bb08 <_printf_float+0x98>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	9206      	str	r2, [sp, #24]
 800bdc4:	47b8      	blx	r7
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	f43f ae9e 	beq.w	800bb08 <_printf_float+0x98>
 800bdcc:	9b07      	ldr	r3, [sp, #28]
 800bdce:	9a06      	ldr	r2, [sp, #24]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	9307      	str	r3, [sp, #28]
 800bdd4:	e7b9      	b.n	800bd4a <_printf_float+0x2da>
 800bdd6:	9b05      	ldr	r3, [sp, #20]
 800bdd8:	465a      	mov	r2, fp
 800bdda:	4631      	mov	r1, r6
 800bddc:	4628      	mov	r0, r5
 800bdde:	47b8      	blx	r7
 800bde0:	3001      	adds	r0, #1
 800bde2:	d1bf      	bne.n	800bd64 <_printf_float+0x2f4>
 800bde4:	e690      	b.n	800bb08 <_printf_float+0x98>
 800bde6:	9a06      	ldr	r2, [sp, #24]
 800bde8:	464b      	mov	r3, r9
 800bdea:	4442      	add	r2, r8
 800bdec:	4631      	mov	r1, r6
 800bdee:	4628      	mov	r0, r5
 800bdf0:	47b8      	blx	r7
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	d1c2      	bne.n	800bd7c <_printf_float+0x30c>
 800bdf6:	e687      	b.n	800bb08 <_printf_float+0x98>
 800bdf8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800bdfc:	f1b9 0f01 	cmp.w	r9, #1
 800be00:	dc01      	bgt.n	800be06 <_printf_float+0x396>
 800be02:	07db      	lsls	r3, r3, #31
 800be04:	d536      	bpl.n	800be74 <_printf_float+0x404>
 800be06:	2301      	movs	r3, #1
 800be08:	4642      	mov	r2, r8
 800be0a:	4631      	mov	r1, r6
 800be0c:	4628      	mov	r0, r5
 800be0e:	47b8      	blx	r7
 800be10:	3001      	adds	r0, #1
 800be12:	f43f ae79 	beq.w	800bb08 <_printf_float+0x98>
 800be16:	9b05      	ldr	r3, [sp, #20]
 800be18:	465a      	mov	r2, fp
 800be1a:	4631      	mov	r1, r6
 800be1c:	4628      	mov	r0, r5
 800be1e:	47b8      	blx	r7
 800be20:	3001      	adds	r0, #1
 800be22:	f43f ae71 	beq.w	800bb08 <_printf_float+0x98>
 800be26:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800be2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be32:	f109 39ff 	add.w	r9, r9, #4294967295
 800be36:	d018      	beq.n	800be6a <_printf_float+0x3fa>
 800be38:	464b      	mov	r3, r9
 800be3a:	f108 0201 	add.w	r2, r8, #1
 800be3e:	4631      	mov	r1, r6
 800be40:	4628      	mov	r0, r5
 800be42:	47b8      	blx	r7
 800be44:	3001      	adds	r0, #1
 800be46:	d10c      	bne.n	800be62 <_printf_float+0x3f2>
 800be48:	e65e      	b.n	800bb08 <_printf_float+0x98>
 800be4a:	2301      	movs	r3, #1
 800be4c:	465a      	mov	r2, fp
 800be4e:	4631      	mov	r1, r6
 800be50:	4628      	mov	r0, r5
 800be52:	47b8      	blx	r7
 800be54:	3001      	adds	r0, #1
 800be56:	f43f ae57 	beq.w	800bb08 <_printf_float+0x98>
 800be5a:	f108 0801 	add.w	r8, r8, #1
 800be5e:	45c8      	cmp	r8, r9
 800be60:	dbf3      	blt.n	800be4a <_printf_float+0x3da>
 800be62:	4653      	mov	r3, sl
 800be64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be68:	e6dc      	b.n	800bc24 <_printf_float+0x1b4>
 800be6a:	f04f 0800 	mov.w	r8, #0
 800be6e:	f104 0b1a 	add.w	fp, r4, #26
 800be72:	e7f4      	b.n	800be5e <_printf_float+0x3ee>
 800be74:	2301      	movs	r3, #1
 800be76:	4642      	mov	r2, r8
 800be78:	e7e1      	b.n	800be3e <_printf_float+0x3ce>
 800be7a:	2301      	movs	r3, #1
 800be7c:	464a      	mov	r2, r9
 800be7e:	4631      	mov	r1, r6
 800be80:	4628      	mov	r0, r5
 800be82:	47b8      	blx	r7
 800be84:	3001      	adds	r0, #1
 800be86:	f43f ae3f 	beq.w	800bb08 <_printf_float+0x98>
 800be8a:	f108 0801 	add.w	r8, r8, #1
 800be8e:	68e3      	ldr	r3, [r4, #12]
 800be90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be92:	1a5b      	subs	r3, r3, r1
 800be94:	4543      	cmp	r3, r8
 800be96:	dcf0      	bgt.n	800be7a <_printf_float+0x40a>
 800be98:	e6f8      	b.n	800bc8c <_printf_float+0x21c>
 800be9a:	f04f 0800 	mov.w	r8, #0
 800be9e:	f104 0919 	add.w	r9, r4, #25
 800bea2:	e7f4      	b.n	800be8e <_printf_float+0x41e>

0800bea4 <_printf_common>:
 800bea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea8:	4616      	mov	r6, r2
 800beaa:	4698      	mov	r8, r3
 800beac:	688a      	ldr	r2, [r1, #8]
 800beae:	690b      	ldr	r3, [r1, #16]
 800beb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800beb4:	4293      	cmp	r3, r2
 800beb6:	bfb8      	it	lt
 800beb8:	4613      	movlt	r3, r2
 800beba:	6033      	str	r3, [r6, #0]
 800bebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bec0:	4607      	mov	r7, r0
 800bec2:	460c      	mov	r4, r1
 800bec4:	b10a      	cbz	r2, 800beca <_printf_common+0x26>
 800bec6:	3301      	adds	r3, #1
 800bec8:	6033      	str	r3, [r6, #0]
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	0699      	lsls	r1, r3, #26
 800bece:	bf42      	ittt	mi
 800bed0:	6833      	ldrmi	r3, [r6, #0]
 800bed2:	3302      	addmi	r3, #2
 800bed4:	6033      	strmi	r3, [r6, #0]
 800bed6:	6825      	ldr	r5, [r4, #0]
 800bed8:	f015 0506 	ands.w	r5, r5, #6
 800bedc:	d106      	bne.n	800beec <_printf_common+0x48>
 800bede:	f104 0a19 	add.w	sl, r4, #25
 800bee2:	68e3      	ldr	r3, [r4, #12]
 800bee4:	6832      	ldr	r2, [r6, #0]
 800bee6:	1a9b      	subs	r3, r3, r2
 800bee8:	42ab      	cmp	r3, r5
 800beea:	dc26      	bgt.n	800bf3a <_printf_common+0x96>
 800beec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bef0:	6822      	ldr	r2, [r4, #0]
 800bef2:	3b00      	subs	r3, #0
 800bef4:	bf18      	it	ne
 800bef6:	2301      	movne	r3, #1
 800bef8:	0692      	lsls	r2, r2, #26
 800befa:	d42b      	bmi.n	800bf54 <_printf_common+0xb0>
 800befc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf00:	4641      	mov	r1, r8
 800bf02:	4638      	mov	r0, r7
 800bf04:	47c8      	blx	r9
 800bf06:	3001      	adds	r0, #1
 800bf08:	d01e      	beq.n	800bf48 <_printf_common+0xa4>
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	6922      	ldr	r2, [r4, #16]
 800bf0e:	f003 0306 	and.w	r3, r3, #6
 800bf12:	2b04      	cmp	r3, #4
 800bf14:	bf02      	ittt	eq
 800bf16:	68e5      	ldreq	r5, [r4, #12]
 800bf18:	6833      	ldreq	r3, [r6, #0]
 800bf1a:	1aed      	subeq	r5, r5, r3
 800bf1c:	68a3      	ldr	r3, [r4, #8]
 800bf1e:	bf0c      	ite	eq
 800bf20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf24:	2500      	movne	r5, #0
 800bf26:	4293      	cmp	r3, r2
 800bf28:	bfc4      	itt	gt
 800bf2a:	1a9b      	subgt	r3, r3, r2
 800bf2c:	18ed      	addgt	r5, r5, r3
 800bf2e:	2600      	movs	r6, #0
 800bf30:	341a      	adds	r4, #26
 800bf32:	42b5      	cmp	r5, r6
 800bf34:	d11a      	bne.n	800bf6c <_printf_common+0xc8>
 800bf36:	2000      	movs	r0, #0
 800bf38:	e008      	b.n	800bf4c <_printf_common+0xa8>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	4652      	mov	r2, sl
 800bf3e:	4641      	mov	r1, r8
 800bf40:	4638      	mov	r0, r7
 800bf42:	47c8      	blx	r9
 800bf44:	3001      	adds	r0, #1
 800bf46:	d103      	bne.n	800bf50 <_printf_common+0xac>
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf50:	3501      	adds	r5, #1
 800bf52:	e7c6      	b.n	800bee2 <_printf_common+0x3e>
 800bf54:	18e1      	adds	r1, r4, r3
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	2030      	movs	r0, #48	@ 0x30
 800bf5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf5e:	4422      	add	r2, r4
 800bf60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf68:	3302      	adds	r3, #2
 800bf6a:	e7c7      	b.n	800befc <_printf_common+0x58>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	4622      	mov	r2, r4
 800bf70:	4641      	mov	r1, r8
 800bf72:	4638      	mov	r0, r7
 800bf74:	47c8      	blx	r9
 800bf76:	3001      	adds	r0, #1
 800bf78:	d0e6      	beq.n	800bf48 <_printf_common+0xa4>
 800bf7a:	3601      	adds	r6, #1
 800bf7c:	e7d9      	b.n	800bf32 <_printf_common+0x8e>
	...

0800bf80 <_printf_i>:
 800bf80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf84:	7e0f      	ldrb	r7, [r1, #24]
 800bf86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf88:	2f78      	cmp	r7, #120	@ 0x78
 800bf8a:	4691      	mov	r9, r2
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	460c      	mov	r4, r1
 800bf90:	469a      	mov	sl, r3
 800bf92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf96:	d807      	bhi.n	800bfa8 <_printf_i+0x28>
 800bf98:	2f62      	cmp	r7, #98	@ 0x62
 800bf9a:	d80a      	bhi.n	800bfb2 <_printf_i+0x32>
 800bf9c:	2f00      	cmp	r7, #0
 800bf9e:	f000 80d1 	beq.w	800c144 <_printf_i+0x1c4>
 800bfa2:	2f58      	cmp	r7, #88	@ 0x58
 800bfa4:	f000 80b8 	beq.w	800c118 <_printf_i+0x198>
 800bfa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfb0:	e03a      	b.n	800c028 <_printf_i+0xa8>
 800bfb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfb6:	2b15      	cmp	r3, #21
 800bfb8:	d8f6      	bhi.n	800bfa8 <_printf_i+0x28>
 800bfba:	a101      	add	r1, pc, #4	@ (adr r1, 800bfc0 <_printf_i+0x40>)
 800bfbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfc0:	0800c019 	.word	0x0800c019
 800bfc4:	0800c02d 	.word	0x0800c02d
 800bfc8:	0800bfa9 	.word	0x0800bfa9
 800bfcc:	0800bfa9 	.word	0x0800bfa9
 800bfd0:	0800bfa9 	.word	0x0800bfa9
 800bfd4:	0800bfa9 	.word	0x0800bfa9
 800bfd8:	0800c02d 	.word	0x0800c02d
 800bfdc:	0800bfa9 	.word	0x0800bfa9
 800bfe0:	0800bfa9 	.word	0x0800bfa9
 800bfe4:	0800bfa9 	.word	0x0800bfa9
 800bfe8:	0800bfa9 	.word	0x0800bfa9
 800bfec:	0800c12b 	.word	0x0800c12b
 800bff0:	0800c057 	.word	0x0800c057
 800bff4:	0800c0e5 	.word	0x0800c0e5
 800bff8:	0800bfa9 	.word	0x0800bfa9
 800bffc:	0800bfa9 	.word	0x0800bfa9
 800c000:	0800c14d 	.word	0x0800c14d
 800c004:	0800bfa9 	.word	0x0800bfa9
 800c008:	0800c057 	.word	0x0800c057
 800c00c:	0800bfa9 	.word	0x0800bfa9
 800c010:	0800bfa9 	.word	0x0800bfa9
 800c014:	0800c0ed 	.word	0x0800c0ed
 800c018:	6833      	ldr	r3, [r6, #0]
 800c01a:	1d1a      	adds	r2, r3, #4
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	6032      	str	r2, [r6, #0]
 800c020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c028:	2301      	movs	r3, #1
 800c02a:	e09c      	b.n	800c166 <_printf_i+0x1e6>
 800c02c:	6833      	ldr	r3, [r6, #0]
 800c02e:	6820      	ldr	r0, [r4, #0]
 800c030:	1d19      	adds	r1, r3, #4
 800c032:	6031      	str	r1, [r6, #0]
 800c034:	0606      	lsls	r6, r0, #24
 800c036:	d501      	bpl.n	800c03c <_printf_i+0xbc>
 800c038:	681d      	ldr	r5, [r3, #0]
 800c03a:	e003      	b.n	800c044 <_printf_i+0xc4>
 800c03c:	0645      	lsls	r5, r0, #25
 800c03e:	d5fb      	bpl.n	800c038 <_printf_i+0xb8>
 800c040:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c044:	2d00      	cmp	r5, #0
 800c046:	da03      	bge.n	800c050 <_printf_i+0xd0>
 800c048:	232d      	movs	r3, #45	@ 0x2d
 800c04a:	426d      	negs	r5, r5
 800c04c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c050:	4858      	ldr	r0, [pc, #352]	@ (800c1b4 <_printf_i+0x234>)
 800c052:	230a      	movs	r3, #10
 800c054:	e011      	b.n	800c07a <_printf_i+0xfa>
 800c056:	6821      	ldr	r1, [r4, #0]
 800c058:	6833      	ldr	r3, [r6, #0]
 800c05a:	0608      	lsls	r0, r1, #24
 800c05c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c060:	d402      	bmi.n	800c068 <_printf_i+0xe8>
 800c062:	0649      	lsls	r1, r1, #25
 800c064:	bf48      	it	mi
 800c066:	b2ad      	uxthmi	r5, r5
 800c068:	2f6f      	cmp	r7, #111	@ 0x6f
 800c06a:	4852      	ldr	r0, [pc, #328]	@ (800c1b4 <_printf_i+0x234>)
 800c06c:	6033      	str	r3, [r6, #0]
 800c06e:	bf14      	ite	ne
 800c070:	230a      	movne	r3, #10
 800c072:	2308      	moveq	r3, #8
 800c074:	2100      	movs	r1, #0
 800c076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c07a:	6866      	ldr	r6, [r4, #4]
 800c07c:	60a6      	str	r6, [r4, #8]
 800c07e:	2e00      	cmp	r6, #0
 800c080:	db05      	blt.n	800c08e <_printf_i+0x10e>
 800c082:	6821      	ldr	r1, [r4, #0]
 800c084:	432e      	orrs	r6, r5
 800c086:	f021 0104 	bic.w	r1, r1, #4
 800c08a:	6021      	str	r1, [r4, #0]
 800c08c:	d04b      	beq.n	800c126 <_printf_i+0x1a6>
 800c08e:	4616      	mov	r6, r2
 800c090:	fbb5 f1f3 	udiv	r1, r5, r3
 800c094:	fb03 5711 	mls	r7, r3, r1, r5
 800c098:	5dc7      	ldrb	r7, [r0, r7]
 800c09a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c09e:	462f      	mov	r7, r5
 800c0a0:	42bb      	cmp	r3, r7
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	d9f4      	bls.n	800c090 <_printf_i+0x110>
 800c0a6:	2b08      	cmp	r3, #8
 800c0a8:	d10b      	bne.n	800c0c2 <_printf_i+0x142>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	07df      	lsls	r7, r3, #31
 800c0ae:	d508      	bpl.n	800c0c2 <_printf_i+0x142>
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	6861      	ldr	r1, [r4, #4]
 800c0b4:	4299      	cmp	r1, r3
 800c0b6:	bfde      	ittt	le
 800c0b8:	2330      	movle	r3, #48	@ 0x30
 800c0ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0c2:	1b92      	subs	r2, r2, r6
 800c0c4:	6122      	str	r2, [r4, #16]
 800c0c6:	f8cd a000 	str.w	sl, [sp]
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	aa03      	add	r2, sp, #12
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	f7ff fee7 	bl	800bea4 <_printf_common>
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	d14a      	bne.n	800c170 <_printf_i+0x1f0>
 800c0da:	f04f 30ff 	mov.w	r0, #4294967295
 800c0de:	b004      	add	sp, #16
 800c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	f043 0320 	orr.w	r3, r3, #32
 800c0ea:	6023      	str	r3, [r4, #0]
 800c0ec:	4832      	ldr	r0, [pc, #200]	@ (800c1b8 <_printf_i+0x238>)
 800c0ee:	2778      	movs	r7, #120	@ 0x78
 800c0f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	6831      	ldr	r1, [r6, #0]
 800c0f8:	061f      	lsls	r7, r3, #24
 800c0fa:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0fe:	d402      	bmi.n	800c106 <_printf_i+0x186>
 800c100:	065f      	lsls	r7, r3, #25
 800c102:	bf48      	it	mi
 800c104:	b2ad      	uxthmi	r5, r5
 800c106:	6031      	str	r1, [r6, #0]
 800c108:	07d9      	lsls	r1, r3, #31
 800c10a:	bf44      	itt	mi
 800c10c:	f043 0320 	orrmi.w	r3, r3, #32
 800c110:	6023      	strmi	r3, [r4, #0]
 800c112:	b11d      	cbz	r5, 800c11c <_printf_i+0x19c>
 800c114:	2310      	movs	r3, #16
 800c116:	e7ad      	b.n	800c074 <_printf_i+0xf4>
 800c118:	4826      	ldr	r0, [pc, #152]	@ (800c1b4 <_printf_i+0x234>)
 800c11a:	e7e9      	b.n	800c0f0 <_printf_i+0x170>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	f023 0320 	bic.w	r3, r3, #32
 800c122:	6023      	str	r3, [r4, #0]
 800c124:	e7f6      	b.n	800c114 <_printf_i+0x194>
 800c126:	4616      	mov	r6, r2
 800c128:	e7bd      	b.n	800c0a6 <_printf_i+0x126>
 800c12a:	6833      	ldr	r3, [r6, #0]
 800c12c:	6825      	ldr	r5, [r4, #0]
 800c12e:	6961      	ldr	r1, [r4, #20]
 800c130:	1d18      	adds	r0, r3, #4
 800c132:	6030      	str	r0, [r6, #0]
 800c134:	062e      	lsls	r6, r5, #24
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	d501      	bpl.n	800c13e <_printf_i+0x1be>
 800c13a:	6019      	str	r1, [r3, #0]
 800c13c:	e002      	b.n	800c144 <_printf_i+0x1c4>
 800c13e:	0668      	lsls	r0, r5, #25
 800c140:	d5fb      	bpl.n	800c13a <_printf_i+0x1ba>
 800c142:	8019      	strh	r1, [r3, #0]
 800c144:	2300      	movs	r3, #0
 800c146:	6123      	str	r3, [r4, #16]
 800c148:	4616      	mov	r6, r2
 800c14a:	e7bc      	b.n	800c0c6 <_printf_i+0x146>
 800c14c:	6833      	ldr	r3, [r6, #0]
 800c14e:	1d1a      	adds	r2, r3, #4
 800c150:	6032      	str	r2, [r6, #0]
 800c152:	681e      	ldr	r6, [r3, #0]
 800c154:	6862      	ldr	r2, [r4, #4]
 800c156:	2100      	movs	r1, #0
 800c158:	4630      	mov	r0, r6
 800c15a:	f7f4 f8c9 	bl	80002f0 <memchr>
 800c15e:	b108      	cbz	r0, 800c164 <_printf_i+0x1e4>
 800c160:	1b80      	subs	r0, r0, r6
 800c162:	6060      	str	r0, [r4, #4]
 800c164:	6863      	ldr	r3, [r4, #4]
 800c166:	6123      	str	r3, [r4, #16]
 800c168:	2300      	movs	r3, #0
 800c16a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c16e:	e7aa      	b.n	800c0c6 <_printf_i+0x146>
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	4632      	mov	r2, r6
 800c174:	4649      	mov	r1, r9
 800c176:	4640      	mov	r0, r8
 800c178:	47d0      	blx	sl
 800c17a:	3001      	adds	r0, #1
 800c17c:	d0ad      	beq.n	800c0da <_printf_i+0x15a>
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	079b      	lsls	r3, r3, #30
 800c182:	d413      	bmi.n	800c1ac <_printf_i+0x22c>
 800c184:	68e0      	ldr	r0, [r4, #12]
 800c186:	9b03      	ldr	r3, [sp, #12]
 800c188:	4298      	cmp	r0, r3
 800c18a:	bfb8      	it	lt
 800c18c:	4618      	movlt	r0, r3
 800c18e:	e7a6      	b.n	800c0de <_printf_i+0x15e>
 800c190:	2301      	movs	r3, #1
 800c192:	4632      	mov	r2, r6
 800c194:	4649      	mov	r1, r9
 800c196:	4640      	mov	r0, r8
 800c198:	47d0      	blx	sl
 800c19a:	3001      	adds	r0, #1
 800c19c:	d09d      	beq.n	800c0da <_printf_i+0x15a>
 800c19e:	3501      	adds	r5, #1
 800c1a0:	68e3      	ldr	r3, [r4, #12]
 800c1a2:	9903      	ldr	r1, [sp, #12]
 800c1a4:	1a5b      	subs	r3, r3, r1
 800c1a6:	42ab      	cmp	r3, r5
 800c1a8:	dcf2      	bgt.n	800c190 <_printf_i+0x210>
 800c1aa:	e7eb      	b.n	800c184 <_printf_i+0x204>
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	f104 0619 	add.w	r6, r4, #25
 800c1b2:	e7f5      	b.n	800c1a0 <_printf_i+0x220>
 800c1b4:	08035c26 	.word	0x08035c26
 800c1b8:	08035c37 	.word	0x08035c37

0800c1bc <std>:
 800c1bc:	2300      	movs	r3, #0
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1ca:	6083      	str	r3, [r0, #8]
 800c1cc:	8181      	strh	r1, [r0, #12]
 800c1ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800c1d0:	81c2      	strh	r2, [r0, #14]
 800c1d2:	6183      	str	r3, [r0, #24]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	2208      	movs	r2, #8
 800c1d8:	305c      	adds	r0, #92	@ 0x5c
 800c1da:	f000 f92a 	bl	800c432 <memset>
 800c1de:	4b0d      	ldr	r3, [pc, #52]	@ (800c214 <std+0x58>)
 800c1e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c218 <std+0x5c>)
 800c1e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <std+0x60>)
 800c1e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c220 <std+0x64>)
 800c1ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c224 <std+0x68>)
 800c1f0:	6224      	str	r4, [r4, #32]
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d006      	beq.n	800c204 <std+0x48>
 800c1f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1fa:	4294      	cmp	r4, r2
 800c1fc:	d002      	beq.n	800c204 <std+0x48>
 800c1fe:	33d0      	adds	r3, #208	@ 0xd0
 800c200:	429c      	cmp	r4, r3
 800c202:	d105      	bne.n	800c210 <std+0x54>
 800c204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c20c:	f000 b98e 	b.w	800c52c <__retarget_lock_init_recursive>
 800c210:	bd10      	pop	{r4, pc}
 800c212:	bf00      	nop
 800c214:	0800c3ad 	.word	0x0800c3ad
 800c218:	0800c3cf 	.word	0x0800c3cf
 800c21c:	0800c407 	.word	0x0800c407
 800c220:	0800c42b 	.word	0x0800c42b
 800c224:	24001818 	.word	0x24001818

0800c228 <stdio_exit_handler>:
 800c228:	4a02      	ldr	r2, [pc, #8]	@ (800c234 <stdio_exit_handler+0xc>)
 800c22a:	4903      	ldr	r1, [pc, #12]	@ (800c238 <stdio_exit_handler+0x10>)
 800c22c:	4803      	ldr	r0, [pc, #12]	@ (800c23c <stdio_exit_handler+0x14>)
 800c22e:	f000 b869 	b.w	800c304 <_fwalk_sglue>
 800c232:	bf00      	nop
 800c234:	240000a0 	.word	0x240000a0
 800c238:	0800e04d 	.word	0x0800e04d
 800c23c:	240000b0 	.word	0x240000b0

0800c240 <cleanup_stdio>:
 800c240:	6841      	ldr	r1, [r0, #4]
 800c242:	4b0c      	ldr	r3, [pc, #48]	@ (800c274 <cleanup_stdio+0x34>)
 800c244:	4299      	cmp	r1, r3
 800c246:	b510      	push	{r4, lr}
 800c248:	4604      	mov	r4, r0
 800c24a:	d001      	beq.n	800c250 <cleanup_stdio+0x10>
 800c24c:	f001 fefe 	bl	800e04c <_fflush_r>
 800c250:	68a1      	ldr	r1, [r4, #8]
 800c252:	4b09      	ldr	r3, [pc, #36]	@ (800c278 <cleanup_stdio+0x38>)
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <cleanup_stdio+0x1e>
 800c258:	4620      	mov	r0, r4
 800c25a:	f001 fef7 	bl	800e04c <_fflush_r>
 800c25e:	68e1      	ldr	r1, [r4, #12]
 800c260:	4b06      	ldr	r3, [pc, #24]	@ (800c27c <cleanup_stdio+0x3c>)
 800c262:	4299      	cmp	r1, r3
 800c264:	d004      	beq.n	800c270 <cleanup_stdio+0x30>
 800c266:	4620      	mov	r0, r4
 800c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c26c:	f001 beee 	b.w	800e04c <_fflush_r>
 800c270:	bd10      	pop	{r4, pc}
 800c272:	bf00      	nop
 800c274:	24001818 	.word	0x24001818
 800c278:	24001880 	.word	0x24001880
 800c27c:	240018e8 	.word	0x240018e8

0800c280 <global_stdio_init.part.0>:
 800c280:	b510      	push	{r4, lr}
 800c282:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b0 <global_stdio_init.part.0+0x30>)
 800c284:	4c0b      	ldr	r4, [pc, #44]	@ (800c2b4 <global_stdio_init.part.0+0x34>)
 800c286:	4a0c      	ldr	r2, [pc, #48]	@ (800c2b8 <global_stdio_init.part.0+0x38>)
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	4620      	mov	r0, r4
 800c28c:	2200      	movs	r2, #0
 800c28e:	2104      	movs	r1, #4
 800c290:	f7ff ff94 	bl	800c1bc <std>
 800c294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c298:	2201      	movs	r2, #1
 800c29a:	2109      	movs	r1, #9
 800c29c:	f7ff ff8e 	bl	800c1bc <std>
 800c2a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2aa:	2112      	movs	r1, #18
 800c2ac:	f7ff bf86 	b.w	800c1bc <std>
 800c2b0:	24001950 	.word	0x24001950
 800c2b4:	24001818 	.word	0x24001818
 800c2b8:	0800c229 	.word	0x0800c229

0800c2bc <__sfp_lock_acquire>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	@ (800c2c4 <__sfp_lock_acquire+0x8>)
 800c2be:	f000 b936 	b.w	800c52e <__retarget_lock_acquire_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	24001959 	.word	0x24001959

0800c2c8 <__sfp_lock_release>:
 800c2c8:	4801      	ldr	r0, [pc, #4]	@ (800c2d0 <__sfp_lock_release+0x8>)
 800c2ca:	f000 b931 	b.w	800c530 <__retarget_lock_release_recursive>
 800c2ce:	bf00      	nop
 800c2d0:	24001959 	.word	0x24001959

0800c2d4 <__sinit>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	f7ff fff0 	bl	800c2bc <__sfp_lock_acquire>
 800c2dc:	6a23      	ldr	r3, [r4, #32]
 800c2de:	b11b      	cbz	r3, 800c2e8 <__sinit+0x14>
 800c2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2e4:	f7ff bff0 	b.w	800c2c8 <__sfp_lock_release>
 800c2e8:	4b04      	ldr	r3, [pc, #16]	@ (800c2fc <__sinit+0x28>)
 800c2ea:	6223      	str	r3, [r4, #32]
 800c2ec:	4b04      	ldr	r3, [pc, #16]	@ (800c300 <__sinit+0x2c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1f5      	bne.n	800c2e0 <__sinit+0xc>
 800c2f4:	f7ff ffc4 	bl	800c280 <global_stdio_init.part.0>
 800c2f8:	e7f2      	b.n	800c2e0 <__sinit+0xc>
 800c2fa:	bf00      	nop
 800c2fc:	0800c241 	.word	0x0800c241
 800c300:	24001950 	.word	0x24001950

0800c304 <_fwalk_sglue>:
 800c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c308:	4607      	mov	r7, r0
 800c30a:	4688      	mov	r8, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	2600      	movs	r6, #0
 800c310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c314:	f1b9 0901 	subs.w	r9, r9, #1
 800c318:	d505      	bpl.n	800c326 <_fwalk_sglue+0x22>
 800c31a:	6824      	ldr	r4, [r4, #0]
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	d1f7      	bne.n	800c310 <_fwalk_sglue+0xc>
 800c320:	4630      	mov	r0, r6
 800c322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d907      	bls.n	800c33c <_fwalk_sglue+0x38>
 800c32c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c330:	3301      	adds	r3, #1
 800c332:	d003      	beq.n	800c33c <_fwalk_sglue+0x38>
 800c334:	4629      	mov	r1, r5
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	4306      	orrs	r6, r0
 800c33c:	3568      	adds	r5, #104	@ 0x68
 800c33e:	e7e9      	b.n	800c314 <_fwalk_sglue+0x10>

0800c340 <sniprintf>:
 800c340:	b40c      	push	{r2, r3}
 800c342:	b530      	push	{r4, r5, lr}
 800c344:	4b18      	ldr	r3, [pc, #96]	@ (800c3a8 <sniprintf+0x68>)
 800c346:	1e0c      	subs	r4, r1, #0
 800c348:	681d      	ldr	r5, [r3, #0]
 800c34a:	b09d      	sub	sp, #116	@ 0x74
 800c34c:	da08      	bge.n	800c360 <sniprintf+0x20>
 800c34e:	238b      	movs	r3, #139	@ 0x8b
 800c350:	602b      	str	r3, [r5, #0]
 800c352:	f04f 30ff 	mov.w	r0, #4294967295
 800c356:	b01d      	add	sp, #116	@ 0x74
 800c358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c35c:	b002      	add	sp, #8
 800c35e:	4770      	bx	lr
 800c360:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c364:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c368:	f04f 0300 	mov.w	r3, #0
 800c36c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c36e:	bf14      	ite	ne
 800c370:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c374:	4623      	moveq	r3, r4
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	9307      	str	r3, [sp, #28]
 800c37a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c37e:	9002      	str	r0, [sp, #8]
 800c380:	9006      	str	r0, [sp, #24]
 800c382:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c386:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c388:	ab21      	add	r3, sp, #132	@ 0x84
 800c38a:	a902      	add	r1, sp, #8
 800c38c:	4628      	mov	r0, r5
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	f001 fb9a 	bl	800dac8 <_svfiprintf_r>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	bfbc      	itt	lt
 800c398:	238b      	movlt	r3, #139	@ 0x8b
 800c39a:	602b      	strlt	r3, [r5, #0]
 800c39c:	2c00      	cmp	r4, #0
 800c39e:	d0da      	beq.n	800c356 <sniprintf+0x16>
 800c3a0:	9b02      	ldr	r3, [sp, #8]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e7d6      	b.n	800c356 <sniprintf+0x16>
 800c3a8:	240000ac 	.word	0x240000ac

0800c3ac <__sread>:
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b4:	f000 f86c 	bl	800c490 <_read_r>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	bfab      	itete	ge
 800c3bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c3be:	89a3      	ldrhlt	r3, [r4, #12]
 800c3c0:	181b      	addge	r3, r3, r0
 800c3c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c3c6:	bfac      	ite	ge
 800c3c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3ca:	81a3      	strhlt	r3, [r4, #12]
 800c3cc:	bd10      	pop	{r4, pc}

0800c3ce <__swrite>:
 800c3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d2:	461f      	mov	r7, r3
 800c3d4:	898b      	ldrh	r3, [r1, #12]
 800c3d6:	05db      	lsls	r3, r3, #23
 800c3d8:	4605      	mov	r5, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	4616      	mov	r6, r2
 800c3de:	d505      	bpl.n	800c3ec <__swrite+0x1e>
 800c3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f000 f840 	bl	800c46c <_lseek_r>
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3f6:	81a3      	strh	r3, [r4, #12]
 800c3f8:	4632      	mov	r2, r6
 800c3fa:	463b      	mov	r3, r7
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c402:	f000 b857 	b.w	800c4b4 <_write_r>

0800c406 <__sseek>:
 800c406:	b510      	push	{r4, lr}
 800c408:	460c      	mov	r4, r1
 800c40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40e:	f000 f82d 	bl	800c46c <_lseek_r>
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	bf15      	itete	ne
 800c418:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c41a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c41e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c422:	81a3      	strheq	r3, [r4, #12]
 800c424:	bf18      	it	ne
 800c426:	81a3      	strhne	r3, [r4, #12]
 800c428:	bd10      	pop	{r4, pc}

0800c42a <__sclose>:
 800c42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42e:	f000 b80d 	b.w	800c44c <_close_r>

0800c432 <memset>:
 800c432:	4402      	add	r2, r0
 800c434:	4603      	mov	r3, r0
 800c436:	4293      	cmp	r3, r2
 800c438:	d100      	bne.n	800c43c <memset+0xa>
 800c43a:	4770      	bx	lr
 800c43c:	f803 1b01 	strb.w	r1, [r3], #1
 800c440:	e7f9      	b.n	800c436 <memset+0x4>
	...

0800c444 <_localeconv_r>:
 800c444:	4800      	ldr	r0, [pc, #0]	@ (800c448 <_localeconv_r+0x4>)
 800c446:	4770      	bx	lr
 800c448:	240001ec 	.word	0x240001ec

0800c44c <_close_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d06      	ldr	r5, [pc, #24]	@ (800c468 <_close_r+0x1c>)
 800c450:	2300      	movs	r3, #0
 800c452:	4604      	mov	r4, r0
 800c454:	4608      	mov	r0, r1
 800c456:	602b      	str	r3, [r5, #0]
 800c458:	f7f4 ff74 	bl	8001344 <_close>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_close_r+0x1a>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_close_r+0x1a>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	24001954 	.word	0x24001954

0800c46c <_lseek_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d07      	ldr	r5, [pc, #28]	@ (800c48c <_lseek_r+0x20>)
 800c470:	4604      	mov	r4, r0
 800c472:	4608      	mov	r0, r1
 800c474:	4611      	mov	r1, r2
 800c476:	2200      	movs	r2, #0
 800c478:	602a      	str	r2, [r5, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	f7f4 ff89 	bl	8001392 <_lseek>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d102      	bne.n	800c48a <_lseek_r+0x1e>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b103      	cbz	r3, 800c48a <_lseek_r+0x1e>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	24001954 	.word	0x24001954

0800c490 <_read_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d07      	ldr	r5, [pc, #28]	@ (800c4b0 <_read_r+0x20>)
 800c494:	4604      	mov	r4, r0
 800c496:	4608      	mov	r0, r1
 800c498:	4611      	mov	r1, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	602a      	str	r2, [r5, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f7f4 ff17 	bl	80012d2 <_read>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_read_r+0x1e>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_read_r+0x1e>
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	24001954 	.word	0x24001954

0800c4b4 <_write_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d07      	ldr	r5, [pc, #28]	@ (800c4d4 <_write_r+0x20>)
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	4608      	mov	r0, r1
 800c4bc:	4611      	mov	r1, r2
 800c4be:	2200      	movs	r2, #0
 800c4c0:	602a      	str	r2, [r5, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	f7f4 ff22 	bl	800130c <_write>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	d102      	bne.n	800c4d2 <_write_r+0x1e>
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	b103      	cbz	r3, 800c4d2 <_write_r+0x1e>
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	24001954 	.word	0x24001954

0800c4d8 <__errno>:
 800c4d8:	4b01      	ldr	r3, [pc, #4]	@ (800c4e0 <__errno+0x8>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	240000ac 	.word	0x240000ac

0800c4e4 <__libc_init_array>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	4d0d      	ldr	r5, [pc, #52]	@ (800c51c <__libc_init_array+0x38>)
 800c4e8:	4c0d      	ldr	r4, [pc, #52]	@ (800c520 <__libc_init_array+0x3c>)
 800c4ea:	1b64      	subs	r4, r4, r5
 800c4ec:	10a4      	asrs	r4, r4, #2
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	42a6      	cmp	r6, r4
 800c4f2:	d109      	bne.n	800c508 <__libc_init_array+0x24>
 800c4f4:	4d0b      	ldr	r5, [pc, #44]	@ (800c524 <__libc_init_array+0x40>)
 800c4f6:	4c0c      	ldr	r4, [pc, #48]	@ (800c528 <__libc_init_array+0x44>)
 800c4f8:	f001 fff8 	bl	800e4ec <_init>
 800c4fc:	1b64      	subs	r4, r4, r5
 800c4fe:	10a4      	asrs	r4, r4, #2
 800c500:	2600      	movs	r6, #0
 800c502:	42a6      	cmp	r6, r4
 800c504:	d105      	bne.n	800c512 <__libc_init_array+0x2e>
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	f855 3b04 	ldr.w	r3, [r5], #4
 800c50c:	4798      	blx	r3
 800c50e:	3601      	adds	r6, #1
 800c510:	e7ee      	b.n	800c4f0 <__libc_init_array+0xc>
 800c512:	f855 3b04 	ldr.w	r3, [r5], #4
 800c516:	4798      	blx	r3
 800c518:	3601      	adds	r6, #1
 800c51a:	e7f2      	b.n	800c502 <__libc_init_array+0x1e>
 800c51c:	08035f94 	.word	0x08035f94
 800c520:	08035f94 	.word	0x08035f94
 800c524:	08035f94 	.word	0x08035f94
 800c528:	08035f98 	.word	0x08035f98

0800c52c <__retarget_lock_init_recursive>:
 800c52c:	4770      	bx	lr

0800c52e <__retarget_lock_acquire_recursive>:
 800c52e:	4770      	bx	lr

0800c530 <__retarget_lock_release_recursive>:
 800c530:	4770      	bx	lr

0800c532 <memcpy>:
 800c532:	440a      	add	r2, r1
 800c534:	4291      	cmp	r1, r2
 800c536:	f100 33ff 	add.w	r3, r0, #4294967295
 800c53a:	d100      	bne.n	800c53e <memcpy+0xc>
 800c53c:	4770      	bx	lr
 800c53e:	b510      	push	{r4, lr}
 800c540:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c544:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c548:	4291      	cmp	r1, r2
 800c54a:	d1f9      	bne.n	800c540 <memcpy+0xe>
 800c54c:	bd10      	pop	{r4, pc}

0800c54e <quorem>:
 800c54e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c552:	6903      	ldr	r3, [r0, #16]
 800c554:	690c      	ldr	r4, [r1, #16]
 800c556:	42a3      	cmp	r3, r4
 800c558:	4607      	mov	r7, r0
 800c55a:	db7e      	blt.n	800c65a <quorem+0x10c>
 800c55c:	3c01      	subs	r4, #1
 800c55e:	f101 0814 	add.w	r8, r1, #20
 800c562:	00a3      	lsls	r3, r4, #2
 800c564:	f100 0514 	add.w	r5, r0, #20
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c578:	3301      	adds	r3, #1
 800c57a:	429a      	cmp	r2, r3
 800c57c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c580:	fbb2 f6f3 	udiv	r6, r2, r3
 800c584:	d32e      	bcc.n	800c5e4 <quorem+0x96>
 800c586:	f04f 0a00 	mov.w	sl, #0
 800c58a:	46c4      	mov	ip, r8
 800c58c:	46ae      	mov	lr, r5
 800c58e:	46d3      	mov	fp, sl
 800c590:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c594:	b298      	uxth	r0, r3
 800c596:	fb06 a000 	mla	r0, r6, r0, sl
 800c59a:	0c02      	lsrs	r2, r0, #16
 800c59c:	0c1b      	lsrs	r3, r3, #16
 800c59e:	fb06 2303 	mla	r3, r6, r3, r2
 800c5a2:	f8de 2000 	ldr.w	r2, [lr]
 800c5a6:	b280      	uxth	r0, r0
 800c5a8:	b292      	uxth	r2, r2
 800c5aa:	1a12      	subs	r2, r2, r0
 800c5ac:	445a      	add	r2, fp
 800c5ae:	f8de 0000 	ldr.w	r0, [lr]
 800c5b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c5bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c5c0:	b292      	uxth	r2, r2
 800c5c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5c6:	45e1      	cmp	r9, ip
 800c5c8:	f84e 2b04 	str.w	r2, [lr], #4
 800c5cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c5d0:	d2de      	bcs.n	800c590 <quorem+0x42>
 800c5d2:	9b00      	ldr	r3, [sp, #0]
 800c5d4:	58eb      	ldr	r3, [r5, r3]
 800c5d6:	b92b      	cbnz	r3, 800c5e4 <quorem+0x96>
 800c5d8:	9b01      	ldr	r3, [sp, #4]
 800c5da:	3b04      	subs	r3, #4
 800c5dc:	429d      	cmp	r5, r3
 800c5de:	461a      	mov	r2, r3
 800c5e0:	d32f      	bcc.n	800c642 <quorem+0xf4>
 800c5e2:	613c      	str	r4, [r7, #16]
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f001 f90b 	bl	800d800 <__mcmp>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	db25      	blt.n	800c63a <quorem+0xec>
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5f6:	f8d1 c000 	ldr.w	ip, [r1]
 800c5fa:	fa1f fe82 	uxth.w	lr, r2
 800c5fe:	fa1f f38c 	uxth.w	r3, ip
 800c602:	eba3 030e 	sub.w	r3, r3, lr
 800c606:	4403      	add	r3, r0
 800c608:	0c12      	lsrs	r2, r2, #16
 800c60a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c60e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c612:	b29b      	uxth	r3, r3
 800c614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c618:	45c1      	cmp	r9, r8
 800c61a:	f841 3b04 	str.w	r3, [r1], #4
 800c61e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c622:	d2e6      	bcs.n	800c5f2 <quorem+0xa4>
 800c624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c62c:	b922      	cbnz	r2, 800c638 <quorem+0xea>
 800c62e:	3b04      	subs	r3, #4
 800c630:	429d      	cmp	r5, r3
 800c632:	461a      	mov	r2, r3
 800c634:	d30b      	bcc.n	800c64e <quorem+0x100>
 800c636:	613c      	str	r4, [r7, #16]
 800c638:	3601      	adds	r6, #1
 800c63a:	4630      	mov	r0, r6
 800c63c:	b003      	add	sp, #12
 800c63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c642:	6812      	ldr	r2, [r2, #0]
 800c644:	3b04      	subs	r3, #4
 800c646:	2a00      	cmp	r2, #0
 800c648:	d1cb      	bne.n	800c5e2 <quorem+0x94>
 800c64a:	3c01      	subs	r4, #1
 800c64c:	e7c6      	b.n	800c5dc <quorem+0x8e>
 800c64e:	6812      	ldr	r2, [r2, #0]
 800c650:	3b04      	subs	r3, #4
 800c652:	2a00      	cmp	r2, #0
 800c654:	d1ef      	bne.n	800c636 <quorem+0xe8>
 800c656:	3c01      	subs	r4, #1
 800c658:	e7ea      	b.n	800c630 <quorem+0xe2>
 800c65a:	2000      	movs	r0, #0
 800c65c:	e7ee      	b.n	800c63c <quorem+0xee>
	...

0800c660 <_dtoa_r>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	ed2d 8b02 	vpush	{d8}
 800c668:	69c7      	ldr	r7, [r0, #28]
 800c66a:	b091      	sub	sp, #68	@ 0x44
 800c66c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c670:	ec55 4b10 	vmov	r4, r5, d0
 800c674:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c676:	9107      	str	r1, [sp, #28]
 800c678:	4681      	mov	r9, r0
 800c67a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c67c:	930d      	str	r3, [sp, #52]	@ 0x34
 800c67e:	b97f      	cbnz	r7, 800c6a0 <_dtoa_r+0x40>
 800c680:	2010      	movs	r0, #16
 800c682:	f000 fd95 	bl	800d1b0 <malloc>
 800c686:	4602      	mov	r2, r0
 800c688:	f8c9 001c 	str.w	r0, [r9, #28]
 800c68c:	b920      	cbnz	r0, 800c698 <_dtoa_r+0x38>
 800c68e:	4ba0      	ldr	r3, [pc, #640]	@ (800c910 <_dtoa_r+0x2b0>)
 800c690:	21ef      	movs	r1, #239	@ 0xef
 800c692:	48a0      	ldr	r0, [pc, #640]	@ (800c914 <_dtoa_r+0x2b4>)
 800c694:	f001 fdc0 	bl	800e218 <__assert_func>
 800c698:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c69c:	6007      	str	r7, [r0, #0]
 800c69e:	60c7      	str	r7, [r0, #12]
 800c6a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6a4:	6819      	ldr	r1, [r3, #0]
 800c6a6:	b159      	cbz	r1, 800c6c0 <_dtoa_r+0x60>
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	604a      	str	r2, [r1, #4]
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	4093      	lsls	r3, r2
 800c6b0:	608b      	str	r3, [r1, #8]
 800c6b2:	4648      	mov	r0, r9
 800c6b4:	f000 fe72 	bl	800d39c <_Bfree>
 800c6b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	1e2b      	subs	r3, r5, #0
 800c6c2:	bfbb      	ittet	lt
 800c6c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c6c8:	9303      	strlt	r3, [sp, #12]
 800c6ca:	2300      	movge	r3, #0
 800c6cc:	2201      	movlt	r2, #1
 800c6ce:	bfac      	ite	ge
 800c6d0:	6033      	strge	r3, [r6, #0]
 800c6d2:	6032      	strlt	r2, [r6, #0]
 800c6d4:	4b90      	ldr	r3, [pc, #576]	@ (800c918 <_dtoa_r+0x2b8>)
 800c6d6:	9e03      	ldr	r6, [sp, #12]
 800c6d8:	43b3      	bics	r3, r6
 800c6da:	d110      	bne.n	800c6fe <_dtoa_r+0x9e>
 800c6dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6de:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c6e8:	4323      	orrs	r3, r4
 800c6ea:	f000 84e6 	beq.w	800d0ba <_dtoa_r+0xa5a>
 800c6ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6f0:	4f8a      	ldr	r7, [pc, #552]	@ (800c91c <_dtoa_r+0x2bc>)
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 84e8 	beq.w	800d0c8 <_dtoa_r+0xa68>
 800c6f8:	1cfb      	adds	r3, r7, #3
 800c6fa:	f000 bce3 	b.w	800d0c4 <_dtoa_r+0xa64>
 800c6fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c702:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c70a:	d10a      	bne.n	800c722 <_dtoa_r+0xc2>
 800c70c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c70e:	2301      	movs	r3, #1
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c714:	b113      	cbz	r3, 800c71c <_dtoa_r+0xbc>
 800c716:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c718:	4b81      	ldr	r3, [pc, #516]	@ (800c920 <_dtoa_r+0x2c0>)
 800c71a:	6013      	str	r3, [r2, #0]
 800c71c:	4f81      	ldr	r7, [pc, #516]	@ (800c924 <_dtoa_r+0x2c4>)
 800c71e:	f000 bcd3 	b.w	800d0c8 <_dtoa_r+0xa68>
 800c722:	aa0e      	add	r2, sp, #56	@ 0x38
 800c724:	a90f      	add	r1, sp, #60	@ 0x3c
 800c726:	4648      	mov	r0, r9
 800c728:	eeb0 0b48 	vmov.f64	d0, d8
 800c72c:	f001 f918 	bl	800d960 <__d2b>
 800c730:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c736:	9001      	str	r0, [sp, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d045      	beq.n	800c7c8 <_dtoa_r+0x168>
 800c73c:	eeb0 7b48 	vmov.f64	d7, d8
 800c740:	ee18 1a90 	vmov	r1, s17
 800c744:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c748:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c74c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c750:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c754:	2500      	movs	r5, #0
 800c756:	ee07 1a90 	vmov	s15, r1
 800c75a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c75e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c8f8 <_dtoa_r+0x298>
 800c762:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c766:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c900 <_dtoa_r+0x2a0>
 800c76a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c76e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c908 <_dtoa_r+0x2a8>
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c77a:	eeb0 7b46 	vmov.f64	d7, d6
 800c77e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c782:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c786:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78e:	ee16 8a90 	vmov	r8, s13
 800c792:	d508      	bpl.n	800c7a6 <_dtoa_r+0x146>
 800c794:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c798:	eeb4 6b47 	vcmp.f64	d6, d7
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	bf18      	it	ne
 800c7a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c7a6:	f1b8 0f16 	cmp.w	r8, #22
 800c7aa:	d82b      	bhi.n	800c804 <_dtoa_r+0x1a4>
 800c7ac:	495e      	ldr	r1, [pc, #376]	@ (800c928 <_dtoa_r+0x2c8>)
 800c7ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c7b2:	ed91 7b00 	vldr	d7, [r1]
 800c7b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7be:	d501      	bpl.n	800c7c4 <_dtoa_r+0x164>
 800c7c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	e01e      	b.n	800c806 <_dtoa_r+0x1a6>
 800c7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c7d0:	2920      	cmp	r1, #32
 800c7d2:	bfc1      	itttt	gt
 800c7d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c7d8:	408e      	lslgt	r6, r1
 800c7da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c7de:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c7e2:	bfd6      	itet	le
 800c7e4:	f1c1 0120 	rsble	r1, r1, #32
 800c7e8:	4331      	orrgt	r1, r6
 800c7ea:	fa04 f101 	lslle.w	r1, r4, r1
 800c7ee:	ee07 1a90 	vmov	s15, r1
 800c7f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	ee17 1a90 	vmov	r1, s15
 800c7fc:	2501      	movs	r5, #1
 800c7fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c802:	e7a8      	b.n	800c756 <_dtoa_r+0xf6>
 800c804:	2101      	movs	r1, #1
 800c806:	1ad2      	subs	r2, r2, r3
 800c808:	1e53      	subs	r3, r2, #1
 800c80a:	9306      	str	r3, [sp, #24]
 800c80c:	bf45      	ittet	mi
 800c80e:	f1c2 0301 	rsbmi	r3, r2, #1
 800c812:	9304      	strmi	r3, [sp, #16]
 800c814:	2300      	movpl	r3, #0
 800c816:	2300      	movmi	r3, #0
 800c818:	bf4c      	ite	mi
 800c81a:	9306      	strmi	r3, [sp, #24]
 800c81c:	9304      	strpl	r3, [sp, #16]
 800c81e:	f1b8 0f00 	cmp.w	r8, #0
 800c822:	910c      	str	r1, [sp, #48]	@ 0x30
 800c824:	db18      	blt.n	800c858 <_dtoa_r+0x1f8>
 800c826:	9b06      	ldr	r3, [sp, #24]
 800c828:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c82c:	4443      	add	r3, r8
 800c82e:	9306      	str	r3, [sp, #24]
 800c830:	2300      	movs	r3, #0
 800c832:	9a07      	ldr	r2, [sp, #28]
 800c834:	2a09      	cmp	r2, #9
 800c836:	d845      	bhi.n	800c8c4 <_dtoa_r+0x264>
 800c838:	2a05      	cmp	r2, #5
 800c83a:	bfc4      	itt	gt
 800c83c:	3a04      	subgt	r2, #4
 800c83e:	9207      	strgt	r2, [sp, #28]
 800c840:	9a07      	ldr	r2, [sp, #28]
 800c842:	f1a2 0202 	sub.w	r2, r2, #2
 800c846:	bfcc      	ite	gt
 800c848:	2400      	movgt	r4, #0
 800c84a:	2401      	movle	r4, #1
 800c84c:	2a03      	cmp	r2, #3
 800c84e:	d844      	bhi.n	800c8da <_dtoa_r+0x27a>
 800c850:	e8df f002 	tbb	[pc, r2]
 800c854:	0b173634 	.word	0x0b173634
 800c858:	9b04      	ldr	r3, [sp, #16]
 800c85a:	2200      	movs	r2, #0
 800c85c:	eba3 0308 	sub.w	r3, r3, r8
 800c860:	9304      	str	r3, [sp, #16]
 800c862:	920a      	str	r2, [sp, #40]	@ 0x28
 800c864:	f1c8 0300 	rsb	r3, r8, #0
 800c868:	e7e3      	b.n	800c832 <_dtoa_r+0x1d2>
 800c86a:	2201      	movs	r2, #1
 800c86c:	9208      	str	r2, [sp, #32]
 800c86e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c870:	eb08 0b02 	add.w	fp, r8, r2
 800c874:	f10b 0a01 	add.w	sl, fp, #1
 800c878:	4652      	mov	r2, sl
 800c87a:	2a01      	cmp	r2, #1
 800c87c:	bfb8      	it	lt
 800c87e:	2201      	movlt	r2, #1
 800c880:	e006      	b.n	800c890 <_dtoa_r+0x230>
 800c882:	2201      	movs	r2, #1
 800c884:	9208      	str	r2, [sp, #32]
 800c886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c888:	2a00      	cmp	r2, #0
 800c88a:	dd29      	ble.n	800c8e0 <_dtoa_r+0x280>
 800c88c:	4693      	mov	fp, r2
 800c88e:	4692      	mov	sl, r2
 800c890:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c894:	2100      	movs	r1, #0
 800c896:	2004      	movs	r0, #4
 800c898:	f100 0614 	add.w	r6, r0, #20
 800c89c:	4296      	cmp	r6, r2
 800c89e:	d926      	bls.n	800c8ee <_dtoa_r+0x28e>
 800c8a0:	6079      	str	r1, [r7, #4]
 800c8a2:	4648      	mov	r0, r9
 800c8a4:	9305      	str	r3, [sp, #20]
 800c8a6:	f000 fd39 	bl	800d31c <_Balloc>
 800c8aa:	9b05      	ldr	r3, [sp, #20]
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d13e      	bne.n	800c930 <_dtoa_r+0x2d0>
 800c8b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c92c <_dtoa_r+0x2cc>)
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c8ba:	e6ea      	b.n	800c692 <_dtoa_r+0x32>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	e7e1      	b.n	800c884 <_dtoa_r+0x224>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	e7d3      	b.n	800c86c <_dtoa_r+0x20c>
 800c8c4:	2401      	movs	r4, #1
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c8cc:	f04f 3bff 	mov.w	fp, #4294967295
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	46da      	mov	sl, fp
 800c8d4:	2212      	movs	r2, #18
 800c8d6:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8d8:	e7da      	b.n	800c890 <_dtoa_r+0x230>
 800c8da:	2201      	movs	r2, #1
 800c8dc:	9208      	str	r2, [sp, #32]
 800c8de:	e7f5      	b.n	800c8cc <_dtoa_r+0x26c>
 800c8e0:	f04f 0b01 	mov.w	fp, #1
 800c8e4:	46da      	mov	sl, fp
 800c8e6:	465a      	mov	r2, fp
 800c8e8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c8ec:	e7d0      	b.n	800c890 <_dtoa_r+0x230>
 800c8ee:	3101      	adds	r1, #1
 800c8f0:	0040      	lsls	r0, r0, #1
 800c8f2:	e7d1      	b.n	800c898 <_dtoa_r+0x238>
 800c8f4:	f3af 8000 	nop.w
 800c8f8:	636f4361 	.word	0x636f4361
 800c8fc:	3fd287a7 	.word	0x3fd287a7
 800c900:	8b60c8b3 	.word	0x8b60c8b3
 800c904:	3fc68a28 	.word	0x3fc68a28
 800c908:	509f79fb 	.word	0x509f79fb
 800c90c:	3fd34413 	.word	0x3fd34413
 800c910:	08035c55 	.word	0x08035c55
 800c914:	08035c6c 	.word	0x08035c6c
 800c918:	7ff00000 	.word	0x7ff00000
 800c91c:	08035c51 	.word	0x08035c51
 800c920:	08035c25 	.word	0x08035c25
 800c924:	08035c24 	.word	0x08035c24
 800c928:	08035dc0 	.word	0x08035dc0
 800c92c:	08035cc4 	.word	0x08035cc4
 800c930:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c934:	f1ba 0f0e 	cmp.w	sl, #14
 800c938:	6010      	str	r0, [r2, #0]
 800c93a:	d86e      	bhi.n	800ca1a <_dtoa_r+0x3ba>
 800c93c:	2c00      	cmp	r4, #0
 800c93e:	d06c      	beq.n	800ca1a <_dtoa_r+0x3ba>
 800c940:	f1b8 0f00 	cmp.w	r8, #0
 800c944:	f340 80b4 	ble.w	800cab0 <_dtoa_r+0x450>
 800c948:	4ac8      	ldr	r2, [pc, #800]	@ (800cc6c <_dtoa_r+0x60c>)
 800c94a:	f008 010f 	and.w	r1, r8, #15
 800c94e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c952:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c956:	ed92 7b00 	vldr	d7, [r2]
 800c95a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c95e:	f000 809b 	beq.w	800ca98 <_dtoa_r+0x438>
 800c962:	4ac3      	ldr	r2, [pc, #780]	@ (800cc70 <_dtoa_r+0x610>)
 800c964:	ed92 6b08 	vldr	d6, [r2, #32]
 800c968:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c96c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c970:	f001 010f 	and.w	r1, r1, #15
 800c974:	2203      	movs	r2, #3
 800c976:	48be      	ldr	r0, [pc, #760]	@ (800cc70 <_dtoa_r+0x610>)
 800c978:	2900      	cmp	r1, #0
 800c97a:	f040 808f 	bne.w	800ca9c <_dtoa_r+0x43c>
 800c97e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c982:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c986:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c98a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c98c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c990:	2900      	cmp	r1, #0
 800c992:	f000 80b3 	beq.w	800cafc <_dtoa_r+0x49c>
 800c996:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c99a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a2:	f140 80ab 	bpl.w	800cafc <_dtoa_r+0x49c>
 800c9a6:	f1ba 0f00 	cmp.w	sl, #0
 800c9aa:	f000 80a7 	beq.w	800cafc <_dtoa_r+0x49c>
 800c9ae:	f1bb 0f00 	cmp.w	fp, #0
 800c9b2:	dd30      	ble.n	800ca16 <_dtoa_r+0x3b6>
 800c9b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c9b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c9c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800c9c4:	9105      	str	r1, [sp, #20]
 800c9c6:	3201      	adds	r2, #1
 800c9c8:	465c      	mov	r4, fp
 800c9ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c9ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c9d2:	ee07 2a90 	vmov	s15, r2
 800c9d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c9da:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c9de:	ee15 2a90 	vmov	r2, s11
 800c9e2:	ec51 0b15 	vmov	r0, r1, d5
 800c9e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c9ea:	2c00      	cmp	r4, #0
 800c9ec:	f040 808a 	bne.w	800cb04 <_dtoa_r+0x4a4>
 800c9f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c9f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c9f8:	ec41 0b17 	vmov	d7, r0, r1
 800c9fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca04:	f300 826a 	bgt.w	800cedc <_dtoa_r+0x87c>
 800ca08:	eeb1 7b47 	vneg.f64	d7, d7
 800ca0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca14:	d423      	bmi.n	800ca5e <_dtoa_r+0x3fe>
 800ca16:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	f2c0 8129 	blt.w	800cc74 <_dtoa_r+0x614>
 800ca22:	f1b8 0f0e 	cmp.w	r8, #14
 800ca26:	f300 8125 	bgt.w	800cc74 <_dtoa_r+0x614>
 800ca2a:	4b90      	ldr	r3, [pc, #576]	@ (800cc6c <_dtoa_r+0x60c>)
 800ca2c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ca30:	ed93 6b00 	vldr	d6, [r3]
 800ca34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f280 80c8 	bge.w	800cbcc <_dtoa_r+0x56c>
 800ca3c:	f1ba 0f00 	cmp.w	sl, #0
 800ca40:	f300 80c4 	bgt.w	800cbcc <_dtoa_r+0x56c>
 800ca44:	d10b      	bne.n	800ca5e <_dtoa_r+0x3fe>
 800ca46:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ca4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ca4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5a:	f2c0 823c 	blt.w	800ced6 <_dtoa_r+0x876>
 800ca5e:	2400      	movs	r4, #0
 800ca60:	4625      	mov	r5, r4
 800ca62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca64:	43db      	mvns	r3, r3
 800ca66:	9305      	str	r3, [sp, #20]
 800ca68:	463e      	mov	r6, r7
 800ca6a:	f04f 0800 	mov.w	r8, #0
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4648      	mov	r0, r9
 800ca72:	f000 fc93 	bl	800d39c <_Bfree>
 800ca76:	2d00      	cmp	r5, #0
 800ca78:	f000 80a2 	beq.w	800cbc0 <_dtoa_r+0x560>
 800ca7c:	f1b8 0f00 	cmp.w	r8, #0
 800ca80:	d005      	beq.n	800ca8e <_dtoa_r+0x42e>
 800ca82:	45a8      	cmp	r8, r5
 800ca84:	d003      	beq.n	800ca8e <_dtoa_r+0x42e>
 800ca86:	4641      	mov	r1, r8
 800ca88:	4648      	mov	r0, r9
 800ca8a:	f000 fc87 	bl	800d39c <_Bfree>
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4648      	mov	r0, r9
 800ca92:	f000 fc83 	bl	800d39c <_Bfree>
 800ca96:	e093      	b.n	800cbc0 <_dtoa_r+0x560>
 800ca98:	2202      	movs	r2, #2
 800ca9a:	e76c      	b.n	800c976 <_dtoa_r+0x316>
 800ca9c:	07cc      	lsls	r4, r1, #31
 800ca9e:	d504      	bpl.n	800caaa <_dtoa_r+0x44a>
 800caa0:	ed90 6b00 	vldr	d6, [r0]
 800caa4:	3201      	adds	r2, #1
 800caa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800caaa:	1049      	asrs	r1, r1, #1
 800caac:	3008      	adds	r0, #8
 800caae:	e763      	b.n	800c978 <_dtoa_r+0x318>
 800cab0:	d022      	beq.n	800caf8 <_dtoa_r+0x498>
 800cab2:	f1c8 0100 	rsb	r1, r8, #0
 800cab6:	4a6d      	ldr	r2, [pc, #436]	@ (800cc6c <_dtoa_r+0x60c>)
 800cab8:	f001 000f 	and.w	r0, r1, #15
 800cabc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cac0:	ed92 7b00 	vldr	d7, [r2]
 800cac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cac8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cacc:	4868      	ldr	r0, [pc, #416]	@ (800cc70 <_dtoa_r+0x610>)
 800cace:	1109      	asrs	r1, r1, #4
 800cad0:	2400      	movs	r4, #0
 800cad2:	2202      	movs	r2, #2
 800cad4:	b929      	cbnz	r1, 800cae2 <_dtoa_r+0x482>
 800cad6:	2c00      	cmp	r4, #0
 800cad8:	f43f af57 	beq.w	800c98a <_dtoa_r+0x32a>
 800cadc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cae0:	e753      	b.n	800c98a <_dtoa_r+0x32a>
 800cae2:	07ce      	lsls	r6, r1, #31
 800cae4:	d505      	bpl.n	800caf2 <_dtoa_r+0x492>
 800cae6:	ed90 6b00 	vldr	d6, [r0]
 800caea:	3201      	adds	r2, #1
 800caec:	2401      	movs	r4, #1
 800caee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800caf2:	1049      	asrs	r1, r1, #1
 800caf4:	3008      	adds	r0, #8
 800caf6:	e7ed      	b.n	800cad4 <_dtoa_r+0x474>
 800caf8:	2202      	movs	r2, #2
 800cafa:	e746      	b.n	800c98a <_dtoa_r+0x32a>
 800cafc:	f8cd 8014 	str.w	r8, [sp, #20]
 800cb00:	4654      	mov	r4, sl
 800cb02:	e762      	b.n	800c9ca <_dtoa_r+0x36a>
 800cb04:	4a59      	ldr	r2, [pc, #356]	@ (800cc6c <_dtoa_r+0x60c>)
 800cb06:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cb0a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cb0e:	9a08      	ldr	r2, [sp, #32]
 800cb10:	ec41 0b17 	vmov	d7, r0, r1
 800cb14:	443c      	add	r4, r7
 800cb16:	b34a      	cbz	r2, 800cb6c <_dtoa_r+0x50c>
 800cb18:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cb1c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cb20:	463e      	mov	r6, r7
 800cb22:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cb26:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cb2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cb2e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cb32:	ee14 2a90 	vmov	r2, s9
 800cb36:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cb3a:	3230      	adds	r2, #48	@ 0x30
 800cb3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cb40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb48:	f806 2b01 	strb.w	r2, [r6], #1
 800cb4c:	d438      	bmi.n	800cbc0 <_dtoa_r+0x560>
 800cb4e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cb52:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5a:	d46e      	bmi.n	800cc3a <_dtoa_r+0x5da>
 800cb5c:	42a6      	cmp	r6, r4
 800cb5e:	f43f af5a 	beq.w	800ca16 <_dtoa_r+0x3b6>
 800cb62:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cb66:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cb6a:	e7e0      	b.n	800cb2e <_dtoa_r+0x4ce>
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	463e      	mov	r6, r7
 800cb70:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cb74:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cb78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cb7c:	ee14 2a90 	vmov	r2, s9
 800cb80:	3230      	adds	r2, #48	@ 0x30
 800cb82:	f806 2b01 	strb.w	r2, [r6], #1
 800cb86:	42a6      	cmp	r6, r4
 800cb88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cb8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cb90:	d119      	bne.n	800cbc6 <_dtoa_r+0x566>
 800cb92:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cb96:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cb9a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba2:	dc4a      	bgt.n	800cc3a <_dtoa_r+0x5da>
 800cba4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cba8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb0:	f57f af31 	bpl.w	800ca16 <_dtoa_r+0x3b6>
 800cbb4:	460e      	mov	r6, r1
 800cbb6:	3901      	subs	r1, #1
 800cbb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbbc:	2b30      	cmp	r3, #48	@ 0x30
 800cbbe:	d0f9      	beq.n	800cbb4 <_dtoa_r+0x554>
 800cbc0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cbc4:	e027      	b.n	800cc16 <_dtoa_r+0x5b6>
 800cbc6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cbca:	e7d5      	b.n	800cb78 <_dtoa_r+0x518>
 800cbcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbd0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cbd4:	463e      	mov	r6, r7
 800cbd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cbda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cbde:	ee15 3a10 	vmov	r3, s10
 800cbe2:	3330      	adds	r3, #48	@ 0x30
 800cbe4:	f806 3b01 	strb.w	r3, [r6], #1
 800cbe8:	1bf3      	subs	r3, r6, r7
 800cbea:	459a      	cmp	sl, r3
 800cbec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cbf0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cbf4:	d132      	bne.n	800cc5c <_dtoa_r+0x5fc>
 800cbf6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cbfa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc02:	dc18      	bgt.n	800cc36 <_dtoa_r+0x5d6>
 800cc04:	eeb4 7b46 	vcmp.f64	d7, d6
 800cc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0c:	d103      	bne.n	800cc16 <_dtoa_r+0x5b6>
 800cc0e:	ee15 3a10 	vmov	r3, s10
 800cc12:	07db      	lsls	r3, r3, #31
 800cc14:	d40f      	bmi.n	800cc36 <_dtoa_r+0x5d6>
 800cc16:	9901      	ldr	r1, [sp, #4]
 800cc18:	4648      	mov	r0, r9
 800cc1a:	f000 fbbf 	bl	800d39c <_Bfree>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc22:	7033      	strb	r3, [r6, #0]
 800cc24:	f108 0301 	add.w	r3, r8, #1
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 824b 	beq.w	800d0c8 <_dtoa_r+0xa68>
 800cc32:	601e      	str	r6, [r3, #0]
 800cc34:	e248      	b.n	800d0c8 <_dtoa_r+0xa68>
 800cc36:	f8cd 8014 	str.w	r8, [sp, #20]
 800cc3a:	4633      	mov	r3, r6
 800cc3c:	461e      	mov	r6, r3
 800cc3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc42:	2a39      	cmp	r2, #57	@ 0x39
 800cc44:	d106      	bne.n	800cc54 <_dtoa_r+0x5f4>
 800cc46:	429f      	cmp	r7, r3
 800cc48:	d1f8      	bne.n	800cc3c <_dtoa_r+0x5dc>
 800cc4a:	9a05      	ldr	r2, [sp, #20]
 800cc4c:	3201      	adds	r2, #1
 800cc4e:	9205      	str	r2, [sp, #20]
 800cc50:	2230      	movs	r2, #48	@ 0x30
 800cc52:	703a      	strb	r2, [r7, #0]
 800cc54:	781a      	ldrb	r2, [r3, #0]
 800cc56:	3201      	adds	r2, #1
 800cc58:	701a      	strb	r2, [r3, #0]
 800cc5a:	e7b1      	b.n	800cbc0 <_dtoa_r+0x560>
 800cc5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc68:	d1b5      	bne.n	800cbd6 <_dtoa_r+0x576>
 800cc6a:	e7d4      	b.n	800cc16 <_dtoa_r+0x5b6>
 800cc6c:	08035dc0 	.word	0x08035dc0
 800cc70:	08035d98 	.word	0x08035d98
 800cc74:	9908      	ldr	r1, [sp, #32]
 800cc76:	2900      	cmp	r1, #0
 800cc78:	f000 80e9 	beq.w	800ce4e <_dtoa_r+0x7ee>
 800cc7c:	9907      	ldr	r1, [sp, #28]
 800cc7e:	2901      	cmp	r1, #1
 800cc80:	f300 80cb 	bgt.w	800ce1a <_dtoa_r+0x7ba>
 800cc84:	2d00      	cmp	r5, #0
 800cc86:	f000 80c4 	beq.w	800ce12 <_dtoa_r+0x7b2>
 800cc8a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cc8e:	9e04      	ldr	r6, [sp, #16]
 800cc90:	461c      	mov	r4, r3
 800cc92:	9305      	str	r3, [sp, #20]
 800cc94:	9b04      	ldr	r3, [sp, #16]
 800cc96:	4413      	add	r3, r2
 800cc98:	9304      	str	r3, [sp, #16]
 800cc9a:	9b06      	ldr	r3, [sp, #24]
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	4413      	add	r3, r2
 800cca0:	4648      	mov	r0, r9
 800cca2:	9306      	str	r3, [sp, #24]
 800cca4:	f000 fc2e 	bl	800d504 <__i2b>
 800cca8:	9b05      	ldr	r3, [sp, #20]
 800ccaa:	4605      	mov	r5, r0
 800ccac:	b166      	cbz	r6, 800ccc8 <_dtoa_r+0x668>
 800ccae:	9a06      	ldr	r2, [sp, #24]
 800ccb0:	2a00      	cmp	r2, #0
 800ccb2:	dd09      	ble.n	800ccc8 <_dtoa_r+0x668>
 800ccb4:	42b2      	cmp	r2, r6
 800ccb6:	9904      	ldr	r1, [sp, #16]
 800ccb8:	bfa8      	it	ge
 800ccba:	4632      	movge	r2, r6
 800ccbc:	1a89      	subs	r1, r1, r2
 800ccbe:	9104      	str	r1, [sp, #16]
 800ccc0:	9906      	ldr	r1, [sp, #24]
 800ccc2:	1ab6      	subs	r6, r6, r2
 800ccc4:	1a8a      	subs	r2, r1, r2
 800ccc6:	9206      	str	r2, [sp, #24]
 800ccc8:	b30b      	cbz	r3, 800cd0e <_dtoa_r+0x6ae>
 800ccca:	9a08      	ldr	r2, [sp, #32]
 800cccc:	2a00      	cmp	r2, #0
 800ccce:	f000 80c5 	beq.w	800ce5c <_dtoa_r+0x7fc>
 800ccd2:	2c00      	cmp	r4, #0
 800ccd4:	f000 80bf 	beq.w	800ce56 <_dtoa_r+0x7f6>
 800ccd8:	4629      	mov	r1, r5
 800ccda:	4622      	mov	r2, r4
 800ccdc:	4648      	mov	r0, r9
 800ccde:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cce0:	f000 fcc8 	bl	800d674 <__pow5mult>
 800cce4:	9a01      	ldr	r2, [sp, #4]
 800cce6:	4601      	mov	r1, r0
 800cce8:	4605      	mov	r5, r0
 800ccea:	4648      	mov	r0, r9
 800ccec:	f000 fc20 	bl	800d530 <__multiply>
 800ccf0:	9901      	ldr	r1, [sp, #4]
 800ccf2:	9005      	str	r0, [sp, #20]
 800ccf4:	4648      	mov	r0, r9
 800ccf6:	f000 fb51 	bl	800d39c <_Bfree>
 800ccfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccfc:	1b1b      	subs	r3, r3, r4
 800ccfe:	f000 80b0 	beq.w	800ce62 <_dtoa_r+0x802>
 800cd02:	9905      	ldr	r1, [sp, #20]
 800cd04:	461a      	mov	r2, r3
 800cd06:	4648      	mov	r0, r9
 800cd08:	f000 fcb4 	bl	800d674 <__pow5mult>
 800cd0c:	9001      	str	r0, [sp, #4]
 800cd0e:	2101      	movs	r1, #1
 800cd10:	4648      	mov	r0, r9
 800cd12:	f000 fbf7 	bl	800d504 <__i2b>
 800cd16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd18:	4604      	mov	r4, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 81da 	beq.w	800d0d4 <_dtoa_r+0xa74>
 800cd20:	461a      	mov	r2, r3
 800cd22:	4601      	mov	r1, r0
 800cd24:	4648      	mov	r0, r9
 800cd26:	f000 fca5 	bl	800d674 <__pow5mult>
 800cd2a:	9b07      	ldr	r3, [sp, #28]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	4604      	mov	r4, r0
 800cd30:	f300 80a0 	bgt.w	800ce74 <_dtoa_r+0x814>
 800cd34:	9b02      	ldr	r3, [sp, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f040 8096 	bne.w	800ce68 <_dtoa_r+0x808>
 800cd3c:	9b03      	ldr	r3, [sp, #12]
 800cd3e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cd42:	2a00      	cmp	r2, #0
 800cd44:	f040 8092 	bne.w	800ce6c <_dtoa_r+0x80c>
 800cd48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cd4c:	0d12      	lsrs	r2, r2, #20
 800cd4e:	0512      	lsls	r2, r2, #20
 800cd50:	2a00      	cmp	r2, #0
 800cd52:	f000 808d 	beq.w	800ce70 <_dtoa_r+0x810>
 800cd56:	9b04      	ldr	r3, [sp, #16]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	9304      	str	r3, [sp, #16]
 800cd5c:	9b06      	ldr	r3, [sp, #24]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	9306      	str	r3, [sp, #24]
 800cd62:	2301      	movs	r3, #1
 800cd64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 81b9 	beq.w	800d0e0 <_dtoa_r+0xa80>
 800cd6e:	6922      	ldr	r2, [r4, #16]
 800cd70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cd74:	6910      	ldr	r0, [r2, #16]
 800cd76:	f000 fb79 	bl	800d46c <__hi0bits>
 800cd7a:	f1c0 0020 	rsb	r0, r0, #32
 800cd7e:	9b06      	ldr	r3, [sp, #24]
 800cd80:	4418      	add	r0, r3
 800cd82:	f010 001f 	ands.w	r0, r0, #31
 800cd86:	f000 8081 	beq.w	800ce8c <_dtoa_r+0x82c>
 800cd8a:	f1c0 0220 	rsb	r2, r0, #32
 800cd8e:	2a04      	cmp	r2, #4
 800cd90:	dd73      	ble.n	800ce7a <_dtoa_r+0x81a>
 800cd92:	9b04      	ldr	r3, [sp, #16]
 800cd94:	f1c0 001c 	rsb	r0, r0, #28
 800cd98:	4403      	add	r3, r0
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	9b06      	ldr	r3, [sp, #24]
 800cd9e:	4406      	add	r6, r0
 800cda0:	4403      	add	r3, r0
 800cda2:	9306      	str	r3, [sp, #24]
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	dd05      	ble.n	800cdb6 <_dtoa_r+0x756>
 800cdaa:	9901      	ldr	r1, [sp, #4]
 800cdac:	461a      	mov	r2, r3
 800cdae:	4648      	mov	r0, r9
 800cdb0:	f000 fcba 	bl	800d728 <__lshift>
 800cdb4:	9001      	str	r0, [sp, #4]
 800cdb6:	9b06      	ldr	r3, [sp, #24]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	dd05      	ble.n	800cdc8 <_dtoa_r+0x768>
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	4648      	mov	r0, r9
 800cdc2:	f000 fcb1 	bl	800d728 <__lshift>
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d060      	beq.n	800ce90 <_dtoa_r+0x830>
 800cdce:	9801      	ldr	r0, [sp, #4]
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	f000 fd15 	bl	800d800 <__mcmp>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	da5a      	bge.n	800ce90 <_dtoa_r+0x830>
 800cdda:	f108 33ff 	add.w	r3, r8, #4294967295
 800cdde:	9305      	str	r3, [sp, #20]
 800cde0:	9901      	ldr	r1, [sp, #4]
 800cde2:	2300      	movs	r3, #0
 800cde4:	220a      	movs	r2, #10
 800cde6:	4648      	mov	r0, r9
 800cde8:	f000 fafa 	bl	800d3e0 <__multadd>
 800cdec:	9b08      	ldr	r3, [sp, #32]
 800cdee:	9001      	str	r0, [sp, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 8177 	beq.w	800d0e4 <_dtoa_r+0xa84>
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	220a      	movs	r2, #10
 800cdfc:	4648      	mov	r0, r9
 800cdfe:	f000 faef 	bl	800d3e0 <__multadd>
 800ce02:	f1bb 0f00 	cmp.w	fp, #0
 800ce06:	4605      	mov	r5, r0
 800ce08:	dc6e      	bgt.n	800cee8 <_dtoa_r+0x888>
 800ce0a:	9b07      	ldr	r3, [sp, #28]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	dc48      	bgt.n	800cea2 <_dtoa_r+0x842>
 800ce10:	e06a      	b.n	800cee8 <_dtoa_r+0x888>
 800ce12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce18:	e739      	b.n	800cc8e <_dtoa_r+0x62e>
 800ce1a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	db07      	blt.n	800ce32 <_dtoa_r+0x7d2>
 800ce22:	f1ba 0f00 	cmp.w	sl, #0
 800ce26:	eba3 0404 	sub.w	r4, r3, r4
 800ce2a:	db0b      	blt.n	800ce44 <_dtoa_r+0x7e4>
 800ce2c:	9e04      	ldr	r6, [sp, #16]
 800ce2e:	4652      	mov	r2, sl
 800ce30:	e72f      	b.n	800cc92 <_dtoa_r+0x632>
 800ce32:	1ae2      	subs	r2, r4, r3
 800ce34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce36:	9e04      	ldr	r6, [sp, #16]
 800ce38:	4413      	add	r3, r2
 800ce3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce3c:	4652      	mov	r2, sl
 800ce3e:	4623      	mov	r3, r4
 800ce40:	2400      	movs	r4, #0
 800ce42:	e726      	b.n	800cc92 <_dtoa_r+0x632>
 800ce44:	9a04      	ldr	r2, [sp, #16]
 800ce46:	eba2 060a 	sub.w	r6, r2, sl
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	e721      	b.n	800cc92 <_dtoa_r+0x632>
 800ce4e:	9e04      	ldr	r6, [sp, #16]
 800ce50:	9d08      	ldr	r5, [sp, #32]
 800ce52:	461c      	mov	r4, r3
 800ce54:	e72a      	b.n	800ccac <_dtoa_r+0x64c>
 800ce56:	9a01      	ldr	r2, [sp, #4]
 800ce58:	9205      	str	r2, [sp, #20]
 800ce5a:	e752      	b.n	800cd02 <_dtoa_r+0x6a2>
 800ce5c:	9901      	ldr	r1, [sp, #4]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	e751      	b.n	800cd06 <_dtoa_r+0x6a6>
 800ce62:	9b05      	ldr	r3, [sp, #20]
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	e752      	b.n	800cd0e <_dtoa_r+0x6ae>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	e77b      	b.n	800cd64 <_dtoa_r+0x704>
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	e779      	b.n	800cd64 <_dtoa_r+0x704>
 800ce70:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ce72:	e778      	b.n	800cd66 <_dtoa_r+0x706>
 800ce74:	2300      	movs	r3, #0
 800ce76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce78:	e779      	b.n	800cd6e <_dtoa_r+0x70e>
 800ce7a:	d093      	beq.n	800cda4 <_dtoa_r+0x744>
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	321c      	adds	r2, #28
 800ce80:	4413      	add	r3, r2
 800ce82:	9304      	str	r3, [sp, #16]
 800ce84:	9b06      	ldr	r3, [sp, #24]
 800ce86:	4416      	add	r6, r2
 800ce88:	4413      	add	r3, r2
 800ce8a:	e78a      	b.n	800cda2 <_dtoa_r+0x742>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	e7f5      	b.n	800ce7c <_dtoa_r+0x81c>
 800ce90:	f1ba 0f00 	cmp.w	sl, #0
 800ce94:	f8cd 8014 	str.w	r8, [sp, #20]
 800ce98:	46d3      	mov	fp, sl
 800ce9a:	dc21      	bgt.n	800cee0 <_dtoa_r+0x880>
 800ce9c:	9b07      	ldr	r3, [sp, #28]
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	dd1e      	ble.n	800cee0 <_dtoa_r+0x880>
 800cea2:	f1bb 0f00 	cmp.w	fp, #0
 800cea6:	f47f addc 	bne.w	800ca62 <_dtoa_r+0x402>
 800ceaa:	4621      	mov	r1, r4
 800ceac:	465b      	mov	r3, fp
 800ceae:	2205      	movs	r2, #5
 800ceb0:	4648      	mov	r0, r9
 800ceb2:	f000 fa95 	bl	800d3e0 <__multadd>
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	4604      	mov	r4, r0
 800ceba:	9801      	ldr	r0, [sp, #4]
 800cebc:	f000 fca0 	bl	800d800 <__mcmp>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	f77f adce 	ble.w	800ca62 <_dtoa_r+0x402>
 800cec6:	463e      	mov	r6, r7
 800cec8:	2331      	movs	r3, #49	@ 0x31
 800ceca:	f806 3b01 	strb.w	r3, [r6], #1
 800cece:	9b05      	ldr	r3, [sp, #20]
 800ced0:	3301      	adds	r3, #1
 800ced2:	9305      	str	r3, [sp, #20]
 800ced4:	e5c9      	b.n	800ca6a <_dtoa_r+0x40a>
 800ced6:	f8cd 8014 	str.w	r8, [sp, #20]
 800ceda:	4654      	mov	r4, sl
 800cedc:	4625      	mov	r5, r4
 800cede:	e7f2      	b.n	800cec6 <_dtoa_r+0x866>
 800cee0:	9b08      	ldr	r3, [sp, #32]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 8102 	beq.w	800d0ec <_dtoa_r+0xa8c>
 800cee8:	2e00      	cmp	r6, #0
 800ceea:	dd05      	ble.n	800cef8 <_dtoa_r+0x898>
 800ceec:	4629      	mov	r1, r5
 800ceee:	4632      	mov	r2, r6
 800cef0:	4648      	mov	r0, r9
 800cef2:	f000 fc19 	bl	800d728 <__lshift>
 800cef6:	4605      	mov	r5, r0
 800cef8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d058      	beq.n	800cfb0 <_dtoa_r+0x950>
 800cefe:	6869      	ldr	r1, [r5, #4]
 800cf00:	4648      	mov	r0, r9
 800cf02:	f000 fa0b 	bl	800d31c <_Balloc>
 800cf06:	4606      	mov	r6, r0
 800cf08:	b928      	cbnz	r0, 800cf16 <_dtoa_r+0x8b6>
 800cf0a:	4b82      	ldr	r3, [pc, #520]	@ (800d114 <_dtoa_r+0xab4>)
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf12:	f7ff bbbe 	b.w	800c692 <_dtoa_r+0x32>
 800cf16:	692a      	ldr	r2, [r5, #16]
 800cf18:	3202      	adds	r2, #2
 800cf1a:	0092      	lsls	r2, r2, #2
 800cf1c:	f105 010c 	add.w	r1, r5, #12
 800cf20:	300c      	adds	r0, #12
 800cf22:	f7ff fb06 	bl	800c532 <memcpy>
 800cf26:	2201      	movs	r2, #1
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4648      	mov	r0, r9
 800cf2c:	f000 fbfc 	bl	800d728 <__lshift>
 800cf30:	1c7b      	adds	r3, r7, #1
 800cf32:	9304      	str	r3, [sp, #16]
 800cf34:	eb07 030b 	add.w	r3, r7, fp
 800cf38:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf3a:	9b02      	ldr	r3, [sp, #8]
 800cf3c:	f003 0301 	and.w	r3, r3, #1
 800cf40:	46a8      	mov	r8, r5
 800cf42:	9308      	str	r3, [sp, #32]
 800cf44:	4605      	mov	r5, r0
 800cf46:	9b04      	ldr	r3, [sp, #16]
 800cf48:	9801      	ldr	r0, [sp, #4]
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	f103 3bff 	add.w	fp, r3, #4294967295
 800cf50:	f7ff fafd 	bl	800c54e <quorem>
 800cf54:	4641      	mov	r1, r8
 800cf56:	9002      	str	r0, [sp, #8]
 800cf58:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cf5c:	9801      	ldr	r0, [sp, #4]
 800cf5e:	f000 fc4f 	bl	800d800 <__mcmp>
 800cf62:	462a      	mov	r2, r5
 800cf64:	9006      	str	r0, [sp, #24]
 800cf66:	4621      	mov	r1, r4
 800cf68:	4648      	mov	r0, r9
 800cf6a:	f000 fc65 	bl	800d838 <__mdiff>
 800cf6e:	68c2      	ldr	r2, [r0, #12]
 800cf70:	4606      	mov	r6, r0
 800cf72:	b9fa      	cbnz	r2, 800cfb4 <_dtoa_r+0x954>
 800cf74:	4601      	mov	r1, r0
 800cf76:	9801      	ldr	r0, [sp, #4]
 800cf78:	f000 fc42 	bl	800d800 <__mcmp>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4648      	mov	r0, r9
 800cf82:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf84:	f000 fa0a 	bl	800d39c <_Bfree>
 800cf88:	9b07      	ldr	r3, [sp, #28]
 800cf8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf8c:	9e04      	ldr	r6, [sp, #16]
 800cf8e:	ea42 0103 	orr.w	r1, r2, r3
 800cf92:	9b08      	ldr	r3, [sp, #32]
 800cf94:	4319      	orrs	r1, r3
 800cf96:	d10f      	bne.n	800cfb8 <_dtoa_r+0x958>
 800cf98:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cf9c:	d028      	beq.n	800cff0 <_dtoa_r+0x990>
 800cf9e:	9b06      	ldr	r3, [sp, #24]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dd02      	ble.n	800cfaa <_dtoa_r+0x94a>
 800cfa4:	9b02      	ldr	r3, [sp, #8]
 800cfa6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800cfaa:	f88b a000 	strb.w	sl, [fp]
 800cfae:	e55e      	b.n	800ca6e <_dtoa_r+0x40e>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	e7bd      	b.n	800cf30 <_dtoa_r+0x8d0>
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	e7e2      	b.n	800cf7e <_dtoa_r+0x91e>
 800cfb8:	9b06      	ldr	r3, [sp, #24]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	db04      	blt.n	800cfc8 <_dtoa_r+0x968>
 800cfbe:	9907      	ldr	r1, [sp, #28]
 800cfc0:	430b      	orrs	r3, r1
 800cfc2:	9908      	ldr	r1, [sp, #32]
 800cfc4:	430b      	orrs	r3, r1
 800cfc6:	d120      	bne.n	800d00a <_dtoa_r+0x9aa>
 800cfc8:	2a00      	cmp	r2, #0
 800cfca:	ddee      	ble.n	800cfaa <_dtoa_r+0x94a>
 800cfcc:	9901      	ldr	r1, [sp, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	4648      	mov	r0, r9
 800cfd2:	f000 fba9 	bl	800d728 <__lshift>
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	9001      	str	r0, [sp, #4]
 800cfda:	f000 fc11 	bl	800d800 <__mcmp>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	dc03      	bgt.n	800cfea <_dtoa_r+0x98a>
 800cfe2:	d1e2      	bne.n	800cfaa <_dtoa_r+0x94a>
 800cfe4:	f01a 0f01 	tst.w	sl, #1
 800cfe8:	d0df      	beq.n	800cfaa <_dtoa_r+0x94a>
 800cfea:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cfee:	d1d9      	bne.n	800cfa4 <_dtoa_r+0x944>
 800cff0:	2339      	movs	r3, #57	@ 0x39
 800cff2:	f88b 3000 	strb.w	r3, [fp]
 800cff6:	4633      	mov	r3, r6
 800cff8:	461e      	mov	r6, r3
 800cffa:	3b01      	subs	r3, #1
 800cffc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d000:	2a39      	cmp	r2, #57	@ 0x39
 800d002:	d052      	beq.n	800d0aa <_dtoa_r+0xa4a>
 800d004:	3201      	adds	r2, #1
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	e531      	b.n	800ca6e <_dtoa_r+0x40e>
 800d00a:	2a00      	cmp	r2, #0
 800d00c:	dd07      	ble.n	800d01e <_dtoa_r+0x9be>
 800d00e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d012:	d0ed      	beq.n	800cff0 <_dtoa_r+0x990>
 800d014:	f10a 0301 	add.w	r3, sl, #1
 800d018:	f88b 3000 	strb.w	r3, [fp]
 800d01c:	e527      	b.n	800ca6e <_dtoa_r+0x40e>
 800d01e:	9b04      	ldr	r3, [sp, #16]
 800d020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d022:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d026:	4293      	cmp	r3, r2
 800d028:	d029      	beq.n	800d07e <_dtoa_r+0xa1e>
 800d02a:	9901      	ldr	r1, [sp, #4]
 800d02c:	2300      	movs	r3, #0
 800d02e:	220a      	movs	r2, #10
 800d030:	4648      	mov	r0, r9
 800d032:	f000 f9d5 	bl	800d3e0 <__multadd>
 800d036:	45a8      	cmp	r8, r5
 800d038:	9001      	str	r0, [sp, #4]
 800d03a:	f04f 0300 	mov.w	r3, #0
 800d03e:	f04f 020a 	mov.w	r2, #10
 800d042:	4641      	mov	r1, r8
 800d044:	4648      	mov	r0, r9
 800d046:	d107      	bne.n	800d058 <_dtoa_r+0x9f8>
 800d048:	f000 f9ca 	bl	800d3e0 <__multadd>
 800d04c:	4680      	mov	r8, r0
 800d04e:	4605      	mov	r5, r0
 800d050:	9b04      	ldr	r3, [sp, #16]
 800d052:	3301      	adds	r3, #1
 800d054:	9304      	str	r3, [sp, #16]
 800d056:	e776      	b.n	800cf46 <_dtoa_r+0x8e6>
 800d058:	f000 f9c2 	bl	800d3e0 <__multadd>
 800d05c:	4629      	mov	r1, r5
 800d05e:	4680      	mov	r8, r0
 800d060:	2300      	movs	r3, #0
 800d062:	220a      	movs	r2, #10
 800d064:	4648      	mov	r0, r9
 800d066:	f000 f9bb 	bl	800d3e0 <__multadd>
 800d06a:	4605      	mov	r5, r0
 800d06c:	e7f0      	b.n	800d050 <_dtoa_r+0x9f0>
 800d06e:	f1bb 0f00 	cmp.w	fp, #0
 800d072:	bfcc      	ite	gt
 800d074:	465e      	movgt	r6, fp
 800d076:	2601      	movle	r6, #1
 800d078:	443e      	add	r6, r7
 800d07a:	f04f 0800 	mov.w	r8, #0
 800d07e:	9901      	ldr	r1, [sp, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	4648      	mov	r0, r9
 800d084:	f000 fb50 	bl	800d728 <__lshift>
 800d088:	4621      	mov	r1, r4
 800d08a:	9001      	str	r0, [sp, #4]
 800d08c:	f000 fbb8 	bl	800d800 <__mcmp>
 800d090:	2800      	cmp	r0, #0
 800d092:	dcb0      	bgt.n	800cff6 <_dtoa_r+0x996>
 800d094:	d102      	bne.n	800d09c <_dtoa_r+0xa3c>
 800d096:	f01a 0f01 	tst.w	sl, #1
 800d09a:	d1ac      	bne.n	800cff6 <_dtoa_r+0x996>
 800d09c:	4633      	mov	r3, r6
 800d09e:	461e      	mov	r6, r3
 800d0a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0a4:	2a30      	cmp	r2, #48	@ 0x30
 800d0a6:	d0fa      	beq.n	800d09e <_dtoa_r+0xa3e>
 800d0a8:	e4e1      	b.n	800ca6e <_dtoa_r+0x40e>
 800d0aa:	429f      	cmp	r7, r3
 800d0ac:	d1a4      	bne.n	800cff8 <_dtoa_r+0x998>
 800d0ae:	9b05      	ldr	r3, [sp, #20]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	9305      	str	r3, [sp, #20]
 800d0b4:	2331      	movs	r3, #49	@ 0x31
 800d0b6:	703b      	strb	r3, [r7, #0]
 800d0b8:	e4d9      	b.n	800ca6e <_dtoa_r+0x40e>
 800d0ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d0bc:	4f16      	ldr	r7, [pc, #88]	@ (800d118 <_dtoa_r+0xab8>)
 800d0be:	b11b      	cbz	r3, 800d0c8 <_dtoa_r+0xa68>
 800d0c0:	f107 0308 	add.w	r3, r7, #8
 800d0c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	b011      	add	sp, #68	@ 0x44
 800d0cc:	ecbd 8b02 	vpop	{d8}
 800d0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d4:	9b07      	ldr	r3, [sp, #28]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	f77f ae2c 	ble.w	800cd34 <_dtoa_r+0x6d4>
 800d0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	e64c      	b.n	800cd7e <_dtoa_r+0x71e>
 800d0e4:	f1bb 0f00 	cmp.w	fp, #0
 800d0e8:	f77f aed8 	ble.w	800ce9c <_dtoa_r+0x83c>
 800d0ec:	463e      	mov	r6, r7
 800d0ee:	9801      	ldr	r0, [sp, #4]
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	f7ff fa2c 	bl	800c54e <quorem>
 800d0f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d0fa:	f806 ab01 	strb.w	sl, [r6], #1
 800d0fe:	1bf2      	subs	r2, r6, r7
 800d100:	4593      	cmp	fp, r2
 800d102:	ddb4      	ble.n	800d06e <_dtoa_r+0xa0e>
 800d104:	9901      	ldr	r1, [sp, #4]
 800d106:	2300      	movs	r3, #0
 800d108:	220a      	movs	r2, #10
 800d10a:	4648      	mov	r0, r9
 800d10c:	f000 f968 	bl	800d3e0 <__multadd>
 800d110:	9001      	str	r0, [sp, #4]
 800d112:	e7ec      	b.n	800d0ee <_dtoa_r+0xa8e>
 800d114:	08035cc4 	.word	0x08035cc4
 800d118:	08035c48 	.word	0x08035c48

0800d11c <_free_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4605      	mov	r5, r0
 800d120:	2900      	cmp	r1, #0
 800d122:	d041      	beq.n	800d1a8 <_free_r+0x8c>
 800d124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d128:	1f0c      	subs	r4, r1, #4
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	bfb8      	it	lt
 800d12e:	18e4      	addlt	r4, r4, r3
 800d130:	f000 f8e8 	bl	800d304 <__malloc_lock>
 800d134:	4a1d      	ldr	r2, [pc, #116]	@ (800d1ac <_free_r+0x90>)
 800d136:	6813      	ldr	r3, [r2, #0]
 800d138:	b933      	cbnz	r3, 800d148 <_free_r+0x2c>
 800d13a:	6063      	str	r3, [r4, #4]
 800d13c:	6014      	str	r4, [r2, #0]
 800d13e:	4628      	mov	r0, r5
 800d140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d144:	f000 b8e4 	b.w	800d310 <__malloc_unlock>
 800d148:	42a3      	cmp	r3, r4
 800d14a:	d908      	bls.n	800d15e <_free_r+0x42>
 800d14c:	6820      	ldr	r0, [r4, #0]
 800d14e:	1821      	adds	r1, r4, r0
 800d150:	428b      	cmp	r3, r1
 800d152:	bf01      	itttt	eq
 800d154:	6819      	ldreq	r1, [r3, #0]
 800d156:	685b      	ldreq	r3, [r3, #4]
 800d158:	1809      	addeq	r1, r1, r0
 800d15a:	6021      	streq	r1, [r4, #0]
 800d15c:	e7ed      	b.n	800d13a <_free_r+0x1e>
 800d15e:	461a      	mov	r2, r3
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	b10b      	cbz	r3, 800d168 <_free_r+0x4c>
 800d164:	42a3      	cmp	r3, r4
 800d166:	d9fa      	bls.n	800d15e <_free_r+0x42>
 800d168:	6811      	ldr	r1, [r2, #0]
 800d16a:	1850      	adds	r0, r2, r1
 800d16c:	42a0      	cmp	r0, r4
 800d16e:	d10b      	bne.n	800d188 <_free_r+0x6c>
 800d170:	6820      	ldr	r0, [r4, #0]
 800d172:	4401      	add	r1, r0
 800d174:	1850      	adds	r0, r2, r1
 800d176:	4283      	cmp	r3, r0
 800d178:	6011      	str	r1, [r2, #0]
 800d17a:	d1e0      	bne.n	800d13e <_free_r+0x22>
 800d17c:	6818      	ldr	r0, [r3, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	6053      	str	r3, [r2, #4]
 800d182:	4408      	add	r0, r1
 800d184:	6010      	str	r0, [r2, #0]
 800d186:	e7da      	b.n	800d13e <_free_r+0x22>
 800d188:	d902      	bls.n	800d190 <_free_r+0x74>
 800d18a:	230c      	movs	r3, #12
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	e7d6      	b.n	800d13e <_free_r+0x22>
 800d190:	6820      	ldr	r0, [r4, #0]
 800d192:	1821      	adds	r1, r4, r0
 800d194:	428b      	cmp	r3, r1
 800d196:	bf04      	itt	eq
 800d198:	6819      	ldreq	r1, [r3, #0]
 800d19a:	685b      	ldreq	r3, [r3, #4]
 800d19c:	6063      	str	r3, [r4, #4]
 800d19e:	bf04      	itt	eq
 800d1a0:	1809      	addeq	r1, r1, r0
 800d1a2:	6021      	streq	r1, [r4, #0]
 800d1a4:	6054      	str	r4, [r2, #4]
 800d1a6:	e7ca      	b.n	800d13e <_free_r+0x22>
 800d1a8:	bd38      	pop	{r3, r4, r5, pc}
 800d1aa:	bf00      	nop
 800d1ac:	24001960 	.word	0x24001960

0800d1b0 <malloc>:
 800d1b0:	4b02      	ldr	r3, [pc, #8]	@ (800d1bc <malloc+0xc>)
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	f000 b825 	b.w	800d204 <_malloc_r>
 800d1ba:	bf00      	nop
 800d1bc:	240000ac 	.word	0x240000ac

0800d1c0 <sbrk_aligned>:
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	4e0f      	ldr	r6, [pc, #60]	@ (800d200 <sbrk_aligned+0x40>)
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	6831      	ldr	r1, [r6, #0]
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	b911      	cbnz	r1, 800d1d2 <sbrk_aligned+0x12>
 800d1cc:	f001 f814 	bl	800e1f8 <_sbrk_r>
 800d1d0:	6030      	str	r0, [r6, #0]
 800d1d2:	4621      	mov	r1, r4
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	f001 f80f 	bl	800e1f8 <_sbrk_r>
 800d1da:	1c43      	adds	r3, r0, #1
 800d1dc:	d103      	bne.n	800d1e6 <sbrk_aligned+0x26>
 800d1de:	f04f 34ff 	mov.w	r4, #4294967295
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	bd70      	pop	{r4, r5, r6, pc}
 800d1e6:	1cc4      	adds	r4, r0, #3
 800d1e8:	f024 0403 	bic.w	r4, r4, #3
 800d1ec:	42a0      	cmp	r0, r4
 800d1ee:	d0f8      	beq.n	800d1e2 <sbrk_aligned+0x22>
 800d1f0:	1a21      	subs	r1, r4, r0
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f001 f800 	bl	800e1f8 <_sbrk_r>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d1f2      	bne.n	800d1e2 <sbrk_aligned+0x22>
 800d1fc:	e7ef      	b.n	800d1de <sbrk_aligned+0x1e>
 800d1fe:	bf00      	nop
 800d200:	2400195c 	.word	0x2400195c

0800d204 <_malloc_r>:
 800d204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d208:	1ccd      	adds	r5, r1, #3
 800d20a:	f025 0503 	bic.w	r5, r5, #3
 800d20e:	3508      	adds	r5, #8
 800d210:	2d0c      	cmp	r5, #12
 800d212:	bf38      	it	cc
 800d214:	250c      	movcc	r5, #12
 800d216:	2d00      	cmp	r5, #0
 800d218:	4606      	mov	r6, r0
 800d21a:	db01      	blt.n	800d220 <_malloc_r+0x1c>
 800d21c:	42a9      	cmp	r1, r5
 800d21e:	d904      	bls.n	800d22a <_malloc_r+0x26>
 800d220:	230c      	movs	r3, #12
 800d222:	6033      	str	r3, [r6, #0]
 800d224:	2000      	movs	r0, #0
 800d226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d22a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d300 <_malloc_r+0xfc>
 800d22e:	f000 f869 	bl	800d304 <__malloc_lock>
 800d232:	f8d8 3000 	ldr.w	r3, [r8]
 800d236:	461c      	mov	r4, r3
 800d238:	bb44      	cbnz	r4, 800d28c <_malloc_r+0x88>
 800d23a:	4629      	mov	r1, r5
 800d23c:	4630      	mov	r0, r6
 800d23e:	f7ff ffbf 	bl	800d1c0 <sbrk_aligned>
 800d242:	1c43      	adds	r3, r0, #1
 800d244:	4604      	mov	r4, r0
 800d246:	d158      	bne.n	800d2fa <_malloc_r+0xf6>
 800d248:	f8d8 4000 	ldr.w	r4, [r8]
 800d24c:	4627      	mov	r7, r4
 800d24e:	2f00      	cmp	r7, #0
 800d250:	d143      	bne.n	800d2da <_malloc_r+0xd6>
 800d252:	2c00      	cmp	r4, #0
 800d254:	d04b      	beq.n	800d2ee <_malloc_r+0xea>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	4639      	mov	r1, r7
 800d25a:	4630      	mov	r0, r6
 800d25c:	eb04 0903 	add.w	r9, r4, r3
 800d260:	f000 ffca 	bl	800e1f8 <_sbrk_r>
 800d264:	4581      	cmp	r9, r0
 800d266:	d142      	bne.n	800d2ee <_malloc_r+0xea>
 800d268:	6821      	ldr	r1, [r4, #0]
 800d26a:	1a6d      	subs	r5, r5, r1
 800d26c:	4629      	mov	r1, r5
 800d26e:	4630      	mov	r0, r6
 800d270:	f7ff ffa6 	bl	800d1c0 <sbrk_aligned>
 800d274:	3001      	adds	r0, #1
 800d276:	d03a      	beq.n	800d2ee <_malloc_r+0xea>
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	442b      	add	r3, r5
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	f8d8 3000 	ldr.w	r3, [r8]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	bb62      	cbnz	r2, 800d2e0 <_malloc_r+0xdc>
 800d286:	f8c8 7000 	str.w	r7, [r8]
 800d28a:	e00f      	b.n	800d2ac <_malloc_r+0xa8>
 800d28c:	6822      	ldr	r2, [r4, #0]
 800d28e:	1b52      	subs	r2, r2, r5
 800d290:	d420      	bmi.n	800d2d4 <_malloc_r+0xd0>
 800d292:	2a0b      	cmp	r2, #11
 800d294:	d917      	bls.n	800d2c6 <_malloc_r+0xc2>
 800d296:	1961      	adds	r1, r4, r5
 800d298:	42a3      	cmp	r3, r4
 800d29a:	6025      	str	r5, [r4, #0]
 800d29c:	bf18      	it	ne
 800d29e:	6059      	strne	r1, [r3, #4]
 800d2a0:	6863      	ldr	r3, [r4, #4]
 800d2a2:	bf08      	it	eq
 800d2a4:	f8c8 1000 	streq.w	r1, [r8]
 800d2a8:	5162      	str	r2, [r4, r5]
 800d2aa:	604b      	str	r3, [r1, #4]
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f000 f82f 	bl	800d310 <__malloc_unlock>
 800d2b2:	f104 000b 	add.w	r0, r4, #11
 800d2b6:	1d23      	adds	r3, r4, #4
 800d2b8:	f020 0007 	bic.w	r0, r0, #7
 800d2bc:	1ac2      	subs	r2, r0, r3
 800d2be:	bf1c      	itt	ne
 800d2c0:	1a1b      	subne	r3, r3, r0
 800d2c2:	50a3      	strne	r3, [r4, r2]
 800d2c4:	e7af      	b.n	800d226 <_malloc_r+0x22>
 800d2c6:	6862      	ldr	r2, [r4, #4]
 800d2c8:	42a3      	cmp	r3, r4
 800d2ca:	bf0c      	ite	eq
 800d2cc:	f8c8 2000 	streq.w	r2, [r8]
 800d2d0:	605a      	strne	r2, [r3, #4]
 800d2d2:	e7eb      	b.n	800d2ac <_malloc_r+0xa8>
 800d2d4:	4623      	mov	r3, r4
 800d2d6:	6864      	ldr	r4, [r4, #4]
 800d2d8:	e7ae      	b.n	800d238 <_malloc_r+0x34>
 800d2da:	463c      	mov	r4, r7
 800d2dc:	687f      	ldr	r7, [r7, #4]
 800d2de:	e7b6      	b.n	800d24e <_malloc_r+0x4a>
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	42a3      	cmp	r3, r4
 800d2e6:	d1fb      	bne.n	800d2e0 <_malloc_r+0xdc>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	6053      	str	r3, [r2, #4]
 800d2ec:	e7de      	b.n	800d2ac <_malloc_r+0xa8>
 800d2ee:	230c      	movs	r3, #12
 800d2f0:	6033      	str	r3, [r6, #0]
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f000 f80c 	bl	800d310 <__malloc_unlock>
 800d2f8:	e794      	b.n	800d224 <_malloc_r+0x20>
 800d2fa:	6005      	str	r5, [r0, #0]
 800d2fc:	e7d6      	b.n	800d2ac <_malloc_r+0xa8>
 800d2fe:	bf00      	nop
 800d300:	24001960 	.word	0x24001960

0800d304 <__malloc_lock>:
 800d304:	4801      	ldr	r0, [pc, #4]	@ (800d30c <__malloc_lock+0x8>)
 800d306:	f7ff b912 	b.w	800c52e <__retarget_lock_acquire_recursive>
 800d30a:	bf00      	nop
 800d30c:	24001958 	.word	0x24001958

0800d310 <__malloc_unlock>:
 800d310:	4801      	ldr	r0, [pc, #4]	@ (800d318 <__malloc_unlock+0x8>)
 800d312:	f7ff b90d 	b.w	800c530 <__retarget_lock_release_recursive>
 800d316:	bf00      	nop
 800d318:	24001958 	.word	0x24001958

0800d31c <_Balloc>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	69c6      	ldr	r6, [r0, #28]
 800d320:	4604      	mov	r4, r0
 800d322:	460d      	mov	r5, r1
 800d324:	b976      	cbnz	r6, 800d344 <_Balloc+0x28>
 800d326:	2010      	movs	r0, #16
 800d328:	f7ff ff42 	bl	800d1b0 <malloc>
 800d32c:	4602      	mov	r2, r0
 800d32e:	61e0      	str	r0, [r4, #28]
 800d330:	b920      	cbnz	r0, 800d33c <_Balloc+0x20>
 800d332:	4b18      	ldr	r3, [pc, #96]	@ (800d394 <_Balloc+0x78>)
 800d334:	4818      	ldr	r0, [pc, #96]	@ (800d398 <_Balloc+0x7c>)
 800d336:	216b      	movs	r1, #107	@ 0x6b
 800d338:	f000 ff6e 	bl	800e218 <__assert_func>
 800d33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d340:	6006      	str	r6, [r0, #0]
 800d342:	60c6      	str	r6, [r0, #12]
 800d344:	69e6      	ldr	r6, [r4, #28]
 800d346:	68f3      	ldr	r3, [r6, #12]
 800d348:	b183      	cbz	r3, 800d36c <_Balloc+0x50>
 800d34a:	69e3      	ldr	r3, [r4, #28]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d352:	b9b8      	cbnz	r0, 800d384 <_Balloc+0x68>
 800d354:	2101      	movs	r1, #1
 800d356:	fa01 f605 	lsl.w	r6, r1, r5
 800d35a:	1d72      	adds	r2, r6, #5
 800d35c:	0092      	lsls	r2, r2, #2
 800d35e:	4620      	mov	r0, r4
 800d360:	f000 ff78 	bl	800e254 <_calloc_r>
 800d364:	b160      	cbz	r0, 800d380 <_Balloc+0x64>
 800d366:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d36a:	e00e      	b.n	800d38a <_Balloc+0x6e>
 800d36c:	2221      	movs	r2, #33	@ 0x21
 800d36e:	2104      	movs	r1, #4
 800d370:	4620      	mov	r0, r4
 800d372:	f000 ff6f 	bl	800e254 <_calloc_r>
 800d376:	69e3      	ldr	r3, [r4, #28]
 800d378:	60f0      	str	r0, [r6, #12]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1e4      	bne.n	800d34a <_Balloc+0x2e>
 800d380:	2000      	movs	r0, #0
 800d382:	bd70      	pop	{r4, r5, r6, pc}
 800d384:	6802      	ldr	r2, [r0, #0]
 800d386:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d38a:	2300      	movs	r3, #0
 800d38c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d390:	e7f7      	b.n	800d382 <_Balloc+0x66>
 800d392:	bf00      	nop
 800d394:	08035c55 	.word	0x08035c55
 800d398:	08035cd5 	.word	0x08035cd5

0800d39c <_Bfree>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	69c6      	ldr	r6, [r0, #28]
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	b976      	cbnz	r6, 800d3c4 <_Bfree+0x28>
 800d3a6:	2010      	movs	r0, #16
 800d3a8:	f7ff ff02 	bl	800d1b0 <malloc>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	61e8      	str	r0, [r5, #28]
 800d3b0:	b920      	cbnz	r0, 800d3bc <_Bfree+0x20>
 800d3b2:	4b09      	ldr	r3, [pc, #36]	@ (800d3d8 <_Bfree+0x3c>)
 800d3b4:	4809      	ldr	r0, [pc, #36]	@ (800d3dc <_Bfree+0x40>)
 800d3b6:	218f      	movs	r1, #143	@ 0x8f
 800d3b8:	f000 ff2e 	bl	800e218 <__assert_func>
 800d3bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3c0:	6006      	str	r6, [r0, #0]
 800d3c2:	60c6      	str	r6, [r0, #12]
 800d3c4:	b13c      	cbz	r4, 800d3d6 <_Bfree+0x3a>
 800d3c6:	69eb      	ldr	r3, [r5, #28]
 800d3c8:	6862      	ldr	r2, [r4, #4]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3d0:	6021      	str	r1, [r4, #0]
 800d3d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3d6:	bd70      	pop	{r4, r5, r6, pc}
 800d3d8:	08035c55 	.word	0x08035c55
 800d3dc:	08035cd5 	.word	0x08035cd5

0800d3e0 <__multadd>:
 800d3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e4:	690d      	ldr	r5, [r1, #16]
 800d3e6:	4607      	mov	r7, r0
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	461e      	mov	r6, r3
 800d3ec:	f101 0c14 	add.w	ip, r1, #20
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	f8dc 3000 	ldr.w	r3, [ip]
 800d3f6:	b299      	uxth	r1, r3
 800d3f8:	fb02 6101 	mla	r1, r2, r1, r6
 800d3fc:	0c1e      	lsrs	r6, r3, #16
 800d3fe:	0c0b      	lsrs	r3, r1, #16
 800d400:	fb02 3306 	mla	r3, r2, r6, r3
 800d404:	b289      	uxth	r1, r1
 800d406:	3001      	adds	r0, #1
 800d408:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d40c:	4285      	cmp	r5, r0
 800d40e:	f84c 1b04 	str.w	r1, [ip], #4
 800d412:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d416:	dcec      	bgt.n	800d3f2 <__multadd+0x12>
 800d418:	b30e      	cbz	r6, 800d45e <__multadd+0x7e>
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	42ab      	cmp	r3, r5
 800d41e:	dc19      	bgt.n	800d454 <__multadd+0x74>
 800d420:	6861      	ldr	r1, [r4, #4]
 800d422:	4638      	mov	r0, r7
 800d424:	3101      	adds	r1, #1
 800d426:	f7ff ff79 	bl	800d31c <_Balloc>
 800d42a:	4680      	mov	r8, r0
 800d42c:	b928      	cbnz	r0, 800d43a <__multadd+0x5a>
 800d42e:	4602      	mov	r2, r0
 800d430:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <__multadd+0x84>)
 800d432:	480d      	ldr	r0, [pc, #52]	@ (800d468 <__multadd+0x88>)
 800d434:	21ba      	movs	r1, #186	@ 0xba
 800d436:	f000 feef 	bl	800e218 <__assert_func>
 800d43a:	6922      	ldr	r2, [r4, #16]
 800d43c:	3202      	adds	r2, #2
 800d43e:	f104 010c 	add.w	r1, r4, #12
 800d442:	0092      	lsls	r2, r2, #2
 800d444:	300c      	adds	r0, #12
 800d446:	f7ff f874 	bl	800c532 <memcpy>
 800d44a:	4621      	mov	r1, r4
 800d44c:	4638      	mov	r0, r7
 800d44e:	f7ff ffa5 	bl	800d39c <_Bfree>
 800d452:	4644      	mov	r4, r8
 800d454:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d458:	3501      	adds	r5, #1
 800d45a:	615e      	str	r6, [r3, #20]
 800d45c:	6125      	str	r5, [r4, #16]
 800d45e:	4620      	mov	r0, r4
 800d460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d464:	08035cc4 	.word	0x08035cc4
 800d468:	08035cd5 	.word	0x08035cd5

0800d46c <__hi0bits>:
 800d46c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d470:	4603      	mov	r3, r0
 800d472:	bf36      	itet	cc
 800d474:	0403      	lslcc	r3, r0, #16
 800d476:	2000      	movcs	r0, #0
 800d478:	2010      	movcc	r0, #16
 800d47a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d47e:	bf3c      	itt	cc
 800d480:	021b      	lslcc	r3, r3, #8
 800d482:	3008      	addcc	r0, #8
 800d484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d488:	bf3c      	itt	cc
 800d48a:	011b      	lslcc	r3, r3, #4
 800d48c:	3004      	addcc	r0, #4
 800d48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d492:	bf3c      	itt	cc
 800d494:	009b      	lslcc	r3, r3, #2
 800d496:	3002      	addcc	r0, #2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	db05      	blt.n	800d4a8 <__hi0bits+0x3c>
 800d49c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d4a0:	f100 0001 	add.w	r0, r0, #1
 800d4a4:	bf08      	it	eq
 800d4a6:	2020      	moveq	r0, #32
 800d4a8:	4770      	bx	lr

0800d4aa <__lo0bits>:
 800d4aa:	6803      	ldr	r3, [r0, #0]
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	f013 0007 	ands.w	r0, r3, #7
 800d4b2:	d00b      	beq.n	800d4cc <__lo0bits+0x22>
 800d4b4:	07d9      	lsls	r1, r3, #31
 800d4b6:	d421      	bmi.n	800d4fc <__lo0bits+0x52>
 800d4b8:	0798      	lsls	r0, r3, #30
 800d4ba:	bf49      	itett	mi
 800d4bc:	085b      	lsrmi	r3, r3, #1
 800d4be:	089b      	lsrpl	r3, r3, #2
 800d4c0:	2001      	movmi	r0, #1
 800d4c2:	6013      	strmi	r3, [r2, #0]
 800d4c4:	bf5c      	itt	pl
 800d4c6:	6013      	strpl	r3, [r2, #0]
 800d4c8:	2002      	movpl	r0, #2
 800d4ca:	4770      	bx	lr
 800d4cc:	b299      	uxth	r1, r3
 800d4ce:	b909      	cbnz	r1, 800d4d4 <__lo0bits+0x2a>
 800d4d0:	0c1b      	lsrs	r3, r3, #16
 800d4d2:	2010      	movs	r0, #16
 800d4d4:	b2d9      	uxtb	r1, r3
 800d4d6:	b909      	cbnz	r1, 800d4dc <__lo0bits+0x32>
 800d4d8:	3008      	adds	r0, #8
 800d4da:	0a1b      	lsrs	r3, r3, #8
 800d4dc:	0719      	lsls	r1, r3, #28
 800d4de:	bf04      	itt	eq
 800d4e0:	091b      	lsreq	r3, r3, #4
 800d4e2:	3004      	addeq	r0, #4
 800d4e4:	0799      	lsls	r1, r3, #30
 800d4e6:	bf04      	itt	eq
 800d4e8:	089b      	lsreq	r3, r3, #2
 800d4ea:	3002      	addeq	r0, #2
 800d4ec:	07d9      	lsls	r1, r3, #31
 800d4ee:	d403      	bmi.n	800d4f8 <__lo0bits+0x4e>
 800d4f0:	085b      	lsrs	r3, r3, #1
 800d4f2:	f100 0001 	add.w	r0, r0, #1
 800d4f6:	d003      	beq.n	800d500 <__lo0bits+0x56>
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	4770      	bx	lr
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	4770      	bx	lr
 800d500:	2020      	movs	r0, #32
 800d502:	4770      	bx	lr

0800d504 <__i2b>:
 800d504:	b510      	push	{r4, lr}
 800d506:	460c      	mov	r4, r1
 800d508:	2101      	movs	r1, #1
 800d50a:	f7ff ff07 	bl	800d31c <_Balloc>
 800d50e:	4602      	mov	r2, r0
 800d510:	b928      	cbnz	r0, 800d51e <__i2b+0x1a>
 800d512:	4b05      	ldr	r3, [pc, #20]	@ (800d528 <__i2b+0x24>)
 800d514:	4805      	ldr	r0, [pc, #20]	@ (800d52c <__i2b+0x28>)
 800d516:	f240 1145 	movw	r1, #325	@ 0x145
 800d51a:	f000 fe7d 	bl	800e218 <__assert_func>
 800d51e:	2301      	movs	r3, #1
 800d520:	6144      	str	r4, [r0, #20]
 800d522:	6103      	str	r3, [r0, #16]
 800d524:	bd10      	pop	{r4, pc}
 800d526:	bf00      	nop
 800d528:	08035cc4 	.word	0x08035cc4
 800d52c:	08035cd5 	.word	0x08035cd5

0800d530 <__multiply>:
 800d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	4617      	mov	r7, r2
 800d536:	690a      	ldr	r2, [r1, #16]
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	bfa8      	it	ge
 800d53e:	463b      	movge	r3, r7
 800d540:	4689      	mov	r9, r1
 800d542:	bfa4      	itt	ge
 800d544:	460f      	movge	r7, r1
 800d546:	4699      	movge	r9, r3
 800d548:	693d      	ldr	r5, [r7, #16]
 800d54a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	eb05 060a 	add.w	r6, r5, sl
 800d556:	42b3      	cmp	r3, r6
 800d558:	b085      	sub	sp, #20
 800d55a:	bfb8      	it	lt
 800d55c:	3101      	addlt	r1, #1
 800d55e:	f7ff fedd 	bl	800d31c <_Balloc>
 800d562:	b930      	cbnz	r0, 800d572 <__multiply+0x42>
 800d564:	4602      	mov	r2, r0
 800d566:	4b41      	ldr	r3, [pc, #260]	@ (800d66c <__multiply+0x13c>)
 800d568:	4841      	ldr	r0, [pc, #260]	@ (800d670 <__multiply+0x140>)
 800d56a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d56e:	f000 fe53 	bl	800e218 <__assert_func>
 800d572:	f100 0414 	add.w	r4, r0, #20
 800d576:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d57a:	4623      	mov	r3, r4
 800d57c:	2200      	movs	r2, #0
 800d57e:	4573      	cmp	r3, lr
 800d580:	d320      	bcc.n	800d5c4 <__multiply+0x94>
 800d582:	f107 0814 	add.w	r8, r7, #20
 800d586:	f109 0114 	add.w	r1, r9, #20
 800d58a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d58e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d592:	9302      	str	r3, [sp, #8]
 800d594:	1beb      	subs	r3, r5, r7
 800d596:	3b15      	subs	r3, #21
 800d598:	f023 0303 	bic.w	r3, r3, #3
 800d59c:	3304      	adds	r3, #4
 800d59e:	3715      	adds	r7, #21
 800d5a0:	42bd      	cmp	r5, r7
 800d5a2:	bf38      	it	cc
 800d5a4:	2304      	movcc	r3, #4
 800d5a6:	9301      	str	r3, [sp, #4]
 800d5a8:	9b02      	ldr	r3, [sp, #8]
 800d5aa:	9103      	str	r1, [sp, #12]
 800d5ac:	428b      	cmp	r3, r1
 800d5ae:	d80c      	bhi.n	800d5ca <__multiply+0x9a>
 800d5b0:	2e00      	cmp	r6, #0
 800d5b2:	dd03      	ble.n	800d5bc <__multiply+0x8c>
 800d5b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d055      	beq.n	800d668 <__multiply+0x138>
 800d5bc:	6106      	str	r6, [r0, #16]
 800d5be:	b005      	add	sp, #20
 800d5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c4:	f843 2b04 	str.w	r2, [r3], #4
 800d5c8:	e7d9      	b.n	800d57e <__multiply+0x4e>
 800d5ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5ce:	f1ba 0f00 	cmp.w	sl, #0
 800d5d2:	d01f      	beq.n	800d614 <__multiply+0xe4>
 800d5d4:	46c4      	mov	ip, r8
 800d5d6:	46a1      	mov	r9, r4
 800d5d8:	2700      	movs	r7, #0
 800d5da:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d5de:	f8d9 3000 	ldr.w	r3, [r9]
 800d5e2:	fa1f fb82 	uxth.w	fp, r2
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d5ec:	443b      	add	r3, r7
 800d5ee:	f8d9 7000 	ldr.w	r7, [r9]
 800d5f2:	0c12      	lsrs	r2, r2, #16
 800d5f4:	0c3f      	lsrs	r7, r7, #16
 800d5f6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d5fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d604:	4565      	cmp	r5, ip
 800d606:	f849 3b04 	str.w	r3, [r9], #4
 800d60a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d60e:	d8e4      	bhi.n	800d5da <__multiply+0xaa>
 800d610:	9b01      	ldr	r3, [sp, #4]
 800d612:	50e7      	str	r7, [r4, r3]
 800d614:	9b03      	ldr	r3, [sp, #12]
 800d616:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d61a:	3104      	adds	r1, #4
 800d61c:	f1b9 0f00 	cmp.w	r9, #0
 800d620:	d020      	beq.n	800d664 <__multiply+0x134>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	4647      	mov	r7, r8
 800d626:	46a4      	mov	ip, r4
 800d628:	f04f 0a00 	mov.w	sl, #0
 800d62c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d630:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d634:	fb09 220b 	mla	r2, r9, fp, r2
 800d638:	4452      	add	r2, sl
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d640:	f84c 3b04 	str.w	r3, [ip], #4
 800d644:	f857 3b04 	ldr.w	r3, [r7], #4
 800d648:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d64c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d650:	fb09 330a 	mla	r3, r9, sl, r3
 800d654:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d658:	42bd      	cmp	r5, r7
 800d65a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d65e:	d8e5      	bhi.n	800d62c <__multiply+0xfc>
 800d660:	9a01      	ldr	r2, [sp, #4]
 800d662:	50a3      	str	r3, [r4, r2]
 800d664:	3404      	adds	r4, #4
 800d666:	e79f      	b.n	800d5a8 <__multiply+0x78>
 800d668:	3e01      	subs	r6, #1
 800d66a:	e7a1      	b.n	800d5b0 <__multiply+0x80>
 800d66c:	08035cc4 	.word	0x08035cc4
 800d670:	08035cd5 	.word	0x08035cd5

0800d674 <__pow5mult>:
 800d674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d678:	4615      	mov	r5, r2
 800d67a:	f012 0203 	ands.w	r2, r2, #3
 800d67e:	4607      	mov	r7, r0
 800d680:	460e      	mov	r6, r1
 800d682:	d007      	beq.n	800d694 <__pow5mult+0x20>
 800d684:	4c25      	ldr	r4, [pc, #148]	@ (800d71c <__pow5mult+0xa8>)
 800d686:	3a01      	subs	r2, #1
 800d688:	2300      	movs	r3, #0
 800d68a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d68e:	f7ff fea7 	bl	800d3e0 <__multadd>
 800d692:	4606      	mov	r6, r0
 800d694:	10ad      	asrs	r5, r5, #2
 800d696:	d03d      	beq.n	800d714 <__pow5mult+0xa0>
 800d698:	69fc      	ldr	r4, [r7, #28]
 800d69a:	b97c      	cbnz	r4, 800d6bc <__pow5mult+0x48>
 800d69c:	2010      	movs	r0, #16
 800d69e:	f7ff fd87 	bl	800d1b0 <malloc>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	61f8      	str	r0, [r7, #28]
 800d6a6:	b928      	cbnz	r0, 800d6b4 <__pow5mult+0x40>
 800d6a8:	4b1d      	ldr	r3, [pc, #116]	@ (800d720 <__pow5mult+0xac>)
 800d6aa:	481e      	ldr	r0, [pc, #120]	@ (800d724 <__pow5mult+0xb0>)
 800d6ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d6b0:	f000 fdb2 	bl	800e218 <__assert_func>
 800d6b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6b8:	6004      	str	r4, [r0, #0]
 800d6ba:	60c4      	str	r4, [r0, #12]
 800d6bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6c4:	b94c      	cbnz	r4, 800d6da <__pow5mult+0x66>
 800d6c6:	f240 2171 	movw	r1, #625	@ 0x271
 800d6ca:	4638      	mov	r0, r7
 800d6cc:	f7ff ff1a 	bl	800d504 <__i2b>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	6003      	str	r3, [r0, #0]
 800d6da:	f04f 0900 	mov.w	r9, #0
 800d6de:	07eb      	lsls	r3, r5, #31
 800d6e0:	d50a      	bpl.n	800d6f8 <__pow5mult+0x84>
 800d6e2:	4631      	mov	r1, r6
 800d6e4:	4622      	mov	r2, r4
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	f7ff ff22 	bl	800d530 <__multiply>
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	4680      	mov	r8, r0
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7ff fe53 	bl	800d39c <_Bfree>
 800d6f6:	4646      	mov	r6, r8
 800d6f8:	106d      	asrs	r5, r5, #1
 800d6fa:	d00b      	beq.n	800d714 <__pow5mult+0xa0>
 800d6fc:	6820      	ldr	r0, [r4, #0]
 800d6fe:	b938      	cbnz	r0, 800d710 <__pow5mult+0x9c>
 800d700:	4622      	mov	r2, r4
 800d702:	4621      	mov	r1, r4
 800d704:	4638      	mov	r0, r7
 800d706:	f7ff ff13 	bl	800d530 <__multiply>
 800d70a:	6020      	str	r0, [r4, #0]
 800d70c:	f8c0 9000 	str.w	r9, [r0]
 800d710:	4604      	mov	r4, r0
 800d712:	e7e4      	b.n	800d6de <__pow5mult+0x6a>
 800d714:	4630      	mov	r0, r6
 800d716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d71a:	bf00      	nop
 800d71c:	08035d88 	.word	0x08035d88
 800d720:	08035c55 	.word	0x08035c55
 800d724:	08035cd5 	.word	0x08035cd5

0800d728 <__lshift>:
 800d728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d72c:	460c      	mov	r4, r1
 800d72e:	6849      	ldr	r1, [r1, #4]
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d736:	68a3      	ldr	r3, [r4, #8]
 800d738:	4607      	mov	r7, r0
 800d73a:	4691      	mov	r9, r2
 800d73c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d740:	f108 0601 	add.w	r6, r8, #1
 800d744:	42b3      	cmp	r3, r6
 800d746:	db0b      	blt.n	800d760 <__lshift+0x38>
 800d748:	4638      	mov	r0, r7
 800d74a:	f7ff fde7 	bl	800d31c <_Balloc>
 800d74e:	4605      	mov	r5, r0
 800d750:	b948      	cbnz	r0, 800d766 <__lshift+0x3e>
 800d752:	4602      	mov	r2, r0
 800d754:	4b28      	ldr	r3, [pc, #160]	@ (800d7f8 <__lshift+0xd0>)
 800d756:	4829      	ldr	r0, [pc, #164]	@ (800d7fc <__lshift+0xd4>)
 800d758:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d75c:	f000 fd5c 	bl	800e218 <__assert_func>
 800d760:	3101      	adds	r1, #1
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	e7ee      	b.n	800d744 <__lshift+0x1c>
 800d766:	2300      	movs	r3, #0
 800d768:	f100 0114 	add.w	r1, r0, #20
 800d76c:	f100 0210 	add.w	r2, r0, #16
 800d770:	4618      	mov	r0, r3
 800d772:	4553      	cmp	r3, sl
 800d774:	db33      	blt.n	800d7de <__lshift+0xb6>
 800d776:	6920      	ldr	r0, [r4, #16]
 800d778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d77c:	f104 0314 	add.w	r3, r4, #20
 800d780:	f019 091f 	ands.w	r9, r9, #31
 800d784:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d788:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d78c:	d02b      	beq.n	800d7e6 <__lshift+0xbe>
 800d78e:	f1c9 0e20 	rsb	lr, r9, #32
 800d792:	468a      	mov	sl, r1
 800d794:	2200      	movs	r2, #0
 800d796:	6818      	ldr	r0, [r3, #0]
 800d798:	fa00 f009 	lsl.w	r0, r0, r9
 800d79c:	4310      	orrs	r0, r2
 800d79e:	f84a 0b04 	str.w	r0, [sl], #4
 800d7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a6:	459c      	cmp	ip, r3
 800d7a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7ac:	d8f3      	bhi.n	800d796 <__lshift+0x6e>
 800d7ae:	ebac 0304 	sub.w	r3, ip, r4
 800d7b2:	3b15      	subs	r3, #21
 800d7b4:	f023 0303 	bic.w	r3, r3, #3
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	f104 0015 	add.w	r0, r4, #21
 800d7be:	4560      	cmp	r0, ip
 800d7c0:	bf88      	it	hi
 800d7c2:	2304      	movhi	r3, #4
 800d7c4:	50ca      	str	r2, [r1, r3]
 800d7c6:	b10a      	cbz	r2, 800d7cc <__lshift+0xa4>
 800d7c8:	f108 0602 	add.w	r6, r8, #2
 800d7cc:	3e01      	subs	r6, #1
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	612e      	str	r6, [r5, #16]
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	f7ff fde2 	bl	800d39c <_Bfree>
 800d7d8:	4628      	mov	r0, r5
 800d7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7de:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	e7c5      	b.n	800d772 <__lshift+0x4a>
 800d7e6:	3904      	subs	r1, #4
 800d7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7f0:	459c      	cmp	ip, r3
 800d7f2:	d8f9      	bhi.n	800d7e8 <__lshift+0xc0>
 800d7f4:	e7ea      	b.n	800d7cc <__lshift+0xa4>
 800d7f6:	bf00      	nop
 800d7f8:	08035cc4 	.word	0x08035cc4
 800d7fc:	08035cd5 	.word	0x08035cd5

0800d800 <__mcmp>:
 800d800:	690a      	ldr	r2, [r1, #16]
 800d802:	4603      	mov	r3, r0
 800d804:	6900      	ldr	r0, [r0, #16]
 800d806:	1a80      	subs	r0, r0, r2
 800d808:	b530      	push	{r4, r5, lr}
 800d80a:	d10e      	bne.n	800d82a <__mcmp+0x2a>
 800d80c:	3314      	adds	r3, #20
 800d80e:	3114      	adds	r1, #20
 800d810:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d814:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d818:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d81c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d820:	4295      	cmp	r5, r2
 800d822:	d003      	beq.n	800d82c <__mcmp+0x2c>
 800d824:	d205      	bcs.n	800d832 <__mcmp+0x32>
 800d826:	f04f 30ff 	mov.w	r0, #4294967295
 800d82a:	bd30      	pop	{r4, r5, pc}
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	d3f3      	bcc.n	800d818 <__mcmp+0x18>
 800d830:	e7fb      	b.n	800d82a <__mcmp+0x2a>
 800d832:	2001      	movs	r0, #1
 800d834:	e7f9      	b.n	800d82a <__mcmp+0x2a>
	...

0800d838 <__mdiff>:
 800d838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83c:	4689      	mov	r9, r1
 800d83e:	4606      	mov	r6, r0
 800d840:	4611      	mov	r1, r2
 800d842:	4648      	mov	r0, r9
 800d844:	4614      	mov	r4, r2
 800d846:	f7ff ffdb 	bl	800d800 <__mcmp>
 800d84a:	1e05      	subs	r5, r0, #0
 800d84c:	d112      	bne.n	800d874 <__mdiff+0x3c>
 800d84e:	4629      	mov	r1, r5
 800d850:	4630      	mov	r0, r6
 800d852:	f7ff fd63 	bl	800d31c <_Balloc>
 800d856:	4602      	mov	r2, r0
 800d858:	b928      	cbnz	r0, 800d866 <__mdiff+0x2e>
 800d85a:	4b3f      	ldr	r3, [pc, #252]	@ (800d958 <__mdiff+0x120>)
 800d85c:	f240 2137 	movw	r1, #567	@ 0x237
 800d860:	483e      	ldr	r0, [pc, #248]	@ (800d95c <__mdiff+0x124>)
 800d862:	f000 fcd9 	bl	800e218 <__assert_func>
 800d866:	2301      	movs	r3, #1
 800d868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d86c:	4610      	mov	r0, r2
 800d86e:	b003      	add	sp, #12
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	bfbc      	itt	lt
 800d876:	464b      	movlt	r3, r9
 800d878:	46a1      	movlt	r9, r4
 800d87a:	4630      	mov	r0, r6
 800d87c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d880:	bfba      	itte	lt
 800d882:	461c      	movlt	r4, r3
 800d884:	2501      	movlt	r5, #1
 800d886:	2500      	movge	r5, #0
 800d888:	f7ff fd48 	bl	800d31c <_Balloc>
 800d88c:	4602      	mov	r2, r0
 800d88e:	b918      	cbnz	r0, 800d898 <__mdiff+0x60>
 800d890:	4b31      	ldr	r3, [pc, #196]	@ (800d958 <__mdiff+0x120>)
 800d892:	f240 2145 	movw	r1, #581	@ 0x245
 800d896:	e7e3      	b.n	800d860 <__mdiff+0x28>
 800d898:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d89c:	6926      	ldr	r6, [r4, #16]
 800d89e:	60c5      	str	r5, [r0, #12]
 800d8a0:	f109 0310 	add.w	r3, r9, #16
 800d8a4:	f109 0514 	add.w	r5, r9, #20
 800d8a8:	f104 0e14 	add.w	lr, r4, #20
 800d8ac:	f100 0b14 	add.w	fp, r0, #20
 800d8b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d8b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	46d9      	mov	r9, fp
 800d8bc:	f04f 0c00 	mov.w	ip, #0
 800d8c0:	9b01      	ldr	r3, [sp, #4]
 800d8c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	fa1f f38a 	uxth.w	r3, sl
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	b283      	uxth	r3, r0
 800d8d4:	1acb      	subs	r3, r1, r3
 800d8d6:	0c00      	lsrs	r0, r0, #16
 800d8d8:	4463      	add	r3, ip
 800d8da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d8de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8e8:	4576      	cmp	r6, lr
 800d8ea:	f849 3b04 	str.w	r3, [r9], #4
 800d8ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8f2:	d8e5      	bhi.n	800d8c0 <__mdiff+0x88>
 800d8f4:	1b33      	subs	r3, r6, r4
 800d8f6:	3b15      	subs	r3, #21
 800d8f8:	f023 0303 	bic.w	r3, r3, #3
 800d8fc:	3415      	adds	r4, #21
 800d8fe:	3304      	adds	r3, #4
 800d900:	42a6      	cmp	r6, r4
 800d902:	bf38      	it	cc
 800d904:	2304      	movcc	r3, #4
 800d906:	441d      	add	r5, r3
 800d908:	445b      	add	r3, fp
 800d90a:	461e      	mov	r6, r3
 800d90c:	462c      	mov	r4, r5
 800d90e:	4544      	cmp	r4, r8
 800d910:	d30e      	bcc.n	800d930 <__mdiff+0xf8>
 800d912:	f108 0103 	add.w	r1, r8, #3
 800d916:	1b49      	subs	r1, r1, r5
 800d918:	f021 0103 	bic.w	r1, r1, #3
 800d91c:	3d03      	subs	r5, #3
 800d91e:	45a8      	cmp	r8, r5
 800d920:	bf38      	it	cc
 800d922:	2100      	movcc	r1, #0
 800d924:	440b      	add	r3, r1
 800d926:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d92a:	b191      	cbz	r1, 800d952 <__mdiff+0x11a>
 800d92c:	6117      	str	r7, [r2, #16]
 800d92e:	e79d      	b.n	800d86c <__mdiff+0x34>
 800d930:	f854 1b04 	ldr.w	r1, [r4], #4
 800d934:	46e6      	mov	lr, ip
 800d936:	0c08      	lsrs	r0, r1, #16
 800d938:	fa1c fc81 	uxtah	ip, ip, r1
 800d93c:	4471      	add	r1, lr
 800d93e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d942:	b289      	uxth	r1, r1
 800d944:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d948:	f846 1b04 	str.w	r1, [r6], #4
 800d94c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d950:	e7dd      	b.n	800d90e <__mdiff+0xd6>
 800d952:	3f01      	subs	r7, #1
 800d954:	e7e7      	b.n	800d926 <__mdiff+0xee>
 800d956:	bf00      	nop
 800d958:	08035cc4 	.word	0x08035cc4
 800d95c:	08035cd5 	.word	0x08035cd5

0800d960 <__d2b>:
 800d960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d964:	460f      	mov	r7, r1
 800d966:	2101      	movs	r1, #1
 800d968:	ec59 8b10 	vmov	r8, r9, d0
 800d96c:	4616      	mov	r6, r2
 800d96e:	f7ff fcd5 	bl	800d31c <_Balloc>
 800d972:	4604      	mov	r4, r0
 800d974:	b930      	cbnz	r0, 800d984 <__d2b+0x24>
 800d976:	4602      	mov	r2, r0
 800d978:	4b23      	ldr	r3, [pc, #140]	@ (800da08 <__d2b+0xa8>)
 800d97a:	4824      	ldr	r0, [pc, #144]	@ (800da0c <__d2b+0xac>)
 800d97c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d980:	f000 fc4a 	bl	800e218 <__assert_func>
 800d984:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d98c:	b10d      	cbz	r5, 800d992 <__d2b+0x32>
 800d98e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	f1b8 0300 	subs.w	r3, r8, #0
 800d998:	d023      	beq.n	800d9e2 <__d2b+0x82>
 800d99a:	4668      	mov	r0, sp
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	f7ff fd84 	bl	800d4aa <__lo0bits>
 800d9a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d9a6:	b1d0      	cbz	r0, 800d9de <__d2b+0x7e>
 800d9a8:	f1c0 0320 	rsb	r3, r0, #32
 800d9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b0:	430b      	orrs	r3, r1
 800d9b2:	40c2      	lsrs	r2, r0
 800d9b4:	6163      	str	r3, [r4, #20]
 800d9b6:	9201      	str	r2, [sp, #4]
 800d9b8:	9b01      	ldr	r3, [sp, #4]
 800d9ba:	61a3      	str	r3, [r4, #24]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	bf0c      	ite	eq
 800d9c0:	2201      	moveq	r2, #1
 800d9c2:	2202      	movne	r2, #2
 800d9c4:	6122      	str	r2, [r4, #16]
 800d9c6:	b1a5      	cbz	r5, 800d9f2 <__d2b+0x92>
 800d9c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9cc:	4405      	add	r5, r0
 800d9ce:	603d      	str	r5, [r7, #0]
 800d9d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d9d4:	6030      	str	r0, [r6, #0]
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	b003      	add	sp, #12
 800d9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9de:	6161      	str	r1, [r4, #20]
 800d9e0:	e7ea      	b.n	800d9b8 <__d2b+0x58>
 800d9e2:	a801      	add	r0, sp, #4
 800d9e4:	f7ff fd61 	bl	800d4aa <__lo0bits>
 800d9e8:	9b01      	ldr	r3, [sp, #4]
 800d9ea:	6163      	str	r3, [r4, #20]
 800d9ec:	3020      	adds	r0, #32
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	e7e8      	b.n	800d9c4 <__d2b+0x64>
 800d9f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d9fa:	6038      	str	r0, [r7, #0]
 800d9fc:	6918      	ldr	r0, [r3, #16]
 800d9fe:	f7ff fd35 	bl	800d46c <__hi0bits>
 800da02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da06:	e7e5      	b.n	800d9d4 <__d2b+0x74>
 800da08:	08035cc4 	.word	0x08035cc4
 800da0c:	08035cd5 	.word	0x08035cd5

0800da10 <__ssputs_r>:
 800da10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da14:	688e      	ldr	r6, [r1, #8]
 800da16:	461f      	mov	r7, r3
 800da18:	42be      	cmp	r6, r7
 800da1a:	680b      	ldr	r3, [r1, #0]
 800da1c:	4682      	mov	sl, r0
 800da1e:	460c      	mov	r4, r1
 800da20:	4690      	mov	r8, r2
 800da22:	d82d      	bhi.n	800da80 <__ssputs_r+0x70>
 800da24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da2c:	d026      	beq.n	800da7c <__ssputs_r+0x6c>
 800da2e:	6965      	ldr	r5, [r4, #20]
 800da30:	6909      	ldr	r1, [r1, #16]
 800da32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da36:	eba3 0901 	sub.w	r9, r3, r1
 800da3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da3e:	1c7b      	adds	r3, r7, #1
 800da40:	444b      	add	r3, r9
 800da42:	106d      	asrs	r5, r5, #1
 800da44:	429d      	cmp	r5, r3
 800da46:	bf38      	it	cc
 800da48:	461d      	movcc	r5, r3
 800da4a:	0553      	lsls	r3, r2, #21
 800da4c:	d527      	bpl.n	800da9e <__ssputs_r+0x8e>
 800da4e:	4629      	mov	r1, r5
 800da50:	f7ff fbd8 	bl	800d204 <_malloc_r>
 800da54:	4606      	mov	r6, r0
 800da56:	b360      	cbz	r0, 800dab2 <__ssputs_r+0xa2>
 800da58:	6921      	ldr	r1, [r4, #16]
 800da5a:	464a      	mov	r2, r9
 800da5c:	f7fe fd69 	bl	800c532 <memcpy>
 800da60:	89a3      	ldrh	r3, [r4, #12]
 800da62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da6a:	81a3      	strh	r3, [r4, #12]
 800da6c:	6126      	str	r6, [r4, #16]
 800da6e:	6165      	str	r5, [r4, #20]
 800da70:	444e      	add	r6, r9
 800da72:	eba5 0509 	sub.w	r5, r5, r9
 800da76:	6026      	str	r6, [r4, #0]
 800da78:	60a5      	str	r5, [r4, #8]
 800da7a:	463e      	mov	r6, r7
 800da7c:	42be      	cmp	r6, r7
 800da7e:	d900      	bls.n	800da82 <__ssputs_r+0x72>
 800da80:	463e      	mov	r6, r7
 800da82:	6820      	ldr	r0, [r4, #0]
 800da84:	4632      	mov	r2, r6
 800da86:	4641      	mov	r1, r8
 800da88:	f000 fb9c 	bl	800e1c4 <memmove>
 800da8c:	68a3      	ldr	r3, [r4, #8]
 800da8e:	1b9b      	subs	r3, r3, r6
 800da90:	60a3      	str	r3, [r4, #8]
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	4433      	add	r3, r6
 800da96:	6023      	str	r3, [r4, #0]
 800da98:	2000      	movs	r0, #0
 800da9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9e:	462a      	mov	r2, r5
 800daa0:	f000 fbfe 	bl	800e2a0 <_realloc_r>
 800daa4:	4606      	mov	r6, r0
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d1e0      	bne.n	800da6c <__ssputs_r+0x5c>
 800daaa:	6921      	ldr	r1, [r4, #16]
 800daac:	4650      	mov	r0, sl
 800daae:	f7ff fb35 	bl	800d11c <_free_r>
 800dab2:	230c      	movs	r3, #12
 800dab4:	f8ca 3000 	str.w	r3, [sl]
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dabe:	81a3      	strh	r3, [r4, #12]
 800dac0:	f04f 30ff 	mov.w	r0, #4294967295
 800dac4:	e7e9      	b.n	800da9a <__ssputs_r+0x8a>
	...

0800dac8 <_svfiprintf_r>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	4698      	mov	r8, r3
 800dace:	898b      	ldrh	r3, [r1, #12]
 800dad0:	061b      	lsls	r3, r3, #24
 800dad2:	b09d      	sub	sp, #116	@ 0x74
 800dad4:	4607      	mov	r7, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	4614      	mov	r4, r2
 800dada:	d510      	bpl.n	800dafe <_svfiprintf_r+0x36>
 800dadc:	690b      	ldr	r3, [r1, #16]
 800dade:	b973      	cbnz	r3, 800dafe <_svfiprintf_r+0x36>
 800dae0:	2140      	movs	r1, #64	@ 0x40
 800dae2:	f7ff fb8f 	bl	800d204 <_malloc_r>
 800dae6:	6028      	str	r0, [r5, #0]
 800dae8:	6128      	str	r0, [r5, #16]
 800daea:	b930      	cbnz	r0, 800dafa <_svfiprintf_r+0x32>
 800daec:	230c      	movs	r3, #12
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295
 800daf4:	b01d      	add	sp, #116	@ 0x74
 800daf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafa:	2340      	movs	r3, #64	@ 0x40
 800dafc:	616b      	str	r3, [r5, #20]
 800dafe:	2300      	movs	r3, #0
 800db00:	9309      	str	r3, [sp, #36]	@ 0x24
 800db02:	2320      	movs	r3, #32
 800db04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db08:	f8cd 800c 	str.w	r8, [sp, #12]
 800db0c:	2330      	movs	r3, #48	@ 0x30
 800db0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dcac <_svfiprintf_r+0x1e4>
 800db12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db16:	f04f 0901 	mov.w	r9, #1
 800db1a:	4623      	mov	r3, r4
 800db1c:	469a      	mov	sl, r3
 800db1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db22:	b10a      	cbz	r2, 800db28 <_svfiprintf_r+0x60>
 800db24:	2a25      	cmp	r2, #37	@ 0x25
 800db26:	d1f9      	bne.n	800db1c <_svfiprintf_r+0x54>
 800db28:	ebba 0b04 	subs.w	fp, sl, r4
 800db2c:	d00b      	beq.n	800db46 <_svfiprintf_r+0x7e>
 800db2e:	465b      	mov	r3, fp
 800db30:	4622      	mov	r2, r4
 800db32:	4629      	mov	r1, r5
 800db34:	4638      	mov	r0, r7
 800db36:	f7ff ff6b 	bl	800da10 <__ssputs_r>
 800db3a:	3001      	adds	r0, #1
 800db3c:	f000 80a7 	beq.w	800dc8e <_svfiprintf_r+0x1c6>
 800db40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db42:	445a      	add	r2, fp
 800db44:	9209      	str	r2, [sp, #36]	@ 0x24
 800db46:	f89a 3000 	ldrb.w	r3, [sl]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f000 809f 	beq.w	800dc8e <_svfiprintf_r+0x1c6>
 800db50:	2300      	movs	r3, #0
 800db52:	f04f 32ff 	mov.w	r2, #4294967295
 800db56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db5a:	f10a 0a01 	add.w	sl, sl, #1
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	9307      	str	r3, [sp, #28]
 800db62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db66:	931a      	str	r3, [sp, #104]	@ 0x68
 800db68:	4654      	mov	r4, sl
 800db6a:	2205      	movs	r2, #5
 800db6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db70:	484e      	ldr	r0, [pc, #312]	@ (800dcac <_svfiprintf_r+0x1e4>)
 800db72:	f7f2 fbbd 	bl	80002f0 <memchr>
 800db76:	9a04      	ldr	r2, [sp, #16]
 800db78:	b9d8      	cbnz	r0, 800dbb2 <_svfiprintf_r+0xea>
 800db7a:	06d0      	lsls	r0, r2, #27
 800db7c:	bf44      	itt	mi
 800db7e:	2320      	movmi	r3, #32
 800db80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db84:	0711      	lsls	r1, r2, #28
 800db86:	bf44      	itt	mi
 800db88:	232b      	movmi	r3, #43	@ 0x2b
 800db8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db8e:	f89a 3000 	ldrb.w	r3, [sl]
 800db92:	2b2a      	cmp	r3, #42	@ 0x2a
 800db94:	d015      	beq.n	800dbc2 <_svfiprintf_r+0xfa>
 800db96:	9a07      	ldr	r2, [sp, #28]
 800db98:	4654      	mov	r4, sl
 800db9a:	2000      	movs	r0, #0
 800db9c:	f04f 0c0a 	mov.w	ip, #10
 800dba0:	4621      	mov	r1, r4
 800dba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dba6:	3b30      	subs	r3, #48	@ 0x30
 800dba8:	2b09      	cmp	r3, #9
 800dbaa:	d94b      	bls.n	800dc44 <_svfiprintf_r+0x17c>
 800dbac:	b1b0      	cbz	r0, 800dbdc <_svfiprintf_r+0x114>
 800dbae:	9207      	str	r2, [sp, #28]
 800dbb0:	e014      	b.n	800dbdc <_svfiprintf_r+0x114>
 800dbb2:	eba0 0308 	sub.w	r3, r0, r8
 800dbb6:	fa09 f303 	lsl.w	r3, r9, r3
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	9304      	str	r3, [sp, #16]
 800dbbe:	46a2      	mov	sl, r4
 800dbc0:	e7d2      	b.n	800db68 <_svfiprintf_r+0xa0>
 800dbc2:	9b03      	ldr	r3, [sp, #12]
 800dbc4:	1d19      	adds	r1, r3, #4
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	9103      	str	r1, [sp, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	bfbb      	ittet	lt
 800dbce:	425b      	neglt	r3, r3
 800dbd0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbd4:	9307      	strge	r3, [sp, #28]
 800dbd6:	9307      	strlt	r3, [sp, #28]
 800dbd8:	bfb8      	it	lt
 800dbda:	9204      	strlt	r2, [sp, #16]
 800dbdc:	7823      	ldrb	r3, [r4, #0]
 800dbde:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbe0:	d10a      	bne.n	800dbf8 <_svfiprintf_r+0x130>
 800dbe2:	7863      	ldrb	r3, [r4, #1]
 800dbe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbe6:	d132      	bne.n	800dc4e <_svfiprintf_r+0x186>
 800dbe8:	9b03      	ldr	r3, [sp, #12]
 800dbea:	1d1a      	adds	r2, r3, #4
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	9203      	str	r2, [sp, #12]
 800dbf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbf4:	3402      	adds	r4, #2
 800dbf6:	9305      	str	r3, [sp, #20]
 800dbf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dcbc <_svfiprintf_r+0x1f4>
 800dbfc:	7821      	ldrb	r1, [r4, #0]
 800dbfe:	2203      	movs	r2, #3
 800dc00:	4650      	mov	r0, sl
 800dc02:	f7f2 fb75 	bl	80002f0 <memchr>
 800dc06:	b138      	cbz	r0, 800dc18 <_svfiprintf_r+0x150>
 800dc08:	9b04      	ldr	r3, [sp, #16]
 800dc0a:	eba0 000a 	sub.w	r0, r0, sl
 800dc0e:	2240      	movs	r2, #64	@ 0x40
 800dc10:	4082      	lsls	r2, r0
 800dc12:	4313      	orrs	r3, r2
 800dc14:	3401      	adds	r4, #1
 800dc16:	9304      	str	r3, [sp, #16]
 800dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1c:	4824      	ldr	r0, [pc, #144]	@ (800dcb0 <_svfiprintf_r+0x1e8>)
 800dc1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc22:	2206      	movs	r2, #6
 800dc24:	f7f2 fb64 	bl	80002f0 <memchr>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d036      	beq.n	800dc9a <_svfiprintf_r+0x1d2>
 800dc2c:	4b21      	ldr	r3, [pc, #132]	@ (800dcb4 <_svfiprintf_r+0x1ec>)
 800dc2e:	bb1b      	cbnz	r3, 800dc78 <_svfiprintf_r+0x1b0>
 800dc30:	9b03      	ldr	r3, [sp, #12]
 800dc32:	3307      	adds	r3, #7
 800dc34:	f023 0307 	bic.w	r3, r3, #7
 800dc38:	3308      	adds	r3, #8
 800dc3a:	9303      	str	r3, [sp, #12]
 800dc3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc3e:	4433      	add	r3, r6
 800dc40:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc42:	e76a      	b.n	800db1a <_svfiprintf_r+0x52>
 800dc44:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc48:	460c      	mov	r4, r1
 800dc4a:	2001      	movs	r0, #1
 800dc4c:	e7a8      	b.n	800dba0 <_svfiprintf_r+0xd8>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	3401      	adds	r4, #1
 800dc52:	9305      	str	r3, [sp, #20]
 800dc54:	4619      	mov	r1, r3
 800dc56:	f04f 0c0a 	mov.w	ip, #10
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc60:	3a30      	subs	r2, #48	@ 0x30
 800dc62:	2a09      	cmp	r2, #9
 800dc64:	d903      	bls.n	800dc6e <_svfiprintf_r+0x1a6>
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0c6      	beq.n	800dbf8 <_svfiprintf_r+0x130>
 800dc6a:	9105      	str	r1, [sp, #20]
 800dc6c:	e7c4      	b.n	800dbf8 <_svfiprintf_r+0x130>
 800dc6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc72:	4604      	mov	r4, r0
 800dc74:	2301      	movs	r3, #1
 800dc76:	e7f0      	b.n	800dc5a <_svfiprintf_r+0x192>
 800dc78:	ab03      	add	r3, sp, #12
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	462a      	mov	r2, r5
 800dc7e:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb8 <_svfiprintf_r+0x1f0>)
 800dc80:	a904      	add	r1, sp, #16
 800dc82:	4638      	mov	r0, r7
 800dc84:	f7fd fef4 	bl	800ba70 <_printf_float>
 800dc88:	1c42      	adds	r2, r0, #1
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	d1d6      	bne.n	800dc3c <_svfiprintf_r+0x174>
 800dc8e:	89ab      	ldrh	r3, [r5, #12]
 800dc90:	065b      	lsls	r3, r3, #25
 800dc92:	f53f af2d 	bmi.w	800daf0 <_svfiprintf_r+0x28>
 800dc96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc98:	e72c      	b.n	800daf4 <_svfiprintf_r+0x2c>
 800dc9a:	ab03      	add	r3, sp, #12
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	462a      	mov	r2, r5
 800dca0:	4b05      	ldr	r3, [pc, #20]	@ (800dcb8 <_svfiprintf_r+0x1f0>)
 800dca2:	a904      	add	r1, sp, #16
 800dca4:	4638      	mov	r0, r7
 800dca6:	f7fe f96b 	bl	800bf80 <_printf_i>
 800dcaa:	e7ed      	b.n	800dc88 <_svfiprintf_r+0x1c0>
 800dcac:	08035d2e 	.word	0x08035d2e
 800dcb0:	08035d38 	.word	0x08035d38
 800dcb4:	0800ba71 	.word	0x0800ba71
 800dcb8:	0800da11 	.word	0x0800da11
 800dcbc:	08035d34 	.word	0x08035d34

0800dcc0 <__sfputc_r>:
 800dcc0:	6893      	ldr	r3, [r2, #8]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	b410      	push	{r4}
 800dcc8:	6093      	str	r3, [r2, #8]
 800dcca:	da08      	bge.n	800dcde <__sfputc_r+0x1e>
 800dccc:	6994      	ldr	r4, [r2, #24]
 800dcce:	42a3      	cmp	r3, r4
 800dcd0:	db01      	blt.n	800dcd6 <__sfputc_r+0x16>
 800dcd2:	290a      	cmp	r1, #10
 800dcd4:	d103      	bne.n	800dcde <__sfputc_r+0x1e>
 800dcd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcda:	f000 b9df 	b.w	800e09c <__swbuf_r>
 800dcde:	6813      	ldr	r3, [r2, #0]
 800dce0:	1c58      	adds	r0, r3, #1
 800dce2:	6010      	str	r0, [r2, #0]
 800dce4:	7019      	strb	r1, [r3, #0]
 800dce6:	4608      	mov	r0, r1
 800dce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <__sfputs_r>:
 800dcee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf0:	4606      	mov	r6, r0
 800dcf2:	460f      	mov	r7, r1
 800dcf4:	4614      	mov	r4, r2
 800dcf6:	18d5      	adds	r5, r2, r3
 800dcf8:	42ac      	cmp	r4, r5
 800dcfa:	d101      	bne.n	800dd00 <__sfputs_r+0x12>
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	e007      	b.n	800dd10 <__sfputs_r+0x22>
 800dd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd04:	463a      	mov	r2, r7
 800dd06:	4630      	mov	r0, r6
 800dd08:	f7ff ffda 	bl	800dcc0 <__sfputc_r>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d1f3      	bne.n	800dcf8 <__sfputs_r+0xa>
 800dd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd14 <_vfiprintf_r>:
 800dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd18:	460d      	mov	r5, r1
 800dd1a:	b09d      	sub	sp, #116	@ 0x74
 800dd1c:	4614      	mov	r4, r2
 800dd1e:	4698      	mov	r8, r3
 800dd20:	4606      	mov	r6, r0
 800dd22:	b118      	cbz	r0, 800dd2c <_vfiprintf_r+0x18>
 800dd24:	6a03      	ldr	r3, [r0, #32]
 800dd26:	b90b      	cbnz	r3, 800dd2c <_vfiprintf_r+0x18>
 800dd28:	f7fe fad4 	bl	800c2d4 <__sinit>
 800dd2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd2e:	07d9      	lsls	r1, r3, #31
 800dd30:	d405      	bmi.n	800dd3e <_vfiprintf_r+0x2a>
 800dd32:	89ab      	ldrh	r3, [r5, #12]
 800dd34:	059a      	lsls	r2, r3, #22
 800dd36:	d402      	bmi.n	800dd3e <_vfiprintf_r+0x2a>
 800dd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd3a:	f7fe fbf8 	bl	800c52e <__retarget_lock_acquire_recursive>
 800dd3e:	89ab      	ldrh	r3, [r5, #12]
 800dd40:	071b      	lsls	r3, r3, #28
 800dd42:	d501      	bpl.n	800dd48 <_vfiprintf_r+0x34>
 800dd44:	692b      	ldr	r3, [r5, #16]
 800dd46:	b99b      	cbnz	r3, 800dd70 <_vfiprintf_r+0x5c>
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f000 f9e4 	bl	800e118 <__swsetup_r>
 800dd50:	b170      	cbz	r0, 800dd70 <_vfiprintf_r+0x5c>
 800dd52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd54:	07dc      	lsls	r4, r3, #31
 800dd56:	d504      	bpl.n	800dd62 <_vfiprintf_r+0x4e>
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	b01d      	add	sp, #116	@ 0x74
 800dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd62:	89ab      	ldrh	r3, [r5, #12]
 800dd64:	0598      	lsls	r0, r3, #22
 800dd66:	d4f7      	bmi.n	800dd58 <_vfiprintf_r+0x44>
 800dd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd6a:	f7fe fbe1 	bl	800c530 <__retarget_lock_release_recursive>
 800dd6e:	e7f3      	b.n	800dd58 <_vfiprintf_r+0x44>
 800dd70:	2300      	movs	r3, #0
 800dd72:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd74:	2320      	movs	r3, #32
 800dd76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd7e:	2330      	movs	r3, #48	@ 0x30
 800dd80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df30 <_vfiprintf_r+0x21c>
 800dd84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd88:	f04f 0901 	mov.w	r9, #1
 800dd8c:	4623      	mov	r3, r4
 800dd8e:	469a      	mov	sl, r3
 800dd90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd94:	b10a      	cbz	r2, 800dd9a <_vfiprintf_r+0x86>
 800dd96:	2a25      	cmp	r2, #37	@ 0x25
 800dd98:	d1f9      	bne.n	800dd8e <_vfiprintf_r+0x7a>
 800dd9a:	ebba 0b04 	subs.w	fp, sl, r4
 800dd9e:	d00b      	beq.n	800ddb8 <_vfiprintf_r+0xa4>
 800dda0:	465b      	mov	r3, fp
 800dda2:	4622      	mov	r2, r4
 800dda4:	4629      	mov	r1, r5
 800dda6:	4630      	mov	r0, r6
 800dda8:	f7ff ffa1 	bl	800dcee <__sfputs_r>
 800ddac:	3001      	adds	r0, #1
 800ddae:	f000 80a7 	beq.w	800df00 <_vfiprintf_r+0x1ec>
 800ddb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddb4:	445a      	add	r2, fp
 800ddb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddb8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 809f 	beq.w	800df00 <_vfiprintf_r+0x1ec>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddcc:	f10a 0a01 	add.w	sl, sl, #1
 800ddd0:	9304      	str	r3, [sp, #16]
 800ddd2:	9307      	str	r3, [sp, #28]
 800ddd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddda:	4654      	mov	r4, sl
 800dddc:	2205      	movs	r2, #5
 800ddde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dde2:	4853      	ldr	r0, [pc, #332]	@ (800df30 <_vfiprintf_r+0x21c>)
 800dde4:	f7f2 fa84 	bl	80002f0 <memchr>
 800dde8:	9a04      	ldr	r2, [sp, #16]
 800ddea:	b9d8      	cbnz	r0, 800de24 <_vfiprintf_r+0x110>
 800ddec:	06d1      	lsls	r1, r2, #27
 800ddee:	bf44      	itt	mi
 800ddf0:	2320      	movmi	r3, #32
 800ddf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddf6:	0713      	lsls	r3, r2, #28
 800ddf8:	bf44      	itt	mi
 800ddfa:	232b      	movmi	r3, #43	@ 0x2b
 800ddfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de00:	f89a 3000 	ldrb.w	r3, [sl]
 800de04:	2b2a      	cmp	r3, #42	@ 0x2a
 800de06:	d015      	beq.n	800de34 <_vfiprintf_r+0x120>
 800de08:	9a07      	ldr	r2, [sp, #28]
 800de0a:	4654      	mov	r4, sl
 800de0c:	2000      	movs	r0, #0
 800de0e:	f04f 0c0a 	mov.w	ip, #10
 800de12:	4621      	mov	r1, r4
 800de14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de18:	3b30      	subs	r3, #48	@ 0x30
 800de1a:	2b09      	cmp	r3, #9
 800de1c:	d94b      	bls.n	800deb6 <_vfiprintf_r+0x1a2>
 800de1e:	b1b0      	cbz	r0, 800de4e <_vfiprintf_r+0x13a>
 800de20:	9207      	str	r2, [sp, #28]
 800de22:	e014      	b.n	800de4e <_vfiprintf_r+0x13a>
 800de24:	eba0 0308 	sub.w	r3, r0, r8
 800de28:	fa09 f303 	lsl.w	r3, r9, r3
 800de2c:	4313      	orrs	r3, r2
 800de2e:	9304      	str	r3, [sp, #16]
 800de30:	46a2      	mov	sl, r4
 800de32:	e7d2      	b.n	800ddda <_vfiprintf_r+0xc6>
 800de34:	9b03      	ldr	r3, [sp, #12]
 800de36:	1d19      	adds	r1, r3, #4
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	9103      	str	r1, [sp, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	bfbb      	ittet	lt
 800de40:	425b      	neglt	r3, r3
 800de42:	f042 0202 	orrlt.w	r2, r2, #2
 800de46:	9307      	strge	r3, [sp, #28]
 800de48:	9307      	strlt	r3, [sp, #28]
 800de4a:	bfb8      	it	lt
 800de4c:	9204      	strlt	r2, [sp, #16]
 800de4e:	7823      	ldrb	r3, [r4, #0]
 800de50:	2b2e      	cmp	r3, #46	@ 0x2e
 800de52:	d10a      	bne.n	800de6a <_vfiprintf_r+0x156>
 800de54:	7863      	ldrb	r3, [r4, #1]
 800de56:	2b2a      	cmp	r3, #42	@ 0x2a
 800de58:	d132      	bne.n	800dec0 <_vfiprintf_r+0x1ac>
 800de5a:	9b03      	ldr	r3, [sp, #12]
 800de5c:	1d1a      	adds	r2, r3, #4
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	9203      	str	r2, [sp, #12]
 800de62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de66:	3402      	adds	r4, #2
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df40 <_vfiprintf_r+0x22c>
 800de6e:	7821      	ldrb	r1, [r4, #0]
 800de70:	2203      	movs	r2, #3
 800de72:	4650      	mov	r0, sl
 800de74:	f7f2 fa3c 	bl	80002f0 <memchr>
 800de78:	b138      	cbz	r0, 800de8a <_vfiprintf_r+0x176>
 800de7a:	9b04      	ldr	r3, [sp, #16]
 800de7c:	eba0 000a 	sub.w	r0, r0, sl
 800de80:	2240      	movs	r2, #64	@ 0x40
 800de82:	4082      	lsls	r2, r0
 800de84:	4313      	orrs	r3, r2
 800de86:	3401      	adds	r4, #1
 800de88:	9304      	str	r3, [sp, #16]
 800de8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de8e:	4829      	ldr	r0, [pc, #164]	@ (800df34 <_vfiprintf_r+0x220>)
 800de90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de94:	2206      	movs	r2, #6
 800de96:	f7f2 fa2b 	bl	80002f0 <memchr>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d03f      	beq.n	800df1e <_vfiprintf_r+0x20a>
 800de9e:	4b26      	ldr	r3, [pc, #152]	@ (800df38 <_vfiprintf_r+0x224>)
 800dea0:	bb1b      	cbnz	r3, 800deea <_vfiprintf_r+0x1d6>
 800dea2:	9b03      	ldr	r3, [sp, #12]
 800dea4:	3307      	adds	r3, #7
 800dea6:	f023 0307 	bic.w	r3, r3, #7
 800deaa:	3308      	adds	r3, #8
 800deac:	9303      	str	r3, [sp, #12]
 800deae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb0:	443b      	add	r3, r7
 800deb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb4:	e76a      	b.n	800dd8c <_vfiprintf_r+0x78>
 800deb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800deba:	460c      	mov	r4, r1
 800debc:	2001      	movs	r0, #1
 800debe:	e7a8      	b.n	800de12 <_vfiprintf_r+0xfe>
 800dec0:	2300      	movs	r3, #0
 800dec2:	3401      	adds	r4, #1
 800dec4:	9305      	str	r3, [sp, #20]
 800dec6:	4619      	mov	r1, r3
 800dec8:	f04f 0c0a 	mov.w	ip, #10
 800decc:	4620      	mov	r0, r4
 800dece:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ded2:	3a30      	subs	r2, #48	@ 0x30
 800ded4:	2a09      	cmp	r2, #9
 800ded6:	d903      	bls.n	800dee0 <_vfiprintf_r+0x1cc>
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0c6      	beq.n	800de6a <_vfiprintf_r+0x156>
 800dedc:	9105      	str	r1, [sp, #20]
 800dede:	e7c4      	b.n	800de6a <_vfiprintf_r+0x156>
 800dee0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dee4:	4604      	mov	r4, r0
 800dee6:	2301      	movs	r3, #1
 800dee8:	e7f0      	b.n	800decc <_vfiprintf_r+0x1b8>
 800deea:	ab03      	add	r3, sp, #12
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	462a      	mov	r2, r5
 800def0:	4b12      	ldr	r3, [pc, #72]	@ (800df3c <_vfiprintf_r+0x228>)
 800def2:	a904      	add	r1, sp, #16
 800def4:	4630      	mov	r0, r6
 800def6:	f7fd fdbb 	bl	800ba70 <_printf_float>
 800defa:	4607      	mov	r7, r0
 800defc:	1c78      	adds	r0, r7, #1
 800defe:	d1d6      	bne.n	800deae <_vfiprintf_r+0x19a>
 800df00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df02:	07d9      	lsls	r1, r3, #31
 800df04:	d405      	bmi.n	800df12 <_vfiprintf_r+0x1fe>
 800df06:	89ab      	ldrh	r3, [r5, #12]
 800df08:	059a      	lsls	r2, r3, #22
 800df0a:	d402      	bmi.n	800df12 <_vfiprintf_r+0x1fe>
 800df0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df0e:	f7fe fb0f 	bl	800c530 <__retarget_lock_release_recursive>
 800df12:	89ab      	ldrh	r3, [r5, #12]
 800df14:	065b      	lsls	r3, r3, #25
 800df16:	f53f af1f 	bmi.w	800dd58 <_vfiprintf_r+0x44>
 800df1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df1c:	e71e      	b.n	800dd5c <_vfiprintf_r+0x48>
 800df1e:	ab03      	add	r3, sp, #12
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	462a      	mov	r2, r5
 800df24:	4b05      	ldr	r3, [pc, #20]	@ (800df3c <_vfiprintf_r+0x228>)
 800df26:	a904      	add	r1, sp, #16
 800df28:	4630      	mov	r0, r6
 800df2a:	f7fe f829 	bl	800bf80 <_printf_i>
 800df2e:	e7e4      	b.n	800defa <_vfiprintf_r+0x1e6>
 800df30:	08035d2e 	.word	0x08035d2e
 800df34:	08035d38 	.word	0x08035d38
 800df38:	0800ba71 	.word	0x0800ba71
 800df3c:	0800dcef 	.word	0x0800dcef
 800df40:	08035d34 	.word	0x08035d34

0800df44 <__sflush_r>:
 800df44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	0716      	lsls	r6, r2, #28
 800df4e:	4605      	mov	r5, r0
 800df50:	460c      	mov	r4, r1
 800df52:	d454      	bmi.n	800dffe <__sflush_r+0xba>
 800df54:	684b      	ldr	r3, [r1, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	dc02      	bgt.n	800df60 <__sflush_r+0x1c>
 800df5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	dd48      	ble.n	800dff2 <__sflush_r+0xae>
 800df60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df62:	2e00      	cmp	r6, #0
 800df64:	d045      	beq.n	800dff2 <__sflush_r+0xae>
 800df66:	2300      	movs	r3, #0
 800df68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df6c:	682f      	ldr	r7, [r5, #0]
 800df6e:	6a21      	ldr	r1, [r4, #32]
 800df70:	602b      	str	r3, [r5, #0]
 800df72:	d030      	beq.n	800dfd6 <__sflush_r+0x92>
 800df74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df76:	89a3      	ldrh	r3, [r4, #12]
 800df78:	0759      	lsls	r1, r3, #29
 800df7a:	d505      	bpl.n	800df88 <__sflush_r+0x44>
 800df7c:	6863      	ldr	r3, [r4, #4]
 800df7e:	1ad2      	subs	r2, r2, r3
 800df80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df82:	b10b      	cbz	r3, 800df88 <__sflush_r+0x44>
 800df84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df86:	1ad2      	subs	r2, r2, r3
 800df88:	2300      	movs	r3, #0
 800df8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df8c:	6a21      	ldr	r1, [r4, #32]
 800df8e:	4628      	mov	r0, r5
 800df90:	47b0      	blx	r6
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	d106      	bne.n	800dfa6 <__sflush_r+0x62>
 800df98:	6829      	ldr	r1, [r5, #0]
 800df9a:	291d      	cmp	r1, #29
 800df9c:	d82b      	bhi.n	800dff6 <__sflush_r+0xb2>
 800df9e:	4a2a      	ldr	r2, [pc, #168]	@ (800e048 <__sflush_r+0x104>)
 800dfa0:	40ca      	lsrs	r2, r1
 800dfa2:	07d6      	lsls	r6, r2, #31
 800dfa4:	d527      	bpl.n	800dff6 <__sflush_r+0xb2>
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	6062      	str	r2, [r4, #4]
 800dfaa:	04d9      	lsls	r1, r3, #19
 800dfac:	6922      	ldr	r2, [r4, #16]
 800dfae:	6022      	str	r2, [r4, #0]
 800dfb0:	d504      	bpl.n	800dfbc <__sflush_r+0x78>
 800dfb2:	1c42      	adds	r2, r0, #1
 800dfb4:	d101      	bne.n	800dfba <__sflush_r+0x76>
 800dfb6:	682b      	ldr	r3, [r5, #0]
 800dfb8:	b903      	cbnz	r3, 800dfbc <__sflush_r+0x78>
 800dfba:	6560      	str	r0, [r4, #84]	@ 0x54
 800dfbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfbe:	602f      	str	r7, [r5, #0]
 800dfc0:	b1b9      	cbz	r1, 800dff2 <__sflush_r+0xae>
 800dfc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfc6:	4299      	cmp	r1, r3
 800dfc8:	d002      	beq.n	800dfd0 <__sflush_r+0x8c>
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f7ff f8a6 	bl	800d11c <_free_r>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfd4:	e00d      	b.n	800dff2 <__sflush_r+0xae>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	4628      	mov	r0, r5
 800dfda:	47b0      	blx	r6
 800dfdc:	4602      	mov	r2, r0
 800dfde:	1c50      	adds	r0, r2, #1
 800dfe0:	d1c9      	bne.n	800df76 <__sflush_r+0x32>
 800dfe2:	682b      	ldr	r3, [r5, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d0c6      	beq.n	800df76 <__sflush_r+0x32>
 800dfe8:	2b1d      	cmp	r3, #29
 800dfea:	d001      	beq.n	800dff0 <__sflush_r+0xac>
 800dfec:	2b16      	cmp	r3, #22
 800dfee:	d11e      	bne.n	800e02e <__sflush_r+0xea>
 800dff0:	602f      	str	r7, [r5, #0]
 800dff2:	2000      	movs	r0, #0
 800dff4:	e022      	b.n	800e03c <__sflush_r+0xf8>
 800dff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dffa:	b21b      	sxth	r3, r3
 800dffc:	e01b      	b.n	800e036 <__sflush_r+0xf2>
 800dffe:	690f      	ldr	r7, [r1, #16]
 800e000:	2f00      	cmp	r7, #0
 800e002:	d0f6      	beq.n	800dff2 <__sflush_r+0xae>
 800e004:	0793      	lsls	r3, r2, #30
 800e006:	680e      	ldr	r6, [r1, #0]
 800e008:	bf08      	it	eq
 800e00a:	694b      	ldreq	r3, [r1, #20]
 800e00c:	600f      	str	r7, [r1, #0]
 800e00e:	bf18      	it	ne
 800e010:	2300      	movne	r3, #0
 800e012:	eba6 0807 	sub.w	r8, r6, r7
 800e016:	608b      	str	r3, [r1, #8]
 800e018:	f1b8 0f00 	cmp.w	r8, #0
 800e01c:	dde9      	ble.n	800dff2 <__sflush_r+0xae>
 800e01e:	6a21      	ldr	r1, [r4, #32]
 800e020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e022:	4643      	mov	r3, r8
 800e024:	463a      	mov	r2, r7
 800e026:	4628      	mov	r0, r5
 800e028:	47b0      	blx	r6
 800e02a:	2800      	cmp	r0, #0
 800e02c:	dc08      	bgt.n	800e040 <__sflush_r+0xfc>
 800e02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e036:	81a3      	strh	r3, [r4, #12]
 800e038:	f04f 30ff 	mov.w	r0, #4294967295
 800e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e040:	4407      	add	r7, r0
 800e042:	eba8 0800 	sub.w	r8, r8, r0
 800e046:	e7e7      	b.n	800e018 <__sflush_r+0xd4>
 800e048:	20400001 	.word	0x20400001

0800e04c <_fflush_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	690b      	ldr	r3, [r1, #16]
 800e050:	4605      	mov	r5, r0
 800e052:	460c      	mov	r4, r1
 800e054:	b913      	cbnz	r3, 800e05c <_fflush_r+0x10>
 800e056:	2500      	movs	r5, #0
 800e058:	4628      	mov	r0, r5
 800e05a:	bd38      	pop	{r3, r4, r5, pc}
 800e05c:	b118      	cbz	r0, 800e066 <_fflush_r+0x1a>
 800e05e:	6a03      	ldr	r3, [r0, #32]
 800e060:	b90b      	cbnz	r3, 800e066 <_fflush_r+0x1a>
 800e062:	f7fe f937 	bl	800c2d4 <__sinit>
 800e066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d0f3      	beq.n	800e056 <_fflush_r+0xa>
 800e06e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e070:	07d0      	lsls	r0, r2, #31
 800e072:	d404      	bmi.n	800e07e <_fflush_r+0x32>
 800e074:	0599      	lsls	r1, r3, #22
 800e076:	d402      	bmi.n	800e07e <_fflush_r+0x32>
 800e078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e07a:	f7fe fa58 	bl	800c52e <__retarget_lock_acquire_recursive>
 800e07e:	4628      	mov	r0, r5
 800e080:	4621      	mov	r1, r4
 800e082:	f7ff ff5f 	bl	800df44 <__sflush_r>
 800e086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e088:	07da      	lsls	r2, r3, #31
 800e08a:	4605      	mov	r5, r0
 800e08c:	d4e4      	bmi.n	800e058 <_fflush_r+0xc>
 800e08e:	89a3      	ldrh	r3, [r4, #12]
 800e090:	059b      	lsls	r3, r3, #22
 800e092:	d4e1      	bmi.n	800e058 <_fflush_r+0xc>
 800e094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e096:	f7fe fa4b 	bl	800c530 <__retarget_lock_release_recursive>
 800e09a:	e7dd      	b.n	800e058 <_fflush_r+0xc>

0800e09c <__swbuf_r>:
 800e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09e:	460e      	mov	r6, r1
 800e0a0:	4614      	mov	r4, r2
 800e0a2:	4605      	mov	r5, r0
 800e0a4:	b118      	cbz	r0, 800e0ae <__swbuf_r+0x12>
 800e0a6:	6a03      	ldr	r3, [r0, #32]
 800e0a8:	b90b      	cbnz	r3, 800e0ae <__swbuf_r+0x12>
 800e0aa:	f7fe f913 	bl	800c2d4 <__sinit>
 800e0ae:	69a3      	ldr	r3, [r4, #24]
 800e0b0:	60a3      	str	r3, [r4, #8]
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	071a      	lsls	r2, r3, #28
 800e0b6:	d501      	bpl.n	800e0bc <__swbuf_r+0x20>
 800e0b8:	6923      	ldr	r3, [r4, #16]
 800e0ba:	b943      	cbnz	r3, 800e0ce <__swbuf_r+0x32>
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f000 f82a 	bl	800e118 <__swsetup_r>
 800e0c4:	b118      	cbz	r0, 800e0ce <__swbuf_r+0x32>
 800e0c6:	f04f 37ff 	mov.w	r7, #4294967295
 800e0ca:	4638      	mov	r0, r7
 800e0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	6922      	ldr	r2, [r4, #16]
 800e0d2:	1a98      	subs	r0, r3, r2
 800e0d4:	6963      	ldr	r3, [r4, #20]
 800e0d6:	b2f6      	uxtb	r6, r6
 800e0d8:	4283      	cmp	r3, r0
 800e0da:	4637      	mov	r7, r6
 800e0dc:	dc05      	bgt.n	800e0ea <__swbuf_r+0x4e>
 800e0de:	4621      	mov	r1, r4
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	f7ff ffb3 	bl	800e04c <_fflush_r>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d1ed      	bne.n	800e0c6 <__swbuf_r+0x2a>
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	60a3      	str	r3, [r4, #8]
 800e0f0:	6823      	ldr	r3, [r4, #0]
 800e0f2:	1c5a      	adds	r2, r3, #1
 800e0f4:	6022      	str	r2, [r4, #0]
 800e0f6:	701e      	strb	r6, [r3, #0]
 800e0f8:	6962      	ldr	r2, [r4, #20]
 800e0fa:	1c43      	adds	r3, r0, #1
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d004      	beq.n	800e10a <__swbuf_r+0x6e>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	07db      	lsls	r3, r3, #31
 800e104:	d5e1      	bpl.n	800e0ca <__swbuf_r+0x2e>
 800e106:	2e0a      	cmp	r6, #10
 800e108:	d1df      	bne.n	800e0ca <__swbuf_r+0x2e>
 800e10a:	4621      	mov	r1, r4
 800e10c:	4628      	mov	r0, r5
 800e10e:	f7ff ff9d 	bl	800e04c <_fflush_r>
 800e112:	2800      	cmp	r0, #0
 800e114:	d0d9      	beq.n	800e0ca <__swbuf_r+0x2e>
 800e116:	e7d6      	b.n	800e0c6 <__swbuf_r+0x2a>

0800e118 <__swsetup_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4b29      	ldr	r3, [pc, #164]	@ (800e1c0 <__swsetup_r+0xa8>)
 800e11c:	4605      	mov	r5, r0
 800e11e:	6818      	ldr	r0, [r3, #0]
 800e120:	460c      	mov	r4, r1
 800e122:	b118      	cbz	r0, 800e12c <__swsetup_r+0x14>
 800e124:	6a03      	ldr	r3, [r0, #32]
 800e126:	b90b      	cbnz	r3, 800e12c <__swsetup_r+0x14>
 800e128:	f7fe f8d4 	bl	800c2d4 <__sinit>
 800e12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e130:	0719      	lsls	r1, r3, #28
 800e132:	d422      	bmi.n	800e17a <__swsetup_r+0x62>
 800e134:	06da      	lsls	r2, r3, #27
 800e136:	d407      	bmi.n	800e148 <__swsetup_r+0x30>
 800e138:	2209      	movs	r2, #9
 800e13a:	602a      	str	r2, [r5, #0]
 800e13c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	f04f 30ff 	mov.w	r0, #4294967295
 800e146:	e033      	b.n	800e1b0 <__swsetup_r+0x98>
 800e148:	0758      	lsls	r0, r3, #29
 800e14a:	d512      	bpl.n	800e172 <__swsetup_r+0x5a>
 800e14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e14e:	b141      	cbz	r1, 800e162 <__swsetup_r+0x4a>
 800e150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e154:	4299      	cmp	r1, r3
 800e156:	d002      	beq.n	800e15e <__swsetup_r+0x46>
 800e158:	4628      	mov	r0, r5
 800e15a:	f7fe ffdf 	bl	800d11c <_free_r>
 800e15e:	2300      	movs	r3, #0
 800e160:	6363      	str	r3, [r4, #52]	@ 0x34
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e168:	81a3      	strh	r3, [r4, #12]
 800e16a:	2300      	movs	r3, #0
 800e16c:	6063      	str	r3, [r4, #4]
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	6023      	str	r3, [r4, #0]
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	f043 0308 	orr.w	r3, r3, #8
 800e178:	81a3      	strh	r3, [r4, #12]
 800e17a:	6923      	ldr	r3, [r4, #16]
 800e17c:	b94b      	cbnz	r3, 800e192 <__swsetup_r+0x7a>
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e188:	d003      	beq.n	800e192 <__swsetup_r+0x7a>
 800e18a:	4621      	mov	r1, r4
 800e18c:	4628      	mov	r0, r5
 800e18e:	f000 f8fb 	bl	800e388 <__smakebuf_r>
 800e192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e196:	f013 0201 	ands.w	r2, r3, #1
 800e19a:	d00a      	beq.n	800e1b2 <__swsetup_r+0x9a>
 800e19c:	2200      	movs	r2, #0
 800e19e:	60a2      	str	r2, [r4, #8]
 800e1a0:	6962      	ldr	r2, [r4, #20]
 800e1a2:	4252      	negs	r2, r2
 800e1a4:	61a2      	str	r2, [r4, #24]
 800e1a6:	6922      	ldr	r2, [r4, #16]
 800e1a8:	b942      	cbnz	r2, 800e1bc <__swsetup_r+0xa4>
 800e1aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1ae:	d1c5      	bne.n	800e13c <__swsetup_r+0x24>
 800e1b0:	bd38      	pop	{r3, r4, r5, pc}
 800e1b2:	0799      	lsls	r1, r3, #30
 800e1b4:	bf58      	it	pl
 800e1b6:	6962      	ldrpl	r2, [r4, #20]
 800e1b8:	60a2      	str	r2, [r4, #8]
 800e1ba:	e7f4      	b.n	800e1a6 <__swsetup_r+0x8e>
 800e1bc:	2000      	movs	r0, #0
 800e1be:	e7f7      	b.n	800e1b0 <__swsetup_r+0x98>
 800e1c0:	240000ac 	.word	0x240000ac

0800e1c4 <memmove>:
 800e1c4:	4288      	cmp	r0, r1
 800e1c6:	b510      	push	{r4, lr}
 800e1c8:	eb01 0402 	add.w	r4, r1, r2
 800e1cc:	d902      	bls.n	800e1d4 <memmove+0x10>
 800e1ce:	4284      	cmp	r4, r0
 800e1d0:	4623      	mov	r3, r4
 800e1d2:	d807      	bhi.n	800e1e4 <memmove+0x20>
 800e1d4:	1e43      	subs	r3, r0, #1
 800e1d6:	42a1      	cmp	r1, r4
 800e1d8:	d008      	beq.n	800e1ec <memmove+0x28>
 800e1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1e2:	e7f8      	b.n	800e1d6 <memmove+0x12>
 800e1e4:	4402      	add	r2, r0
 800e1e6:	4601      	mov	r1, r0
 800e1e8:	428a      	cmp	r2, r1
 800e1ea:	d100      	bne.n	800e1ee <memmove+0x2a>
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1f6:	e7f7      	b.n	800e1e8 <memmove+0x24>

0800e1f8 <_sbrk_r>:
 800e1f8:	b538      	push	{r3, r4, r5, lr}
 800e1fa:	4d06      	ldr	r5, [pc, #24]	@ (800e214 <_sbrk_r+0x1c>)
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	4604      	mov	r4, r0
 800e200:	4608      	mov	r0, r1
 800e202:	602b      	str	r3, [r5, #0]
 800e204:	f7f3 f8d2 	bl	80013ac <_sbrk>
 800e208:	1c43      	adds	r3, r0, #1
 800e20a:	d102      	bne.n	800e212 <_sbrk_r+0x1a>
 800e20c:	682b      	ldr	r3, [r5, #0]
 800e20e:	b103      	cbz	r3, 800e212 <_sbrk_r+0x1a>
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	bd38      	pop	{r3, r4, r5, pc}
 800e214:	24001954 	.word	0x24001954

0800e218 <__assert_func>:
 800e218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e21a:	4614      	mov	r4, r2
 800e21c:	461a      	mov	r2, r3
 800e21e:	4b09      	ldr	r3, [pc, #36]	@ (800e244 <__assert_func+0x2c>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4605      	mov	r5, r0
 800e224:	68d8      	ldr	r0, [r3, #12]
 800e226:	b14c      	cbz	r4, 800e23c <__assert_func+0x24>
 800e228:	4b07      	ldr	r3, [pc, #28]	@ (800e248 <__assert_func+0x30>)
 800e22a:	9100      	str	r1, [sp, #0]
 800e22c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e230:	4906      	ldr	r1, [pc, #24]	@ (800e24c <__assert_func+0x34>)
 800e232:	462b      	mov	r3, r5
 800e234:	f000 f870 	bl	800e318 <fiprintf>
 800e238:	f000 f904 	bl	800e444 <abort>
 800e23c:	4b04      	ldr	r3, [pc, #16]	@ (800e250 <__assert_func+0x38>)
 800e23e:	461c      	mov	r4, r3
 800e240:	e7f3      	b.n	800e22a <__assert_func+0x12>
 800e242:	bf00      	nop
 800e244:	240000ac 	.word	0x240000ac
 800e248:	08035d49 	.word	0x08035d49
 800e24c:	08035d56 	.word	0x08035d56
 800e250:	08035d84 	.word	0x08035d84

0800e254 <_calloc_r>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	fba1 5402 	umull	r5, r4, r1, r2
 800e25a:	b934      	cbnz	r4, 800e26a <_calloc_r+0x16>
 800e25c:	4629      	mov	r1, r5
 800e25e:	f7fe ffd1 	bl	800d204 <_malloc_r>
 800e262:	4606      	mov	r6, r0
 800e264:	b928      	cbnz	r0, 800e272 <_calloc_r+0x1e>
 800e266:	4630      	mov	r0, r6
 800e268:	bd70      	pop	{r4, r5, r6, pc}
 800e26a:	220c      	movs	r2, #12
 800e26c:	6002      	str	r2, [r0, #0]
 800e26e:	2600      	movs	r6, #0
 800e270:	e7f9      	b.n	800e266 <_calloc_r+0x12>
 800e272:	462a      	mov	r2, r5
 800e274:	4621      	mov	r1, r4
 800e276:	f7fe f8dc 	bl	800c432 <memset>
 800e27a:	e7f4      	b.n	800e266 <_calloc_r+0x12>

0800e27c <__ascii_mbtowc>:
 800e27c:	b082      	sub	sp, #8
 800e27e:	b901      	cbnz	r1, 800e282 <__ascii_mbtowc+0x6>
 800e280:	a901      	add	r1, sp, #4
 800e282:	b142      	cbz	r2, 800e296 <__ascii_mbtowc+0x1a>
 800e284:	b14b      	cbz	r3, 800e29a <__ascii_mbtowc+0x1e>
 800e286:	7813      	ldrb	r3, [r2, #0]
 800e288:	600b      	str	r3, [r1, #0]
 800e28a:	7812      	ldrb	r2, [r2, #0]
 800e28c:	1e10      	subs	r0, r2, #0
 800e28e:	bf18      	it	ne
 800e290:	2001      	movne	r0, #1
 800e292:	b002      	add	sp, #8
 800e294:	4770      	bx	lr
 800e296:	4610      	mov	r0, r2
 800e298:	e7fb      	b.n	800e292 <__ascii_mbtowc+0x16>
 800e29a:	f06f 0001 	mvn.w	r0, #1
 800e29e:	e7f8      	b.n	800e292 <__ascii_mbtowc+0x16>

0800e2a0 <_realloc_r>:
 800e2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	4614      	mov	r4, r2
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	b921      	cbnz	r1, 800e2b6 <_realloc_r+0x16>
 800e2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	f7fe bfa7 	b.w	800d204 <_malloc_r>
 800e2b6:	b92a      	cbnz	r2, 800e2c4 <_realloc_r+0x24>
 800e2b8:	f7fe ff30 	bl	800d11c <_free_r>
 800e2bc:	4625      	mov	r5, r4
 800e2be:	4628      	mov	r0, r5
 800e2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c4:	f000 f8c5 	bl	800e452 <_malloc_usable_size_r>
 800e2c8:	4284      	cmp	r4, r0
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	d802      	bhi.n	800e2d4 <_realloc_r+0x34>
 800e2ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2d2:	d8f4      	bhi.n	800e2be <_realloc_r+0x1e>
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	f7fe ff94 	bl	800d204 <_malloc_r>
 800e2dc:	4680      	mov	r8, r0
 800e2de:	b908      	cbnz	r0, 800e2e4 <_realloc_r+0x44>
 800e2e0:	4645      	mov	r5, r8
 800e2e2:	e7ec      	b.n	800e2be <_realloc_r+0x1e>
 800e2e4:	42b4      	cmp	r4, r6
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	bf28      	it	cs
 800e2ec:	4632      	movcs	r2, r6
 800e2ee:	f7fe f920 	bl	800c532 <memcpy>
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	f7fe ff11 	bl	800d11c <_free_r>
 800e2fa:	e7f1      	b.n	800e2e0 <_realloc_r+0x40>

0800e2fc <__ascii_wctomb>:
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	4608      	mov	r0, r1
 800e300:	b141      	cbz	r1, 800e314 <__ascii_wctomb+0x18>
 800e302:	2aff      	cmp	r2, #255	@ 0xff
 800e304:	d904      	bls.n	800e310 <__ascii_wctomb+0x14>
 800e306:	228a      	movs	r2, #138	@ 0x8a
 800e308:	601a      	str	r2, [r3, #0]
 800e30a:	f04f 30ff 	mov.w	r0, #4294967295
 800e30e:	4770      	bx	lr
 800e310:	700a      	strb	r2, [r1, #0]
 800e312:	2001      	movs	r0, #1
 800e314:	4770      	bx	lr
	...

0800e318 <fiprintf>:
 800e318:	b40e      	push	{r1, r2, r3}
 800e31a:	b503      	push	{r0, r1, lr}
 800e31c:	4601      	mov	r1, r0
 800e31e:	ab03      	add	r3, sp, #12
 800e320:	4805      	ldr	r0, [pc, #20]	@ (800e338 <fiprintf+0x20>)
 800e322:	f853 2b04 	ldr.w	r2, [r3], #4
 800e326:	6800      	ldr	r0, [r0, #0]
 800e328:	9301      	str	r3, [sp, #4]
 800e32a:	f7ff fcf3 	bl	800dd14 <_vfiprintf_r>
 800e32e:	b002      	add	sp, #8
 800e330:	f85d eb04 	ldr.w	lr, [sp], #4
 800e334:	b003      	add	sp, #12
 800e336:	4770      	bx	lr
 800e338:	240000ac 	.word	0x240000ac

0800e33c <__swhatbuf_r>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	460c      	mov	r4, r1
 800e340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e344:	2900      	cmp	r1, #0
 800e346:	b096      	sub	sp, #88	@ 0x58
 800e348:	4615      	mov	r5, r2
 800e34a:	461e      	mov	r6, r3
 800e34c:	da0d      	bge.n	800e36a <__swhatbuf_r+0x2e>
 800e34e:	89a3      	ldrh	r3, [r4, #12]
 800e350:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e354:	f04f 0100 	mov.w	r1, #0
 800e358:	bf14      	ite	ne
 800e35a:	2340      	movne	r3, #64	@ 0x40
 800e35c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e360:	2000      	movs	r0, #0
 800e362:	6031      	str	r1, [r6, #0]
 800e364:	602b      	str	r3, [r5, #0]
 800e366:	b016      	add	sp, #88	@ 0x58
 800e368:	bd70      	pop	{r4, r5, r6, pc}
 800e36a:	466a      	mov	r2, sp
 800e36c:	f000 f848 	bl	800e400 <_fstat_r>
 800e370:	2800      	cmp	r0, #0
 800e372:	dbec      	blt.n	800e34e <__swhatbuf_r+0x12>
 800e374:	9901      	ldr	r1, [sp, #4]
 800e376:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e37a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e37e:	4259      	negs	r1, r3
 800e380:	4159      	adcs	r1, r3
 800e382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e386:	e7eb      	b.n	800e360 <__swhatbuf_r+0x24>

0800e388 <__smakebuf_r>:
 800e388:	898b      	ldrh	r3, [r1, #12]
 800e38a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e38c:	079d      	lsls	r5, r3, #30
 800e38e:	4606      	mov	r6, r0
 800e390:	460c      	mov	r4, r1
 800e392:	d507      	bpl.n	800e3a4 <__smakebuf_r+0x1c>
 800e394:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	6123      	str	r3, [r4, #16]
 800e39c:	2301      	movs	r3, #1
 800e39e:	6163      	str	r3, [r4, #20]
 800e3a0:	b003      	add	sp, #12
 800e3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a4:	ab01      	add	r3, sp, #4
 800e3a6:	466a      	mov	r2, sp
 800e3a8:	f7ff ffc8 	bl	800e33c <__swhatbuf_r>
 800e3ac:	9f00      	ldr	r7, [sp, #0]
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7fe ff26 	bl	800d204 <_malloc_r>
 800e3b8:	b948      	cbnz	r0, 800e3ce <__smakebuf_r+0x46>
 800e3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3be:	059a      	lsls	r2, r3, #22
 800e3c0:	d4ee      	bmi.n	800e3a0 <__smakebuf_r+0x18>
 800e3c2:	f023 0303 	bic.w	r3, r3, #3
 800e3c6:	f043 0302 	orr.w	r3, r3, #2
 800e3ca:	81a3      	strh	r3, [r4, #12]
 800e3cc:	e7e2      	b.n	800e394 <__smakebuf_r+0xc>
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	6020      	str	r0, [r4, #0]
 800e3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3d6:	81a3      	strh	r3, [r4, #12]
 800e3d8:	9b01      	ldr	r3, [sp, #4]
 800e3da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3de:	b15b      	cbz	r3, 800e3f8 <__smakebuf_r+0x70>
 800e3e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f000 f81d 	bl	800e424 <_isatty_r>
 800e3ea:	b128      	cbz	r0, 800e3f8 <__smakebuf_r+0x70>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f023 0303 	bic.w	r3, r3, #3
 800e3f2:	f043 0301 	orr.w	r3, r3, #1
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	431d      	orrs	r5, r3
 800e3fc:	81a5      	strh	r5, [r4, #12]
 800e3fe:	e7cf      	b.n	800e3a0 <__smakebuf_r+0x18>

0800e400 <_fstat_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4d07      	ldr	r5, [pc, #28]	@ (800e420 <_fstat_r+0x20>)
 800e404:	2300      	movs	r3, #0
 800e406:	4604      	mov	r4, r0
 800e408:	4608      	mov	r0, r1
 800e40a:	4611      	mov	r1, r2
 800e40c:	602b      	str	r3, [r5, #0]
 800e40e:	f7f2 ffa5 	bl	800135c <_fstat>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d102      	bne.n	800e41c <_fstat_r+0x1c>
 800e416:	682b      	ldr	r3, [r5, #0]
 800e418:	b103      	cbz	r3, 800e41c <_fstat_r+0x1c>
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	bd38      	pop	{r3, r4, r5, pc}
 800e41e:	bf00      	nop
 800e420:	24001954 	.word	0x24001954

0800e424 <_isatty_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4d06      	ldr	r5, [pc, #24]	@ (800e440 <_isatty_r+0x1c>)
 800e428:	2300      	movs	r3, #0
 800e42a:	4604      	mov	r4, r0
 800e42c:	4608      	mov	r0, r1
 800e42e:	602b      	str	r3, [r5, #0]
 800e430:	f7f2 ffa4 	bl	800137c <_isatty>
 800e434:	1c43      	adds	r3, r0, #1
 800e436:	d102      	bne.n	800e43e <_isatty_r+0x1a>
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	b103      	cbz	r3, 800e43e <_isatty_r+0x1a>
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	bd38      	pop	{r3, r4, r5, pc}
 800e440:	24001954 	.word	0x24001954

0800e444 <abort>:
 800e444:	b508      	push	{r3, lr}
 800e446:	2006      	movs	r0, #6
 800e448:	f000 f834 	bl	800e4b4 <raise>
 800e44c:	2001      	movs	r0, #1
 800e44e:	f7f2 ff35 	bl	80012bc <_exit>

0800e452 <_malloc_usable_size_r>:
 800e452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e456:	1f18      	subs	r0, r3, #4
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bfbc      	itt	lt
 800e45c:	580b      	ldrlt	r3, [r1, r0]
 800e45e:	18c0      	addlt	r0, r0, r3
 800e460:	4770      	bx	lr

0800e462 <_raise_r>:
 800e462:	291f      	cmp	r1, #31
 800e464:	b538      	push	{r3, r4, r5, lr}
 800e466:	4605      	mov	r5, r0
 800e468:	460c      	mov	r4, r1
 800e46a:	d904      	bls.n	800e476 <_raise_r+0x14>
 800e46c:	2316      	movs	r3, #22
 800e46e:	6003      	str	r3, [r0, #0]
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	bd38      	pop	{r3, r4, r5, pc}
 800e476:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e478:	b112      	cbz	r2, 800e480 <_raise_r+0x1e>
 800e47a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e47e:	b94b      	cbnz	r3, 800e494 <_raise_r+0x32>
 800e480:	4628      	mov	r0, r5
 800e482:	f000 f831 	bl	800e4e8 <_getpid_r>
 800e486:	4622      	mov	r2, r4
 800e488:	4601      	mov	r1, r0
 800e48a:	4628      	mov	r0, r5
 800e48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e490:	f000 b818 	b.w	800e4c4 <_kill_r>
 800e494:	2b01      	cmp	r3, #1
 800e496:	d00a      	beq.n	800e4ae <_raise_r+0x4c>
 800e498:	1c59      	adds	r1, r3, #1
 800e49a:	d103      	bne.n	800e4a4 <_raise_r+0x42>
 800e49c:	2316      	movs	r3, #22
 800e49e:	6003      	str	r3, [r0, #0]
 800e4a0:	2001      	movs	r0, #1
 800e4a2:	e7e7      	b.n	800e474 <_raise_r+0x12>
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	4798      	blx	r3
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	e7e0      	b.n	800e474 <_raise_r+0x12>
	...

0800e4b4 <raise>:
 800e4b4:	4b02      	ldr	r3, [pc, #8]	@ (800e4c0 <raise+0xc>)
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	f7ff bfd2 	b.w	800e462 <_raise_r>
 800e4be:	bf00      	nop
 800e4c0:	240000ac 	.word	0x240000ac

0800e4c4 <_kill_r>:
 800e4c4:	b538      	push	{r3, r4, r5, lr}
 800e4c6:	4d07      	ldr	r5, [pc, #28]	@ (800e4e4 <_kill_r+0x20>)
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	4608      	mov	r0, r1
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	602b      	str	r3, [r5, #0]
 800e4d2:	f7f2 fee3 	bl	800129c <_kill>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	d102      	bne.n	800e4e0 <_kill_r+0x1c>
 800e4da:	682b      	ldr	r3, [r5, #0]
 800e4dc:	b103      	cbz	r3, 800e4e0 <_kill_r+0x1c>
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	bd38      	pop	{r3, r4, r5, pc}
 800e4e2:	bf00      	nop
 800e4e4:	24001954 	.word	0x24001954

0800e4e8 <_getpid_r>:
 800e4e8:	f7f2 bed0 	b.w	800128c <_getpid>

0800e4ec <_init>:
 800e4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ee:	bf00      	nop
 800e4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4f2:	bc08      	pop	{r3}
 800e4f4:	469e      	mov	lr, r3
 800e4f6:	4770      	bx	lr

0800e4f8 <_fini>:
 800e4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fa:	bf00      	nop
 800e4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4fe:	bc08      	pop	{r3}
 800e500:	469e      	mov	lr, r3
 800e502:	4770      	bx	lr
