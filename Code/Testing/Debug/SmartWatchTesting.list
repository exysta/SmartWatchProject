
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0a8  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0800f358  0800f358  00010358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f9cc  0800f9cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f9d4  0800f9d4  000109d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f9d8  0800f9d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800f9dc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c34  240001d8  0800fbb4  000111d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e0c  0800fbb4  00011e0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f779  00000000  00000000  00011206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004024  00000000  00000000  0003097f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013d0  00000000  00000000  000349a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f31  00000000  00000000  00035d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033ba2  00000000  00000000  00036ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f4e8  00000000  00000000  0006a84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013df62  00000000  00000000  00089d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c7c95  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006070  00000000  00000000  001c7cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001cdd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800f340 	.word	0x0800f340

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800f340 	.word	0x0800f340

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fcb4 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fccb 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fcac 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fcc3 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fca4 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fcbb 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fc9c 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fcb3 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fc94 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fcab 	bl	8002096 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b99      	ldr	r3, [pc, #612]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a97      	ldr	r2, [pc, #604]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b95      	ldr	r3, [pc, #596]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b91      	ldr	r3, [pc, #580]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a90      	ldr	r2, [pc, #576]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b8d      	ldr	r3, [pc, #564]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b8a      	ldr	r3, [pc, #552]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a88      	ldr	r2, [pc, #544]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b82      	ldr	r3, [pc, #520]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a81      	ldr	r2, [pc, #516]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b7e      	ldr	r3, [pc, #504]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b7b      	ldr	r3, [pc, #492]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a79      	ldr	r2, [pc, #484]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b77      	ldr	r3, [pc, #476]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b73      	ldr	r3, [pc, #460]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a72      	ldr	r2, [pc, #456]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b6f      	ldr	r3, [pc, #444]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b6c      	ldr	r3, [pc, #432]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a6a      	ldr	r2, [pc, #424]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b68      	ldr	r3, [pc, #416]	@ (80009c8 <MX_GPIO_Init+0x27c>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	4864      	ldr	r0, [pc, #400]	@ (80009cc <MX_GPIO_Init+0x280>)
 800083a:	f004 fd59 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000844:	4862      	ldr	r0, [pc, #392]	@ (80009d0 <MX_GPIO_Init+0x284>)
 8000846:	f004 fd53 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	4860      	ldr	r0, [pc, #384]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000852:	f004 fd4d 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	485e      	ldr	r0, [pc, #376]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 800085e:	f004 fd47 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000868:	485b      	ldr	r0, [pc, #364]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 800086a:	f004 fd41 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	@ 0x40
 8000872:	485a      	ldr	r0, [pc, #360]	@ (80009dc <MX_GPIO_Init+0x290>)
 8000874:	f004 fd3c 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	4858      	ldr	r0, [pc, #352]	@ (80009e0 <MX_GPIO_Init+0x294>)
 8000880:	f004 fd36 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_BLK_GPIO_Port, ST7789_BLK_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	4851      	ldr	r0, [pc, #324]	@ (80009d0 <MX_GPIO_Init+0x284>)
 800088a:	f004 fd31 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	4850      	ldr	r0, [pc, #320]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000894:	f004 fd2c 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputButton_Pin */
  GPIO_InitStruct.Pin = InputButton_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(InputButton_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484b      	ldr	r0, [pc, #300]	@ (80009dc <MX_GPIO_Init+0x290>)
 80008b0:	f004 fb6e 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80008b4:	2308      	movs	r3, #8
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4840      	ldr	r0, [pc, #256]	@ (80009cc <MX_GPIO_Init+0x280>)
 80008cc:	f004 fb60 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ST7789_BLK_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ST7789_BLK_Pin;
 80008d0:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4839      	ldr	r0, [pc, #228]	@ (80009d0 <MX_GPIO_Init+0x284>)
 80008ea:	f004 fb51 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4833      	ldr	r0, [pc, #204]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000906:	f004 fb43 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BME280_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|LD2_Pin;
 800090a:	f248 0302 	movw	r3, #32770	@ 0x8002
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	482c      	ldr	r0, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x288>)
 8000924:	f004 fb34 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8000928:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2302      	movs	r3, #2
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4825      	ldr	r0, [pc, #148]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 8000942:	f004 fb25 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 8000946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x28c>)
 8000960:	f004 fb16 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4818      	ldr	r0, [pc, #96]	@ (80009dc <MX_GPIO_Init+0x290>)
 800097c:	f004 fb08 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <MX_GPIO_Init+0x294>)
 800099a:	f004 faf9 	bl	8004f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2017      	movs	r0, #23
 80009a4:	f001 fb5d 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009a8:	2017      	movs	r0, #23
 80009aa:	f001 fb74 	bl	8002096 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2028      	movs	r0, #40	@ 0x28
 80009b4:	f001 fb55 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009b8:	2028      	movs	r0, #40	@ 0x28
 80009ba:	f001 fb6c 	bl	8002096 <HAL_NVIC_EnableIRQ>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020000 	.word	0x58020000
 80009d0:	58020400 	.word	0x58020400
 80009d4:	58021000 	.word	0x58021000
 80009d8:	58020c00 	.word	0x58020c00
 80009dc:	58020800 	.word	0x58020800
 80009e0:	58021800 	.word	0x58021800

080009e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <MX_I2C1_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a20:	f004 fc9a 	bl	8005358 <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 fb7b 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a32:	f004 fd2d 	bl	8005490 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fb72 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a44:	f004 fd6f 	bl	8005526 <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fb69 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	240001f4 	.word	0x240001f4
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	20b0ccff 	.word	0x20b0ccff

08000a64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <MX_I2C2_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <MX_I2C2_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000aa0:	f004 fc5a 	bl	8005358 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fb3b 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000ab2:	f004 fced 	bl	8005490 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 fb32 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000ac4:	f004 fd2f 	bl	8005526 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fb29 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000248 	.word	0x24000248
 8000adc:	40005800 	.word	0x40005800
 8000ae0:	20b0ccff 	.word	0x20b0ccff

08000ae4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <MX_I2C4_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <MX_I2C4_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b20:	f004 fc1a 	bl	8005358 <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 fafb 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b32:	f004 fcad 	bl	8005490 <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 faf2 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_I2C4_Init+0x74>)
 8000b44:	f004 fcef 	bl	8005526 <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fae9 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2400029c 	.word	0x2400029c
 8000b5c:	58001c00 	.word	0x58001c00
 8000b60:	20b0ccff 	.word	0x20b0ccff

08000b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0be      	sub	sp, #248	@ 0xf8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	22c0      	movs	r2, #192	@ 0xc0
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00c fc34 	bl	800d3f2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a73      	ldr	r2, [pc, #460]	@ (8000d5c <HAL_I2C_MspInit+0x1f8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d146      	bne.n	8000c22 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b94:	f04f 0208 	mov.w	r2, #8
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 fd20 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bb6:	f000 fab5 	bl	8001124 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b69      	ldr	r3, [pc, #420]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc0:	4a67      	ldr	r2, [pc, #412]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bca:	4b65      	ldr	r3, [pc, #404]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8000bd8:	23c0      	movs	r3, #192	@ 0xc0
 8000bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4859      	ldr	r0, [pc, #356]	@ (8000d64 <HAL_I2C_MspInit+0x200>)
 8000bfe:	f004 f9c7 	bl	8004f90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b57      	ldr	r3, [pc, #348]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c08:	4a55      	ldr	r2, [pc, #340]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c0e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c12:	4b53      	ldr	r3, [pc, #332]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c14:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000c20:	e098      	b.n	8000d54 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a50      	ldr	r2, [pc, #320]	@ (8000d68 <HAL_I2C_MspInit+0x204>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d147      	bne.n	8000cbc <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c2c:	f04f 0208 	mov.w	r2, #8
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 fcd4 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000c4e:	f000 fa69 	bl	8001124 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b43      	ldr	r3, [pc, #268]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c58:	4a41      	ldr	r2, [pc, #260]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c62:	4b3f      	ldr	r3, [pc, #252]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BME280_SCL_Pin|BME280_SDA_Pin;
 8000c70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4833      	ldr	r0, [pc, #204]	@ (8000d64 <HAL_I2C_MspInit+0x200>)
 8000c98:	f004 f97a 	bl	8004f90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c9c:	4b30      	ldr	r3, [pc, #192]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000c9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000ca4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ca8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cac:	4b2c      	ldr	r3, [pc, #176]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
}
 8000cba:	e04b      	b.n	8000d54 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C4)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d6c <HAL_I2C_MspInit+0x208>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d146      	bne.n	8000d54 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000cc6:	f04f 0210 	mov.w	r2, #16
 8000cca:	f04f 0300 	mov.w	r3, #0
 8000cce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 fc87 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000ce8:	f000 fa1c 	bl	8001124 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000d0a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <HAL_I2C_MspInit+0x20c>)
 8000d32:	f004 f92d 	bl	8004f90 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000d38:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d42:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_I2C_MspInit+0x1fc>)
 8000d48:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
}
 8000d54:	bf00      	nop
 8000d56:	37f8      	adds	r7, #248	@ 0xf8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020400 	.word	0x58020400
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	58001c00 	.word	0x58001c00
 8000d70:	58020c00 	.word	0x58020c00

08000d74 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*) &chr, 1, HAL_MAX_DELAY);
 8000d7c:	1d39      	adds	r1, r7, #4
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2201      	movs	r2, #1
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <__io_putchar+0x20>)
 8000d86:	f007 fe5c 	bl	8008a42 <HAL_UART_Transmit>
	return chr;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24000620 	.word	0x24000620

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
int main(void)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000da4:	f000 f992 	bl	80010cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da8:	f000 ffca 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dac:	f000 f826 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db0:	f7ff fccc 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000db4:	f7ff fc8a 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000db8:	f000 fccc 	bl	8001754 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000dbc:	f000 fd62 	bl	8001884 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000dc0:	f7ff fe50 	bl	8000a64 <MX_I2C2_Init>
  MX_UART5_Init();
 8000dc4:	f000 fd12 	bl	80017ec <MX_UART5_Init>
  MX_SPI1_Init();
 8000dc8:	f000 f9b2 	bl	8001130 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000dcc:	f7ff fe8a 	bl	8000ae4 <MX_I2C4_Init>
  MX_I2C1_Init();
 8000dd0:	f7ff fe08 	bl	80009e4 <MX_I2C1_Init>
#ifdef GPS_TEST
//	GNSS_Init(&GNSS_Handle, &GNSS_UART);
//	HAL_Delay(1000);
//	GNSS_LoadConfig(&GNSS_Handle);
//	uint32_t Timer = HAL_GetTick();
    Sensor_GNSS_Init(&SmartWatchData_handle,&GNSS_UART);        // init GNSS data handle
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <main+0x5c>)
 8000dd6:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <main+0x60>)
 8000dd8:	f00a ff02 	bl	800bbe0 <Sensor_GNSS_Init>
//					GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
//					GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
//			printf("--------------------------------------\r\n" );
//			Timer = HAL_GetTick();
//		}
		Sensor_GNSS_Update(&SmartWatchData_handle);
 8000ddc:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <main+0x60>)
 8000dde:	f00a ff2d 	bl	800bc3c <Sensor_GNSS_Update>

		Sensor_SmartWatch_log(&SmartWatchData_handle);
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <main+0x60>)
 8000de4:	f00b f8c8 	bl	800bf78 <Sensor_SmartWatch_log>
		//			Timer = HAL_GetTick();

		HAL_Delay(1000);
 8000de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dec:	f001 f83a 	bl	8001e64 <HAL_Delay>
		Sensor_GNSS_Update(&SmartWatchData_handle);
 8000df0:	bf00      	nop
 8000df2:	e7f3      	b.n	8000ddc <main+0x44>
 8000df4:	2400058c 	.word	0x2400058c
 8000df8:	24000998 	.word	0x24000998

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b09c      	sub	sp, #112	@ 0x70
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	224c      	movs	r2, #76	@ 0x4c
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00c faf1 	bl	800d3f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2220      	movs	r2, #32
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f00c faeb 	bl	800d3f2 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <SystemClock_Config+0xe0>)
 8000e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e26:	2004      	movs	r0, #4
 8000e28:	f004 fbca 	bl	80055c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <SystemClock_Config+0xe4>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee0 <SystemClock_Config+0xe4>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <SystemClock_Config+0xe4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e48:	bf00      	nop
 8000e4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <SystemClock_Config+0xe4>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e56:	d1f8      	bne.n	8000e4a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	2302      	movs	r3, #2
 8000e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000e6e:	2346      	movs	r3, #70	@ 0x46
 8000e70:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e76:	2304      	movs	r3, #4
 8000e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 fbf0 	bl	8005674 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e9a:	f000 f943 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	233f      	movs	r3, #63	@ 0x3f
 8000ea0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eae:	2340      	movs	r3, #64	@ 0x40
 8000eb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eb2:	2340      	movs	r3, #64	@ 0x40
 8000eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ebc:	2340      	movs	r3, #64	@ 0x40
 8000ebe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2106      	movs	r1, #6
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 f807 	bl	8005ed8 <HAL_RCC_ClockConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ed0:	f000 f928 	bl	8001124 <Error_Handler>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3770      	adds	r7, #112	@ 0x70
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58024800 	.word	0x58024800

08000ee4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART4)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a56      	ldr	r2, [pc, #344]	@ (8001050 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	f040 80a5 	bne.w	8001046 <HAL_UARTEx_RxEventCallback+0x162>
	{
		// Copy the data from DMA buffer to message buffer
		memcpy(messageBuffer, rxBuffer, Size);
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4954      	ldr	r1, [pc, #336]	@ (8001054 <HAL_UARTEx_RxEventCallback+0x170>)
 8000f02:	4855      	ldr	r0, [pc, #340]	@ (8001058 <HAL_UARTEx_RxEventCallback+0x174>)
 8000f04:	f00c fb05 	bl	800d512 <memcpy>

		// Null-terminate the string
		messageBuffer[Size] = '\0';
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4a53      	ldr	r2, [pc, #332]	@ (8001058 <HAL_UARTEx_RxEventCallback+0x174>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	54d1      	strb	r1, [r2, r3]

		// Set flag for main loop
		messageReady = 1;
 8000f10:	4b52      	ldr	r3, [pc, #328]	@ (800105c <HAL_UARTEx_RxEventCallback+0x178>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]

		HAL_UART_AbortReceive(huart);  // Stop DMA
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f007 feee 	bl	8008cf8 <HAL_UART_AbortReceive>
		memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f20:	2100      	movs	r1, #0
 8000f22:	484c      	ldr	r0, [pc, #304]	@ (8001054 <HAL_UARTEx_RxEventCallback+0x170>)
 8000f24:	f00c fa65 	bl	800d3f2 <memset>

		// Restart DMA reception
		HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000f28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f2c:	4949      	ldr	r1, [pc, #292]	@ (8001054 <HAL_UARTEx_RxEventCallback+0x170>)
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f00a fdb3 	bl	800ba9a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a48      	ldr	r2, [pc, #288]	@ (8001060 <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d068      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a46      	ldr	r2, [pc, #280]	@ (8001064 <HAL_UARTEx_RxEventCallback+0x180>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d061      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a43      	ldr	r2, [pc, #268]	@ (8001068 <HAL_UARTEx_RxEventCallback+0x184>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d05a      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a41      	ldr	r2, [pc, #260]	@ (800106c <HAL_UARTEx_RxEventCallback+0x188>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d053      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a3e      	ldr	r2, [pc, #248]	@ (8001070 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d04c      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a3c      	ldr	r2, [pc, #240]	@ (8001074 <HAL_UARTEx_RxEventCallback+0x190>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d045      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a39      	ldr	r2, [pc, #228]	@ (8001078 <HAL_UARTEx_RxEventCallback+0x194>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d03e      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a37      	ldr	r2, [pc, #220]	@ (800107c <HAL_UARTEx_RxEventCallback+0x198>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d037      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a34      	ldr	r2, [pc, #208]	@ (8001080 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d030      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a32      	ldr	r2, [pc, #200]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d029      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d022      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800108c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d01b      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d014      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a28      	ldr	r2, [pc, #160]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d00d      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a25      	ldr	r2, [pc, #148]	@ (8001098 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d006      	beq.n	8001014 <HAL_UARTEx_RxEventCallback+0x130>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a23      	ldr	r2, [pc, #140]	@ (800109c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d10c      	bne.n	800102e <HAL_UARTEx_RxEventCallback+0x14a>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0208 	bic.w	r2, r2, #8
 800102a:	601a      	str	r2, [r3, #0]
	}
}
 800102c:	e00b      	b.n	8001046 <HAL_UARTEx_RxEventCallback+0x162>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0204 	bic.w	r2, r2, #4
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004c00 	.word	0x40004c00
 8001054:	24000898 	.word	0x24000898
 8001058:	240002f0 	.word	0x240002f0
 800105c:	240003f0 	.word	0x240003f0
 8001060:	40020010 	.word	0x40020010
 8001064:	40020028 	.word	0x40020028
 8001068:	40020040 	.word	0x40020040
 800106c:	40020058 	.word	0x40020058
 8001070:	40020070 	.word	0x40020070
 8001074:	40020088 	.word	0x40020088
 8001078:	400200a0 	.word	0x400200a0
 800107c:	400200b8 	.word	0x400200b8
 8001080:	40020410 	.word	0x40020410
 8001084:	40020428 	.word	0x40020428
 8001088:	40020440 	.word	0x40020440
 800108c:	40020458 	.word	0x40020458
 8001090:	40020470 	.word	0x40020470
 8001094:	40020488 	.word	0x40020488
 8001098:	400204a0 	.word	0x400204a0
 800109c:	400204b8 	.word	0x400204b8

080010a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == InputButton_Pin)
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010b0:	d006      	beq.n	80010c0 <HAL_GPIO_EXTI_Callback+0x20>
	{

	}
	else if (GPIO_Pin == MAX30102_INT_Pin)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010b8:	d102      	bne.n	80010c0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		max30102_on_interrupt(&SmartWatchData_handle.max30102);
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x28>)
 80010bc:	f00b fb64 	bl	800c788 <max30102_on_interrupt>
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24000ad0 	.word	0x24000ad0

080010cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010de:	f000 fff5 	bl	80020cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010ee:	231f      	movs	r3, #31
 80010f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010f2:	2387      	movs	r3, #135	@ 0x87
 80010f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010fa:	2300      	movs	r3, #0
 80010fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010fe:	2301      	movs	r3, #1
 8001100:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001102:	2301      	movs	r3, #1
 8001104:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800110e:	463b      	mov	r3, r7
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f813 	bl	800213c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001116:	2004      	movs	r0, #4
 8001118:	f000 fff0 	bl	80020fc <HAL_MPU_Enable>

}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001134:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001136:	4a2a      	ldr	r2, [pc, #168]	@ (80011e0 <MX_SPI1_Init+0xb0>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <MX_SPI1_Init+0xac>)
 800113c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001144:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001148:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_SPI1_Init+0xac>)
 800114c:	2207      	movs	r2, #7
 800114e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001152:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001156:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001158:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <MX_SPI1_Init+0xac>)
 800115a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800115e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001162:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001166:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001168:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <MX_SPI1_Init+0xac>)
 800116a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_SPI1_Init+0xac>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_SPI1_Init+0xac>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001192:	2200      	movs	r2, #0
 8001194:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_SPI1_Init+0xac>)
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_SPI1_Init+0xac>)
 800119e:	2200      	movs	r2, #0
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_SPI1_Init+0xac>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_SPI1_Init+0xac>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_SPI1_Init+0xac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_SPI1_Init+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_SPI1_Init+0xac>)
 80011bc:	2200      	movs	r2, #0
 80011be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_SPI1_Init+0xac>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_SPI1_Init+0xac>)
 80011c8:	f006 fff2 	bl	80081b0 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 80011d2:	f7ff ffa7 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	240003f4 	.word	0x240003f4
 80011e0:	40013000 	.word	0x40013000

080011e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0ba      	sub	sp, #232	@ 0xe8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	22c0      	movs	r2, #192	@ 0xc0
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f00c f8f4 	bl	800d3f2 <memset>
  if(spiHandle->Instance==SPI1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a40      	ldr	r2, [pc, #256]	@ (8001310 <HAL_SPI_MspInit+0x12c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d179      	bne.n	8001308 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001214:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001220:	2300      	movs	r3, #0
 8001222:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4618      	mov	r0, r3
 800122a:	f005 f9e1 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001234:	f7ff ff76 	bl	8001124 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001238:	4b36      	ldr	r3, [pc, #216]	@ (8001314 <HAL_SPI_MspInit+0x130>)
 800123a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800123e:	4a35      	ldr	r2, [pc, #212]	@ (8001314 <HAL_SPI_MspInit+0x130>)
 8001240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001244:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001248:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <HAL_SPI_MspInit+0x130>)
 800124a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800124e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_SPI_MspInit+0x130>)
 8001258:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800125c:	4a2d      	ldr	r2, [pc, #180]	@ (8001314 <HAL_SPI_MspInit+0x130>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001266:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <HAL_SPI_MspInit+0x130>)
 8001268:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001274:	23a0      	movs	r3, #160	@ 0xa0
 8001276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128c:	2305      	movs	r3, #5
 800128e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001296:	4619      	mov	r1, r3
 8001298:	481f      	ldr	r0, [pc, #124]	@ (8001318 <HAL_SPI_MspInit+0x134>)
 800129a:	f003 fe79 	bl	8004f90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001320 <HAL_SPI_MspInit+0x13c>)
 80012a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012a6:	2226      	movs	r2, #38	@ 0x26
 80012a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012ac:	2240      	movs	r2, #64	@ 0x40
 80012ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012dc:	480f      	ldr	r0, [pc, #60]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012de:	f000 ff6d 	bl	80021bc <HAL_DMA_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80012e8:	f7ff ff1c 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012f0:	679a      	str	r2, [r3, #120]	@ 0x78
 80012f2:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_SPI_MspInit+0x138>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2023      	movs	r0, #35	@ 0x23
 80012fe:	f000 feb0 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001302:	2023      	movs	r0, #35	@ 0x23
 8001304:	f000 fec7 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	37e8      	adds	r7, #232	@ 0xe8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40013000 	.word	0x40013000
 8001314:	58024400 	.word	0x58024400
 8001318:	58020000 	.word	0x58020000
 800131c:	2400047c 	.word	0x2400047c
 8001320:	40020088 	.word	0x40020088

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_MspInit+0x30>)
 800132c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001330:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_MspInit+0x30>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_MspInit+0x30>)
 800133c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	58024400 	.word	0x58024400

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <NMI_Handler+0x4>

08001360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <MemManage_Handler+0x4>

08001370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <UsageFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ae:	f000 fd39 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <DMA1_Stream0_IRQHandler+0x10>)
 80013be:	f002 fa59 	bl	8003874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	240007a4 	.word	0x240007a4

080013cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <DMA1_Stream1_IRQHandler+0x10>)
 80013d2:	f002 fa4f 	bl	8003874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2400081c 	.word	0x2400081c

080013e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <DMA1_Stream2_IRQHandler+0x10>)
 80013e6:	f002 fa45 	bl	8003874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	240006b4 	.word	0x240006b4

080013f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Stream3_IRQHandler+0x10>)
 80013fa:	f002 fa3b 	bl	8003874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2400072c 	.word	0x2400072c

08001408 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <DMA1_Stream5_IRQHandler+0x10>)
 800140e:	f002 fa31 	bl	8003874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2400047c 	.word	0x2400047c

0800141c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8001420:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001424:	f003 ff7d 	bl	8005322 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <SPI1_IRQHandler+0x10>)
 8001432:	f006 ffe1 	bl	80083f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	240003f4 	.word	0x240003f4

08001440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(InputButton_Pin);
 8001444:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001448:	f003 ff6b 	bl	8005322 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <UART4_IRQHandler+0x10>)
 8001456:	f007 fd05 	bl	8008e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	240004f8 	.word	0x240004f8

08001464 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <UART5_IRQHandler+0x10>)
 800146a:	f007 fcfb 	bl	8008e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2400058c 	.word	0x2400058c

08001478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_kill>:

int _kill(int pid, int sig)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001492:	f00c f811 	bl	800d4b8 <__errno>
 8001496:	4603      	mov	r3, r0
 8001498:	2216      	movs	r2, #22
 800149a:	601a      	str	r2, [r3, #0]
  return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_exit>:

void _exit (int status)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffe7 	bl	8001488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ba:	bf00      	nop
 80014bc:	e7fd      	b.n	80014ba <_exit+0x12>

080014be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e00a      	b.n	80014e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d0:	f3af 8000 	nop.w
 80014d4:	4601      	mov	r1, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	b2ca      	uxtb	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbf0      	blt.n	80014d0 <_read+0x12>
  }

  return len;
 80014ee:	687b      	ldr	r3, [r7, #4]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e009      	b.n	800151e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	60ba      	str	r2, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fc2e 	bl	8000d74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbf1      	blt.n	800150a <_write+0x12>
  }
  return len;
 8001526:	687b      	ldr	r3, [r7, #4]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_close>:

int _close(int file)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001558:	605a      	str	r2, [r3, #4]
  return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_isatty>:

int _isatty(int file)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f00b ff76 	bl	800d4b8 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	24100000 	.word	0x24100000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	240004f4 	.word	0x240004f4
 8001600:	24000e10 	.word	0x24000e10

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001608:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <SystemInit+0x100>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160e:	4a3d      	ldr	r2, [pc, #244]	@ (8001704 <SystemInit+0x100>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001618:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <SystemInit+0x104>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	2b02      	cmp	r3, #2
 8001622:	d807      	bhi.n	8001634 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001624:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <SystemInit+0x104>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 030f 	bic.w	r3, r3, #15
 800162c:	4a36      	ldr	r2, [pc, #216]	@ (8001708 <SystemInit+0x104>)
 800162e:	f043 0303 	orr.w	r3, r3, #3
 8001632:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <SystemInit+0x108>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a34      	ldr	r2, [pc, #208]	@ (800170c <SystemInit+0x108>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <SystemInit+0x108>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <SystemInit+0x108>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4930      	ldr	r1, [pc, #192]	@ (800170c <SystemInit+0x108>)
 800164c:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <SystemInit+0x10c>)
 800164e:	4013      	ands	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001652:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <SystemInit+0x104>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <SystemInit+0x104>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 030f 	bic.w	r3, r3, #15
 8001666:	4a28      	ldr	r2, [pc, #160]	@ (8001708 <SystemInit+0x104>)
 8001668:	f043 0303 	orr.w	r3, r3, #3
 800166c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <SystemInit+0x108>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <SystemInit+0x108>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800167a:	4b24      	ldr	r3, [pc, #144]	@ (800170c <SystemInit+0x108>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <SystemInit+0x108>)
 8001682:	4a24      	ldr	r2, [pc, #144]	@ (8001714 <SystemInit+0x110>)
 8001684:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <SystemInit+0x108>)
 8001688:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <SystemInit+0x114>)
 800168a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <SystemInit+0x108>)
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <SystemInit+0x118>)
 8001690:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001692:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <SystemInit+0x108>)
 8001694:	2200      	movs	r2, #0
 8001696:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <SystemInit+0x108>)
 800169a:	4a20      	ldr	r2, [pc, #128]	@ (800171c <SystemInit+0x118>)
 800169c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800169e:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <SystemInit+0x108>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <SystemInit+0x108>)
 80016a6:	4a1d      	ldr	r2, [pc, #116]	@ (800171c <SystemInit+0x118>)
 80016a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <SystemInit+0x108>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <SystemInit+0x108>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a15      	ldr	r2, [pc, #84]	@ (800170c <SystemInit+0x108>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <SystemInit+0x108>)
 80016be:	2200      	movs	r2, #0
 80016c0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <SystemInit+0x108>)
 80016c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80016c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d113      	bne.n	80016f8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <SystemInit+0x108>)
 80016d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80016d6:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <SystemInit+0x108>)
 80016d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016dc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <SystemInit+0x11c>)
 80016e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <SystemInit+0x108>)
 80016ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80016ee:	4a07      	ldr	r2, [pc, #28]	@ (800170c <SystemInit+0x108>)
 80016f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016f4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	52002000 	.word	0x52002000
 800170c:	58024400 	.word	0x58024400
 8001710:	eaf6ed7f 	.word	0xeaf6ed7f
 8001714:	02020200 	.word	0x02020200
 8001718:	01ff0000 	.word	0x01ff0000
 800171c:	01010280 	.word	0x01010280
 8001720:	52004000 	.word	0x52004000

08001724 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <ExitRun0Mode+0x2c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <ExitRun0Mode+0x2c>)
 800172e:	f023 0302 	bic.w	r3, r3, #2
 8001732:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001734:	bf00      	nop
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <ExitRun0Mode+0x2c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f9      	beq.n	8001736 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	58024800 	.word	0x58024800

08001754 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_UART4_Init+0x90>)
 800175a:	4a23      	ldr	r2, [pc, #140]	@ (80017e8 <MX_UART4_Init+0x94>)
 800175c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <MX_UART4_Init+0x90>)
 8001760:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001764:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_UART4_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <MX_UART4_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_UART4_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_UART4_Init+0x90>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_UART4_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_UART4_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_UART4_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_UART4_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <MX_UART4_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800179c:	4811      	ldr	r0, [pc, #68]	@ (80017e4 <MX_UART4_Init+0x90>)
 800179e:	f007 f900 	bl	80089a2 <HAL_UART_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80017a8:	f7ff fcbc 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_UART4_Init+0x90>)
 80017b0:	f00a f8f7 	bl	800b9a2 <HAL_UARTEx_SetTxFifoThreshold>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80017ba:	f7ff fcb3 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017be:	2100      	movs	r1, #0
 80017c0:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <MX_UART4_Init+0x90>)
 80017c2:	f00a f92c 	bl	800ba1e <HAL_UARTEx_SetRxFifoThreshold>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80017cc:	f7ff fcaa 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_UART4_Init+0x90>)
 80017d2:	f00a f8ad 	bl	800b930 <HAL_UARTEx_DisableFifoMode>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80017dc:	f7ff fca2 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	240004f8 	.word	0x240004f8
 80017e8:	40004c00 	.word	0x40004c00

080017ec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <MX_UART5_Init+0x90>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	@ (8001880 <MX_UART5_Init+0x94>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <MX_UART5_Init+0x90>)
 80017f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <MX_UART5_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <MX_UART5_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <MX_UART5_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <MX_UART5_Init+0x90>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <MX_UART5_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <MX_UART5_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <MX_UART5_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <MX_UART5_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <MX_UART5_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001834:	4811      	ldr	r0, [pc, #68]	@ (800187c <MX_UART5_Init+0x90>)
 8001836:	f007 f8b4 	bl	80089a2 <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001840:	f7ff fc70 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_UART5_Init+0x90>)
 8001848:	f00a f8ab 	bl	800b9a2 <HAL_UARTEx_SetTxFifoThreshold>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001852:	f7ff fc67 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4808      	ldr	r0, [pc, #32]	@ (800187c <MX_UART5_Init+0x90>)
 800185a:	f00a f8e0 	bl	800ba1e <HAL_UARTEx_SetRxFifoThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001864:	f7ff fc5e 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	@ (800187c <MX_UART5_Init+0x90>)
 800186a:	f00a f861 	bl	800b930 <HAL_UARTEx_DisableFifoMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001874:	f7ff fc56 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2400058c 	.word	0x2400058c
 8001880:	40005000 	.word	0x40005000

08001884 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001888:	4b22      	ldr	r3, [pc, #136]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <MX_USART3_UART_Init+0x94>)
 800188c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 8001890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018cc:	4811      	ldr	r0, [pc, #68]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018ce:	f007 f868 	bl	80089a2 <HAL_UART_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018d8:	f7ff fc24 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018dc:	2100      	movs	r1, #0
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018e0:	f00a f85f 	bl	800b9a2 <HAL_UARTEx_SetTxFifoThreshold>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018ea:	f7ff fc1b 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ee:	2100      	movs	r1, #0
 80018f0:	4808      	ldr	r0, [pc, #32]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 80018f2:	f00a f894 	bl	800ba1e <HAL_UARTEx_SetRxFifoThreshold>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f7ff fc12 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_USART3_UART_Init+0x90>)
 8001902:	f00a f815 	bl	800b930 <HAL_UARTEx_DisableFifoMode>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800190c:	f7ff fc0a 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	24000620 	.word	0x24000620
 8001918:	40004800 	.word	0x40004800

0800191c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0be      	sub	sp, #248	@ 0xf8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	22c0      	movs	r2, #192	@ 0xc0
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f00b fd58 	bl	800d3f2 <memset>
  if(uartHandle->Instance==UART4)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4ab1      	ldr	r2, [pc, #708]	@ (8001c0c <HAL_UART_MspInit+0x2f0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	f040 80ac 	bne.w	8001aa6 <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800194e:	f04f 0202 	mov.w	r2, #2
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001960:	f107 0320 	add.w	r3, r7, #32
 8001964:	4618      	mov	r0, r3
 8001966:	f004 fe43 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001970:	f7ff fbd8 	bl	8001124 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001974:	4ba6      	ldr	r3, [pc, #664]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001976:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800197a:	4aa5      	ldr	r2, [pc, #660]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 800197c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001980:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001984:	4ba2      	ldr	r3, [pc, #648]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001986:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800198a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b9f      	ldr	r3, [pc, #636]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001994:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001998:	4a9d      	ldr	r2, [pc, #628]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019a2:	4b9b      	ldr	r3, [pc, #620]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 80019a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 80019b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019ca:	2308      	movs	r3, #8
 80019cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019d4:	4619      	mov	r1, r3
 80019d6:	488f      	ldr	r0, [pc, #572]	@ (8001c14 <HAL_UART_MspInit+0x2f8>)
 80019d8:	f003 fada 	bl	8004f90 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80019dc:	4b8e      	ldr	r3, [pc, #568]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 80019de:	4a8f      	ldr	r2, [pc, #572]	@ (8001c1c <HAL_UART_MspInit+0x300>)
 80019e0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80019e2:	4b8d      	ldr	r3, [pc, #564]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 80019e4:	223f      	movs	r2, #63	@ 0x3f
 80019e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e8:	4b8b      	ldr	r3, [pc, #556]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ee:	4b8a      	ldr	r3, [pc, #552]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f4:	4b88      	ldr	r3, [pc, #544]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 80019f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fc:	4b86      	ldr	r3, [pc, #536]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a02:	4b85      	ldr	r3, [pc, #532]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001a08:	4b83      	ldr	r3, [pc, #524]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 8001a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a10:	4b81      	ldr	r3, [pc, #516]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a16:	4b80      	ldr	r3, [pc, #512]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001a1c:	487e      	ldr	r0, [pc, #504]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 8001a1e:	f000 fbcd 	bl	80021bc <HAL_DMA_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001a28:	f7ff fb7c 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a7a      	ldr	r2, [pc, #488]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 8001a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a34:	4a78      	ldr	r2, [pc, #480]	@ (8001c18 <HAL_UART_MspInit+0x2fc>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001a3a:	4b79      	ldr	r3, [pc, #484]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a3c:	4a79      	ldr	r2, [pc, #484]	@ (8001c24 <HAL_UART_MspInit+0x308>)
 8001a3e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001a40:	4b77      	ldr	r3, [pc, #476]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a46:	4b76      	ldr	r3, [pc, #472]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a48:	2240      	movs	r2, #64	@ 0x40
 8001a4a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4c:	4b74      	ldr	r3, [pc, #464]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a52:	4b73      	ldr	r3, [pc, #460]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a58:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5a:	4b71      	ldr	r3, [pc, #452]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a60:	4b6f      	ldr	r3, [pc, #444]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001a66:	4b6e      	ldr	r3, [pc, #440]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a72:	4b6b      	ldr	r3, [pc, #428]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001a78:	4869      	ldr	r0, [pc, #420]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a7a:	f000 fb9f 	bl	80021bc <HAL_DMA_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001a84:	f7ff fb4e 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a65      	ldr	r2, [pc, #404]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a8c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a8e:	4a64      	ldr	r2, [pc, #400]	@ (8001c20 <HAL_UART_MspInit+0x304>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2034      	movs	r0, #52	@ 0x34
 8001a9a:	f000 fae2 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a9e:	2034      	movs	r0, #52	@ 0x34
 8001aa0:	f000 faf9 	bl	8002096 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aa4:	e116      	b.n	8001cd4 <HAL_UART_MspInit+0x3b8>
  else if(uartHandle->Instance==UART5)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a5f      	ldr	r2, [pc, #380]	@ (8001c28 <HAL_UART_MspInit+0x30c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	f040 80c5 	bne.w	8001c3c <HAL_UART_MspInit+0x320>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ab2:	f04f 0202 	mov.w	r2, #2
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 fd91 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001ad4:	f7ff fb26 	bl	8001124 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001ada:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ade:	4a4c      	ldr	r2, [pc, #304]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001ae0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ae4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001ae8:	4b49      	ldr	r3, [pc, #292]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001aea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b46      	ldr	r3, [pc, #280]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001afc:	4a44      	ldr	r2, [pc, #272]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b06:	4b42      	ldr	r3, [pc, #264]	@ (8001c10 <HAL_UART_MspInit+0x2f4>)
 8001b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GNSS_RX_Pin|GNSS_TX_Pin;
 8001b14:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001b2e:	230e      	movs	r3, #14
 8001b30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4836      	ldr	r0, [pc, #216]	@ (8001c14 <HAL_UART_MspInit+0x2f8>)
 8001b3c:	f003 fa28 	bl	8004f90 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001b40:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b42:	4a3b      	ldr	r2, [pc, #236]	@ (8001c30 <HAL_UART_MspInit+0x314>)
 8001b44:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001b46:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b48:	2241      	movs	r2, #65	@ 0x41
 8001b4a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4c:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b52:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b5e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b60:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b66:	4b31      	ldr	r3, [pc, #196]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b72:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001b80:	482a      	ldr	r0, [pc, #168]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b82:	f000 fb1b 	bl	80021bc <HAL_DMA_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8001b8c:	f7ff faca 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b98:	4a24      	ldr	r2, [pc, #144]	@ (8001c2c <HAL_UART_MspInit+0x310>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001b9e:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001ba0:	4a25      	ldr	r2, [pc, #148]	@ (8001c38 <HAL_UART_MspInit+0x31c>)
 8001ba2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001ba6:	2242      	movs	r2, #66	@ 0x42
 8001ba8:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bac:	2240      	movs	r2, #64	@ 0x40
 8001bae:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb0:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bbc:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001bdc:	4815      	ldr	r0, [pc, #84]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bde:	f000 faed 	bl	80021bc <HAL_DMA_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001be8:	f7ff fa9c 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a11      	ldr	r2, [pc, #68]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bf0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bf2:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <HAL_UART_MspInit+0x318>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2035      	movs	r0, #53	@ 0x35
 8001bfe:	f000 fa30 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c02:	2035      	movs	r0, #53	@ 0x35
 8001c04:	f000 fa47 	bl	8002096 <HAL_NVIC_EnableIRQ>
}
 8001c08:	e064      	b.n	8001cd4 <HAL_UART_MspInit+0x3b8>
 8001c0a:	bf00      	nop
 8001c0c:	40004c00 	.word	0x40004c00
 8001c10:	58024400 	.word	0x58024400
 8001c14:	58020400 	.word	0x58020400
 8001c18:	240006b4 	.word	0x240006b4
 8001c1c:	40020040 	.word	0x40020040
 8001c20:	2400072c 	.word	0x2400072c
 8001c24:	40020058 	.word	0x40020058
 8001c28:	40005000 	.word	0x40005000
 8001c2c:	240007a4 	.word	0x240007a4
 8001c30:	40020010 	.word	0x40020010
 8001c34:	2400081c 	.word	0x2400081c
 8001c38:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a26      	ldr	r2, [pc, #152]	@ (8001cdc <HAL_UART_MspInit+0x3c0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d146      	bne.n	8001cd4 <HAL_UART_MspInit+0x3b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c46:	f04f 0202 	mov.w	r2, #2
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 fcc7 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x350>
      Error_Handler();
 8001c68:	f7ff fa5c 	bl	8001124 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <HAL_UART_MspInit+0x3c4>)
 8001c6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_UART_MspInit+0x3c4>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_UART_MspInit+0x3c4>)
 8001c7e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_UART_MspInit+0x3c4>)
 8001c8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c90:	4a13      	ldr	r2, [pc, #76]	@ (8001ce0 <HAL_UART_MspInit+0x3c4>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_UART_MspInit+0x3c4>)
 8001c9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ca8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <HAL_UART_MspInit+0x3c8>)
 8001cd0:	f003 f95e 	bl	8004f90 <HAL_GPIO_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	37f8      	adds	r7, #248	@ 0xf8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40004800 	.word	0x40004800
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58020c00 	.word	0x58020c00

08001ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ce8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001d24 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001cec:	f7ff fd1a 	bl	8001724 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cf0:	f7ff fc88 	bl	8001604 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf6:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f00b fbd3 	bl	800d4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff f83b 	bl	8000d98 <main>
  bx  lr
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001d28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d2c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001d30:	0800f9dc 	.word	0x0800f9dc
  ldr r2, =_sbss
 8001d34:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001d38:	24000e0c 	.word	0x24000e0c

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d46:	2003      	movs	r0, #3
 8001d48:	f000 f980 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001d4c:	f004 fa7a 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_Init+0x68>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	4913      	ldr	r1, [pc, #76]	@ (8001dac <HAL_Init+0x6c>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <HAL_Init+0x68>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <HAL_Init+0x6c>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d80:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <HAL_Init+0x70>)
 8001d82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <HAL_Init+0x74>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f814 	bl	8001db8 <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e002      	b.n	8001da0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9a:	f7ff fac3 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58024400 	.word	0x58024400
 8001dac:	0800f420 	.word	0x0800f420
 8001db0:	24000004 	.word	0x24000004
 8001db4:	24000000 	.word	0x24000000

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dc0:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_InitTick+0x60>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e021      	b.n	8001e10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_InitTick+0x64>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <HAL_InitTick+0x60>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f965 	bl	80020b2 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f92f 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	@ (8001e20 <HAL_InitTick+0x68>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2400000c 	.word	0x2400000c
 8001e1c:	24000000 	.word	0x24000000
 8001e20:	24000008 	.word	0x24000008

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2400000c 	.word	0x2400000c
 8001e48:	24000894 	.word	0x24000894

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	24000894 	.word	0x24000894

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2400000c 	.word	0x2400000c

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <__NVIC_SetPriorityGrouping+0x40>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x40>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00
 8001ef0:	05fa0000 	.word	0x05fa0000

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	@ (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff40 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff90 	bl	8001fa0 <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5f 	bl	8001f4c <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff33 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa4 	bl	8002008 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020d0:	f3bf 8f5f 	dmb	sy
}
 80020d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_MPU_Disable+0x28>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	4a06      	ldr	r2, [pc, #24]	@ (80020f4 <HAL_MPU_Disable+0x28>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_MPU_Disable+0x2c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00
 80020f8:	e000ed90 	.word	0xe000ed90

080020fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_MPU_Enable+0x38>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_MPU_Enable+0x3c>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <HAL_MPU_Enable+0x3c>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002118:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800211a:	f3bf 8f4f 	dsb	sy
}
 800211e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002120:	f3bf 8f6f 	isb	sy
}
 8002124:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed90 	.word	0xe000ed90
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	785a      	ldrb	r2, [r3, #1]
 8002148:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 800214a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800214c:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002158:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7b1b      	ldrb	r3, [r3, #12]
 8002164:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7adb      	ldrb	r3, [r3, #11]
 800216a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800216c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7a9b      	ldrb	r3, [r3, #10]
 8002172:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002174:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7b5b      	ldrb	r3, [r3, #13]
 800217a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800217c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7b9b      	ldrb	r3, [r3, #14]
 8002182:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7bdb      	ldrb	r3, [r3, #15]
 800218a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800218c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7a5b      	ldrb	r3, [r3, #9]
 8002192:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7a1b      	ldrb	r3, [r3, #8]
 800219a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800219c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a8:	6113      	str	r3, [r2, #16]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed90 	.word	0xe000ed90

080021bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff fe42 	bl	8001e4c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e37d      	b.n	80028d0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a66      	ldr	r2, [pc, #408]	@ (8002374 <HAL_DMA_Init+0x1b8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a65      	ldr	r2, [pc, #404]	@ (8002378 <HAL_DMA_Init+0x1bc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a63      	ldr	r2, [pc, #396]	@ (800237c <HAL_DMA_Init+0x1c0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a62      	ldr	r2, [pc, #392]	@ (8002380 <HAL_DMA_Init+0x1c4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a60      	ldr	r2, [pc, #384]	@ (8002384 <HAL_DMA_Init+0x1c8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a5f      	ldr	r2, [pc, #380]	@ (8002388 <HAL_DMA_Init+0x1cc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_DMA_Init+0x1d0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5c      	ldr	r2, [pc, #368]	@ (8002390 <HAL_DMA_Init+0x1d4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5a      	ldr	r2, [pc, #360]	@ (8002394 <HAL_DMA_Init+0x1d8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a59      	ldr	r2, [pc, #356]	@ (8002398 <HAL_DMA_Init+0x1dc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a57      	ldr	r2, [pc, #348]	@ (800239c <HAL_DMA_Init+0x1e0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a56      	ldr	r2, [pc, #344]	@ (80023a0 <HAL_DMA_Init+0x1e4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a54      	ldr	r2, [pc, #336]	@ (80023a4 <HAL_DMA_Init+0x1e8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a53      	ldr	r2, [pc, #332]	@ (80023a8 <HAL_DMA_Init+0x1ec>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a51      	ldr	r2, [pc, #324]	@ (80023ac <HAL_DMA_Init+0x1f0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Init+0xb8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a50      	ldr	r2, [pc, #320]	@ (80023b0 <HAL_DMA_Init+0x1f4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_DMA_Init+0xbc>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_DMA_Init+0xbe>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 813c 	beq.w	80024f8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a37      	ldr	r2, [pc, #220]	@ (8002374 <HAL_DMA_Init+0x1b8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d04a      	beq.n	8002330 <HAL_DMA_Init+0x174>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a36      	ldr	r2, [pc, #216]	@ (8002378 <HAL_DMA_Init+0x1bc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d045      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a34      	ldr	r2, [pc, #208]	@ (800237c <HAL_DMA_Init+0x1c0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d040      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a33      	ldr	r2, [pc, #204]	@ (8002380 <HAL_DMA_Init+0x1c4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d03b      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a31      	ldr	r2, [pc, #196]	@ (8002384 <HAL_DMA_Init+0x1c8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d036      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a30      	ldr	r2, [pc, #192]	@ (8002388 <HAL_DMA_Init+0x1cc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d031      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2e      	ldr	r2, [pc, #184]	@ (800238c <HAL_DMA_Init+0x1d0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02c      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2d      	ldr	r2, [pc, #180]	@ (8002390 <HAL_DMA_Init+0x1d4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d027      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002394 <HAL_DMA_Init+0x1d8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d022      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <HAL_DMA_Init+0x1dc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d01d      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a28      	ldr	r2, [pc, #160]	@ (800239c <HAL_DMA_Init+0x1e0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d018      	beq.n	8002330 <HAL_DMA_Init+0x174>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a27      	ldr	r2, [pc, #156]	@ (80023a0 <HAL_DMA_Init+0x1e4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <HAL_DMA_Init+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	@ (80023a4 <HAL_DMA_Init+0x1e8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00e      	beq.n	8002330 <HAL_DMA_Init+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <HAL_DMA_Init+0x1ec>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d009      	beq.n	8002330 <HAL_DMA_Init+0x174>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a22      	ldr	r2, [pc, #136]	@ (80023ac <HAL_DMA_Init+0x1f0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_DMA_Init+0x174>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	@ (80023b0 <HAL_DMA_Init+0x1f4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d108      	bne.n	8002342 <HAL_DMA_Init+0x186>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <HAL_DMA_Init+0x196>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002352:	e02f      	b.n	80023b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002354:	f7ff fd7a 	bl	8001e4c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b05      	cmp	r3, #5
 8002360:	d928      	bls.n	80023b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2203      	movs	r2, #3
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e2ad      	b.n	80028d0 <HAL_DMA_Init+0x714>
 8002374:	40020010 	.word	0x40020010
 8002378:	40020028 	.word	0x40020028
 800237c:	40020040 	.word	0x40020040
 8002380:	40020058 	.word	0x40020058
 8002384:	40020070 	.word	0x40020070
 8002388:	40020088 	.word	0x40020088
 800238c:	400200a0 	.word	0x400200a0
 8002390:	400200b8 	.word	0x400200b8
 8002394:	40020410 	.word	0x40020410
 8002398:	40020428 	.word	0x40020428
 800239c:	40020440 	.word	0x40020440
 80023a0:	40020458 	.word	0x40020458
 80023a4:	40020470 	.word	0x40020470
 80023a8:	40020488 	.word	0x40020488
 80023ac:	400204a0 	.word	0x400204a0
 80023b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1c8      	bne.n	8002354 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4b73      	ldr	r3, [pc, #460]	@ (800259c <HAL_DMA_Init+0x3e0>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	4313      	orrs	r3, r2
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b28      	cmp	r3, #40	@ 0x28
 800241e:	d903      	bls.n	8002428 <HAL_DMA_Init+0x26c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b2e      	cmp	r3, #46	@ 0x2e
 8002426:	d91f      	bls.n	8002468 <HAL_DMA_Init+0x2ac>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b3e      	cmp	r3, #62	@ 0x3e
 800242e:	d903      	bls.n	8002438 <HAL_DMA_Init+0x27c>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b42      	cmp	r3, #66	@ 0x42
 8002436:	d917      	bls.n	8002468 <HAL_DMA_Init+0x2ac>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b46      	cmp	r3, #70	@ 0x46
 800243e:	d903      	bls.n	8002448 <HAL_DMA_Init+0x28c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b48      	cmp	r3, #72	@ 0x48
 8002446:	d90f      	bls.n	8002468 <HAL_DMA_Init+0x2ac>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b4e      	cmp	r3, #78	@ 0x4e
 800244e:	d903      	bls.n	8002458 <HAL_DMA_Init+0x29c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b52      	cmp	r3, #82	@ 0x52
 8002456:	d907      	bls.n	8002468 <HAL_DMA_Init+0x2ac>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b73      	cmp	r3, #115	@ 0x73
 800245e:	d905      	bls.n	800246c <HAL_DMA_Init+0x2b0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b77      	cmp	r3, #119	@ 0x77
 8002466:	d801      	bhi.n	800246c <HAL_DMA_Init+0x2b0>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_DMA_Init+0x2b2>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002478:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f023 0307 	bic.w	r3, r3, #7
 8002490:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d117      	bne.n	80024d4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00e      	beq.n	80024d4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f002 fbe0 	bl	8004c7c <DMA_CheckFifoParam>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2240      	movs	r2, #64	@ 0x40
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e1fd      	b.n	80028d0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f002 fb1b 	bl	8004b18 <DMA_CalcBaseAndBitshift>
 80024e2:	4603      	mov	r3, r0
 80024e4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	223f      	movs	r2, #63	@ 0x3f
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	e0fd      	b.n	80026f4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	@ (80025a0 <HAL_DMA_Init+0x3e4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d04a      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	@ (80025a4 <HAL_DMA_Init+0x3e8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d045      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	@ (80025a8 <HAL_DMA_Init+0x3ec>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d040      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a24      	ldr	r2, [pc, #144]	@ (80025ac <HAL_DMA_Init+0x3f0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d03b      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	@ (80025b0 <HAL_DMA_Init+0x3f4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d036      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	@ (80025b4 <HAL_DMA_Init+0x3f8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d031      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1f      	ldr	r2, [pc, #124]	@ (80025b8 <HAL_DMA_Init+0x3fc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d02c      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1e      	ldr	r2, [pc, #120]	@ (80025bc <HAL_DMA_Init+0x400>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d027      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <HAL_DMA_Init+0x404>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d022      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_DMA_Init+0x408>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d01d      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_DMA_Init+0x40c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d018      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <HAL_DMA_Init+0x410>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a16      	ldr	r2, [pc, #88]	@ (80025d0 <HAL_DMA_Init+0x414>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00e      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a15      	ldr	r2, [pc, #84]	@ (80025d4 <HAL_DMA_Init+0x418>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <HAL_DMA_Init+0x41c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_DMA_Init+0x3dc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a12      	ldr	r2, [pc, #72]	@ (80025dc <HAL_DMA_Init+0x420>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d123      	bne.n	80025e0 <HAL_DMA_Init+0x424>
 8002598:	2301      	movs	r3, #1
 800259a:	e022      	b.n	80025e2 <HAL_DMA_Init+0x426>
 800259c:	fe10803f 	.word	0xfe10803f
 80025a0:	48022c08 	.word	0x48022c08
 80025a4:	48022c1c 	.word	0x48022c1c
 80025a8:	48022c30 	.word	0x48022c30
 80025ac:	48022c44 	.word	0x48022c44
 80025b0:	48022c58 	.word	0x48022c58
 80025b4:	48022c6c 	.word	0x48022c6c
 80025b8:	48022c80 	.word	0x48022c80
 80025bc:	48022c94 	.word	0x48022c94
 80025c0:	58025408 	.word	0x58025408
 80025c4:	5802541c 	.word	0x5802541c
 80025c8:	58025430 	.word	0x58025430
 80025cc:	58025444 	.word	0x58025444
 80025d0:	58025458 	.word	0x58025458
 80025d4:	5802546c 	.word	0x5802546c
 80025d8:	58025480 	.word	0x58025480
 80025dc:	58025494 	.word	0x58025494
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d07d      	beq.n	80026e2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a7f      	ldr	r2, [pc, #508]	@ (80027e8 <HAL_DMA_Init+0x62c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d021      	beq.n	8002634 <HAL_DMA_Init+0x478>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a7d      	ldr	r2, [pc, #500]	@ (80027ec <HAL_DMA_Init+0x630>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01c      	beq.n	8002634 <HAL_DMA_Init+0x478>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7c      	ldr	r2, [pc, #496]	@ (80027f0 <HAL_DMA_Init+0x634>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d017      	beq.n	8002634 <HAL_DMA_Init+0x478>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7a      	ldr	r2, [pc, #488]	@ (80027f4 <HAL_DMA_Init+0x638>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d012      	beq.n	8002634 <HAL_DMA_Init+0x478>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a79      	ldr	r2, [pc, #484]	@ (80027f8 <HAL_DMA_Init+0x63c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00d      	beq.n	8002634 <HAL_DMA_Init+0x478>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a77      	ldr	r2, [pc, #476]	@ (80027fc <HAL_DMA_Init+0x640>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d008      	beq.n	8002634 <HAL_DMA_Init+0x478>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a76      	ldr	r2, [pc, #472]	@ (8002800 <HAL_DMA_Init+0x644>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <HAL_DMA_Init+0x478>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a74      	ldr	r2, [pc, #464]	@ (8002804 <HAL_DMA_Init+0x648>)
 8002632:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4b6e      	ldr	r3, [pc, #440]	@ (8002808 <HAL_DMA_Init+0x64c>)
 8002650:	4013      	ands	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b40      	cmp	r3, #64	@ 0x40
 800265a:	d008      	beq.n	800266e <HAL_DMA_Init+0x4b2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b80      	cmp	r3, #128	@ 0x80
 8002662:	d102      	bne.n	800266a <HAL_DMA_Init+0x4ae>
 8002664:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002668:	e002      	b.n	8002670 <HAL_DMA_Init+0x4b4>
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_DMA_Init+0x4b4>
 800266e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68d2      	ldr	r2, [r2, #12]
 8002674:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002676:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800267e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002686:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800268e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002696:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800269e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b55      	ldr	r3, [pc, #340]	@ (800280c <HAL_DMA_Init+0x650>)
 80026b6:	4413      	add	r3, r2
 80026b8:	4a55      	ldr	r2, [pc, #340]	@ (8002810 <HAL_DMA_Init+0x654>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f002 fa26 	bl	8004b18 <DMA_CalcBaseAndBitshift>
 80026cc:	4603      	mov	r3, r0
 80026ce:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2201      	movs	r2, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	e008      	b.n	80026f4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2240      	movs	r2, #64	@ 0x40
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2203      	movs	r2, #3
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ed      	b.n	80028d0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a46      	ldr	r2, [pc, #280]	@ (8002814 <HAL_DMA_Init+0x658>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d072      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a45      	ldr	r2, [pc, #276]	@ (8002818 <HAL_DMA_Init+0x65c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d06d      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a43      	ldr	r2, [pc, #268]	@ (800281c <HAL_DMA_Init+0x660>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d068      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a42      	ldr	r2, [pc, #264]	@ (8002820 <HAL_DMA_Init+0x664>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d063      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a40      	ldr	r2, [pc, #256]	@ (8002824 <HAL_DMA_Init+0x668>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d05e      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a3f      	ldr	r2, [pc, #252]	@ (8002828 <HAL_DMA_Init+0x66c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d059      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a3d      	ldr	r2, [pc, #244]	@ (800282c <HAL_DMA_Init+0x670>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d054      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a3c      	ldr	r2, [pc, #240]	@ (8002830 <HAL_DMA_Init+0x674>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d04f      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3a      	ldr	r2, [pc, #232]	@ (8002834 <HAL_DMA_Init+0x678>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d04a      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a39      	ldr	r2, [pc, #228]	@ (8002838 <HAL_DMA_Init+0x67c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d045      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a37      	ldr	r2, [pc, #220]	@ (800283c <HAL_DMA_Init+0x680>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d040      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a36      	ldr	r2, [pc, #216]	@ (8002840 <HAL_DMA_Init+0x684>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d03b      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a34      	ldr	r2, [pc, #208]	@ (8002844 <HAL_DMA_Init+0x688>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d036      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a33      	ldr	r2, [pc, #204]	@ (8002848 <HAL_DMA_Init+0x68c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d031      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a31      	ldr	r2, [pc, #196]	@ (800284c <HAL_DMA_Init+0x690>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d02c      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a30      	ldr	r2, [pc, #192]	@ (8002850 <HAL_DMA_Init+0x694>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d027      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a13      	ldr	r2, [pc, #76]	@ (80027e8 <HAL_DMA_Init+0x62c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d022      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <HAL_DMA_Init+0x630>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d01d      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_DMA_Init+0x634>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d018      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0f      	ldr	r2, [pc, #60]	@ (80027f4 <HAL_DMA_Init+0x638>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <HAL_DMA_Init+0x63c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00e      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <HAL_DMA_Init+0x640>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <HAL_DMA_Init+0x644>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_DMA_Init+0x628>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <HAL_DMA_Init+0x648>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d137      	bne.n	8002854 <HAL_DMA_Init+0x698>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e036      	b.n	8002856 <HAL_DMA_Init+0x69a>
 80027e8:	58025408 	.word	0x58025408
 80027ec:	5802541c 	.word	0x5802541c
 80027f0:	58025430 	.word	0x58025430
 80027f4:	58025444 	.word	0x58025444
 80027f8:	58025458 	.word	0x58025458
 80027fc:	5802546c 	.word	0x5802546c
 8002800:	58025480 	.word	0x58025480
 8002804:	58025494 	.word	0x58025494
 8002808:	fffe000f 	.word	0xfffe000f
 800280c:	a7fdabf8 	.word	0xa7fdabf8
 8002810:	cccccccd 	.word	0xcccccccd
 8002814:	40020010 	.word	0x40020010
 8002818:	40020028 	.word	0x40020028
 800281c:	40020040 	.word	0x40020040
 8002820:	40020058 	.word	0x40020058
 8002824:	40020070 	.word	0x40020070
 8002828:	40020088 	.word	0x40020088
 800282c:	400200a0 	.word	0x400200a0
 8002830:	400200b8 	.word	0x400200b8
 8002834:	40020410 	.word	0x40020410
 8002838:	40020428 	.word	0x40020428
 800283c:	40020440 	.word	0x40020440
 8002840:	40020458 	.word	0x40020458
 8002844:	40020470 	.word	0x40020470
 8002848:	40020488 	.word	0x40020488
 800284c:	400204a0 	.word	0x400204a0
 8002850:	400204b8 	.word	0x400204b8
 8002854:	2300      	movs	r3, #0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d032      	beq.n	80028c0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f002 fa8a 	bl	8004d74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b80      	cmp	r3, #128	@ 0x80
 8002866:	d102      	bne.n	800286e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002882:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d010      	beq.n	80028ae <HAL_DMA_Init+0x6f2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d80c      	bhi.n	80028ae <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f002 fb07 	bl	8004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e008      	b.n	80028c0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e226      	b.n	8002d42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Start_IT+0x2a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e21f      	b.n	8002d42 <HAL_DMA_Start_IT+0x46a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 820a 	bne.w	8002d2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a68      	ldr	r2, [pc, #416]	@ (8002acc <HAL_DMA_Start_IT+0x1f4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d04a      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a66      	ldr	r2, [pc, #408]	@ (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d045      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a65      	ldr	r2, [pc, #404]	@ (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d040      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a63      	ldr	r2, [pc, #396]	@ (8002ad8 <HAL_DMA_Start_IT+0x200>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d03b      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a62      	ldr	r2, [pc, #392]	@ (8002adc <HAL_DMA_Start_IT+0x204>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d036      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a60      	ldr	r2, [pc, #384]	@ (8002ae0 <HAL_DMA_Start_IT+0x208>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5f      	ldr	r2, [pc, #380]	@ (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d02c      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d027      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	@ (8002aec <HAL_DMA_Start_IT+0x214>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5a      	ldr	r2, [pc, #360]	@ (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01d      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a59      	ldr	r2, [pc, #356]	@ (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a57      	ldr	r2, [pc, #348]	@ (8002af8 <HAL_DMA_Start_IT+0x220>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a56      	ldr	r2, [pc, #344]	@ (8002afc <HAL_DMA_Start_IT+0x224>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a54      	ldr	r2, [pc, #336]	@ (8002b00 <HAL_DMA_Start_IT+0x228>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a53      	ldr	r2, [pc, #332]	@ (8002b04 <HAL_DMA_Start_IT+0x22c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a51      	ldr	r2, [pc, #324]	@ (8002b08 <HAL_DMA_Start_IT+0x230>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_Start_IT+0x100>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e007      	b.n	80029e8 <HAL_DMA_Start_IT+0x110>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f001 feae 	bl	8004750 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a34      	ldr	r2, [pc, #208]	@ (8002acc <HAL_DMA_Start_IT+0x1f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04a      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a33      	ldr	r2, [pc, #204]	@ (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d045      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a31      	ldr	r2, [pc, #196]	@ (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d040      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a30      	ldr	r2, [pc, #192]	@ (8002ad8 <HAL_DMA_Start_IT+0x200>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2e      	ldr	r2, [pc, #184]	@ (8002adc <HAL_DMA_Start_IT+0x204>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae0 <HAL_DMA_Start_IT+0x208>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02c      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a28      	ldr	r2, [pc, #160]	@ (8002aec <HAL_DMA_Start_IT+0x214>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a24      	ldr	r2, [pc, #144]	@ (8002af8 <HAL_DMA_Start_IT+0x220>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <HAL_DMA_Start_IT+0x224>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_DMA_Start_IT+0x228>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_DMA_Start_IT+0x22c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b08 <HAL_DMA_Start_IT+0x230>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA_Start_IT+0x1c0>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_Start_IT+0x1c2>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d036      	beq.n	8002b0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 021e 	bic.w	r2, r3, #30
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0216 	orr.w	r2, r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03e      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0208 	orr.w	r2, r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e035      	b.n	8002b38 <HAL_DMA_Start_IT+0x260>
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 020e 	bic.w	r2, r3, #14
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 020a 	orr.w	r2, r2, #10
 8002b1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0204 	orr.w	r2, r2, #4
 8002b36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a83      	ldr	r2, [pc, #524]	@ (8002d4c <HAL_DMA_Start_IT+0x474>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d072      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a82      	ldr	r2, [pc, #520]	@ (8002d50 <HAL_DMA_Start_IT+0x478>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d06d      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a80      	ldr	r2, [pc, #512]	@ (8002d54 <HAL_DMA_Start_IT+0x47c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d068      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7f      	ldr	r2, [pc, #508]	@ (8002d58 <HAL_DMA_Start_IT+0x480>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d063      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7d      	ldr	r2, [pc, #500]	@ (8002d5c <HAL_DMA_Start_IT+0x484>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d05e      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d60 <HAL_DMA_Start_IT+0x488>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d059      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a7a      	ldr	r2, [pc, #488]	@ (8002d64 <HAL_DMA_Start_IT+0x48c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d054      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a79      	ldr	r2, [pc, #484]	@ (8002d68 <HAL_DMA_Start_IT+0x490>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04f      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a77      	ldr	r2, [pc, #476]	@ (8002d6c <HAL_DMA_Start_IT+0x494>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d04a      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a76      	ldr	r2, [pc, #472]	@ (8002d70 <HAL_DMA_Start_IT+0x498>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d045      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a74      	ldr	r2, [pc, #464]	@ (8002d74 <HAL_DMA_Start_IT+0x49c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d040      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a73      	ldr	r2, [pc, #460]	@ (8002d78 <HAL_DMA_Start_IT+0x4a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d03b      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a71      	ldr	r2, [pc, #452]	@ (8002d7c <HAL_DMA_Start_IT+0x4a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d036      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a70      	ldr	r2, [pc, #448]	@ (8002d80 <HAL_DMA_Start_IT+0x4a8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d031      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_DMA_Start_IT+0x4ac>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02c      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	@ (8002d88 <HAL_DMA_Start_IT+0x4b0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d027      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8002d8c <HAL_DMA_Start_IT+0x4b4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d022      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6a      	ldr	r2, [pc, #424]	@ (8002d90 <HAL_DMA_Start_IT+0x4b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d01d      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a68      	ldr	r2, [pc, #416]	@ (8002d94 <HAL_DMA_Start_IT+0x4bc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d018      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a67      	ldr	r2, [pc, #412]	@ (8002d98 <HAL_DMA_Start_IT+0x4c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	@ (8002d9c <HAL_DMA_Start_IT+0x4c4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a64      	ldr	r2, [pc, #400]	@ (8002da0 <HAL_DMA_Start_IT+0x4c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a62      	ldr	r2, [pc, #392]	@ (8002da4 <HAL_DMA_Start_IT+0x4cc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a61      	ldr	r2, [pc, #388]	@ (8002da8 <HAL_DMA_Start_IT+0x4d0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_DMA_Start_IT+0x354>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_DMA_Start_IT+0x356>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01a      	beq.n	8002c68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a37      	ldr	r2, [pc, #220]	@ (8002d4c <HAL_DMA_Start_IT+0x474>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a36      	ldr	r2, [pc, #216]	@ (8002d50 <HAL_DMA_Start_IT+0x478>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a34      	ldr	r2, [pc, #208]	@ (8002d54 <HAL_DMA_Start_IT+0x47c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a33      	ldr	r2, [pc, #204]	@ (8002d58 <HAL_DMA_Start_IT+0x480>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a31      	ldr	r2, [pc, #196]	@ (8002d5c <HAL_DMA_Start_IT+0x484>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <HAL_DMA_Start_IT+0x488>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <HAL_DMA_Start_IT+0x48c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <HAL_DMA_Start_IT+0x490>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d6c <HAL_DMA_Start_IT+0x494>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8002d70 <HAL_DMA_Start_IT+0x498>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a28      	ldr	r2, [pc, #160]	@ (8002d74 <HAL_DMA_Start_IT+0x49c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a27      	ldr	r2, [pc, #156]	@ (8002d78 <HAL_DMA_Start_IT+0x4a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	@ (8002d7c <HAL_DMA_Start_IT+0x4a4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a24      	ldr	r2, [pc, #144]	@ (8002d80 <HAL_DMA_Start_IT+0x4a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_DMA_Start_IT+0x4ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	@ (8002d88 <HAL_DMA_Start_IT+0x4b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d108      	bne.n	8002d1a <HAL_DMA_Start_IT+0x442>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e012      	b.n	8002d40 <HAL_DMA_Start_IT+0x468>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e009      	b.n	8002d40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40020010 	.word	0x40020010
 8002d50:	40020028 	.word	0x40020028
 8002d54:	40020040 	.word	0x40020040
 8002d58:	40020058 	.word	0x40020058
 8002d5c:	40020070 	.word	0x40020070
 8002d60:	40020088 	.word	0x40020088
 8002d64:	400200a0 	.word	0x400200a0
 8002d68:	400200b8 	.word	0x400200b8
 8002d6c:	40020410 	.word	0x40020410
 8002d70:	40020428 	.word	0x40020428
 8002d74:	40020440 	.word	0x40020440
 8002d78:	40020458 	.word	0x40020458
 8002d7c:	40020470 	.word	0x40020470
 8002d80:	40020488 	.word	0x40020488
 8002d84:	400204a0 	.word	0x400204a0
 8002d88:	400204b8 	.word	0x400204b8
 8002d8c:	58025408 	.word	0x58025408
 8002d90:	5802541c 	.word	0x5802541c
 8002d94:	58025430 	.word	0x58025430
 8002d98:	58025444 	.word	0x58025444
 8002d9c:	58025458 	.word	0x58025458
 8002da0:	5802546c 	.word	0x5802546c
 8002da4:	58025480 	.word	0x58025480
 8002da8:	58025494 	.word	0x58025494

08002dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff f84a 	bl	8001e4c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e2dc      	b.n	800337e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d008      	beq.n	8002de2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2280      	movs	r2, #128	@ 0x80
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e2cd      	b.n	800337e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a76      	ldr	r2, [pc, #472]	@ (8002fc0 <HAL_DMA_Abort+0x214>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <HAL_DMA_Abort+0x218>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a73      	ldr	r2, [pc, #460]	@ (8002fc8 <HAL_DMA_Abort+0x21c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a71      	ldr	r2, [pc, #452]	@ (8002fcc <HAL_DMA_Abort+0x220>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a70      	ldr	r2, [pc, #448]	@ (8002fd0 <HAL_DMA_Abort+0x224>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd4 <HAL_DMA_Abort+0x228>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd8 <HAL_DMA_Abort+0x22c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fdc <HAL_DMA_Abort+0x230>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe0 <HAL_DMA_Abort+0x234>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_DMA_Abort+0x238>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a67      	ldr	r2, [pc, #412]	@ (8002fe8 <HAL_DMA_Abort+0x23c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	@ (8002fec <HAL_DMA_Abort+0x240>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a64      	ldr	r2, [pc, #400]	@ (8002ff0 <HAL_DMA_Abort+0x244>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a62      	ldr	r2, [pc, #392]	@ (8002ff4 <HAL_DMA_Abort+0x248>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a61      	ldr	r2, [pc, #388]	@ (8002ff8 <HAL_DMA_Abort+0x24c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8002ffc <HAL_DMA_Abort+0x250>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_DMA_Abort+0xda>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_DMA_Abort+0xdc>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 021e 	bic.w	r2, r2, #30
 8002e9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eaa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e00a      	b.n	8002eca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020e 	bic.w	r2, r2, #14
 8002ec2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc0 <HAL_DMA_Abort+0x214>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d072      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc4 <HAL_DMA_Abort+0x218>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d06d      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a39      	ldr	r2, [pc, #228]	@ (8002fc8 <HAL_DMA_Abort+0x21c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d068      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a37      	ldr	r2, [pc, #220]	@ (8002fcc <HAL_DMA_Abort+0x220>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d063      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	@ (8002fd0 <HAL_DMA_Abort+0x224>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d05e      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <HAL_DMA_Abort+0x228>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d059      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <HAL_DMA_Abort+0x22c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d054      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <HAL_DMA_Abort+0x230>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04f      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a30      	ldr	r2, [pc, #192]	@ (8002fe0 <HAL_DMA_Abort+0x234>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d04a      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe4 <HAL_DMA_Abort+0x238>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d045      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <HAL_DMA_Abort+0x23c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d040      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fec <HAL_DMA_Abort+0x240>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d03b      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <HAL_DMA_Abort+0x244>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d036      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <HAL_DMA_Abort+0x248>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d031      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_DMA_Abort+0x24c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d02c      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_DMA_Abort+0x250>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d027      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <HAL_DMA_Abort+0x254>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d022      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_DMA_Abort+0x258>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <HAL_DMA_Abort+0x25c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_DMA_Abort+0x260>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	@ (8003010 <HAL_DMA_Abort+0x264>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00e      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8003014 <HAL_DMA_Abort+0x268>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <HAL_DMA_Abort+0x26c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	@ (800301c <HAL_DMA_Abort+0x270>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d132      	bne.n	8003020 <HAL_DMA_Abort+0x274>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e031      	b.n	8003022 <HAL_DMA_Abort+0x276>
 8002fbe:	bf00      	nop
 8002fc0:	40020010 	.word	0x40020010
 8002fc4:	40020028 	.word	0x40020028
 8002fc8:	40020040 	.word	0x40020040
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	40020070 	.word	0x40020070
 8002fd4:	40020088 	.word	0x40020088
 8002fd8:	400200a0 	.word	0x400200a0
 8002fdc:	400200b8 	.word	0x400200b8
 8002fe0:	40020410 	.word	0x40020410
 8002fe4:	40020428 	.word	0x40020428
 8002fe8:	40020440 	.word	0x40020440
 8002fec:	40020458 	.word	0x40020458
 8002ff0:	40020470 	.word	0x40020470
 8002ff4:	40020488 	.word	0x40020488
 8002ff8:	400204a0 	.word	0x400204a0
 8002ffc:	400204b8 	.word	0x400204b8
 8003000:	58025408 	.word	0x58025408
 8003004:	5802541c 	.word	0x5802541c
 8003008:	58025430 	.word	0x58025430
 800300c:	58025444 	.word	0x58025444
 8003010:	58025458 	.word	0x58025458
 8003014:	5802546c 	.word	0x5802546c
 8003018:	58025480 	.word	0x58025480
 800301c:	58025494 	.word	0x58025494
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003034:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6d      	ldr	r2, [pc, #436]	@ (80031f0 <HAL_DMA_Abort+0x444>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6b      	ldr	r2, [pc, #428]	@ (80031f4 <HAL_DMA_Abort+0x448>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6a      	ldr	r2, [pc, #424]	@ (80031f8 <HAL_DMA_Abort+0x44c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a68      	ldr	r2, [pc, #416]	@ (80031fc <HAL_DMA_Abort+0x450>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a67      	ldr	r2, [pc, #412]	@ (8003200 <HAL_DMA_Abort+0x454>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a65      	ldr	r2, [pc, #404]	@ (8003204 <HAL_DMA_Abort+0x458>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a64      	ldr	r2, [pc, #400]	@ (8003208 <HAL_DMA_Abort+0x45c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a62      	ldr	r2, [pc, #392]	@ (800320c <HAL_DMA_Abort+0x460>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a61      	ldr	r2, [pc, #388]	@ (8003210 <HAL_DMA_Abort+0x464>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a5f      	ldr	r2, [pc, #380]	@ (8003214 <HAL_DMA_Abort+0x468>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5e      	ldr	r2, [pc, #376]	@ (8003218 <HAL_DMA_Abort+0x46c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5c      	ldr	r2, [pc, #368]	@ (800321c <HAL_DMA_Abort+0x470>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003220 <HAL_DMA_Abort+0x474>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a59      	ldr	r2, [pc, #356]	@ (8003224 <HAL_DMA_Abort+0x478>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a58      	ldr	r2, [pc, #352]	@ (8003228 <HAL_DMA_Abort+0x47c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a56      	ldr	r2, [pc, #344]	@ (800322c <HAL_DMA_Abort+0x480>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d108      	bne.n	80030e8 <HAL_DMA_Abort+0x33c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e007      	b.n	80030f8 <HAL_DMA_Abort+0x34c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030f8:	e013      	b.n	8003122 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030fa:	f7fe fea7 	bl	8001e4c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b05      	cmp	r3, #5
 8003106:	d90c      	bls.n	8003122 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e12d      	b.n	800337e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e5      	bne.n	80030fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2f      	ldr	r2, [pc, #188]	@ (80031f0 <HAL_DMA_Abort+0x444>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d04a      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2d      	ldr	r2, [pc, #180]	@ (80031f4 <HAL_DMA_Abort+0x448>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d045      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <HAL_DMA_Abort+0x44c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d040      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2a      	ldr	r2, [pc, #168]	@ (80031fc <HAL_DMA_Abort+0x450>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d03b      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <HAL_DMA_Abort+0x454>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d036      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a27      	ldr	r2, [pc, #156]	@ (8003204 <HAL_DMA_Abort+0x458>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d031      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a26      	ldr	r2, [pc, #152]	@ (8003208 <HAL_DMA_Abort+0x45c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d02c      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <HAL_DMA_Abort+0x460>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d027      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_DMA_Abort+0x464>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_DMA_Abort+0x468>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01d      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <HAL_DMA_Abort+0x46c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d018      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_DMA_Abort+0x470>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_DMA_Abort+0x474>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003224 <HAL_DMA_Abort+0x478>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1a      	ldr	r2, [pc, #104]	@ (8003228 <HAL_DMA_Abort+0x47c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	@ (800322c <HAL_DMA_Abort+0x480>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Abort+0x426>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_DMA_Abort+0x428>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02b      	beq.n	8003230 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	223f      	movs	r2, #63	@ 0x3f
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	e02a      	b.n	8003246 <HAL_DMA_Abort+0x49a>
 80031f0:	40020010 	.word	0x40020010
 80031f4:	40020028 	.word	0x40020028
 80031f8:	40020040 	.word	0x40020040
 80031fc:	40020058 	.word	0x40020058
 8003200:	40020070 	.word	0x40020070
 8003204:	40020088 	.word	0x40020088
 8003208:	400200a0 	.word	0x400200a0
 800320c:	400200b8 	.word	0x400200b8
 8003210:	40020410 	.word	0x40020410
 8003214:	40020428 	.word	0x40020428
 8003218:	40020440 	.word	0x40020440
 800321c:	40020458 	.word	0x40020458
 8003220:	40020470 	.word	0x40020470
 8003224:	40020488 	.word	0x40020488
 8003228:	400204a0 	.word	0x400204a0
 800322c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2201      	movs	r2, #1
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4f      	ldr	r2, [pc, #316]	@ (8003388 <HAL_DMA_Abort+0x5dc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d072      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4d      	ldr	r2, [pc, #308]	@ (800338c <HAL_DMA_Abort+0x5e0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d06d      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a4c      	ldr	r2, [pc, #304]	@ (8003390 <HAL_DMA_Abort+0x5e4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d068      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a4a      	ldr	r2, [pc, #296]	@ (8003394 <HAL_DMA_Abort+0x5e8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d063      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a49      	ldr	r2, [pc, #292]	@ (8003398 <HAL_DMA_Abort+0x5ec>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d05e      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a47      	ldr	r2, [pc, #284]	@ (800339c <HAL_DMA_Abort+0x5f0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d059      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a46      	ldr	r2, [pc, #280]	@ (80033a0 <HAL_DMA_Abort+0x5f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d054      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a44      	ldr	r2, [pc, #272]	@ (80033a4 <HAL_DMA_Abort+0x5f8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04f      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a43      	ldr	r2, [pc, #268]	@ (80033a8 <HAL_DMA_Abort+0x5fc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a41      	ldr	r2, [pc, #260]	@ (80033ac <HAL_DMA_Abort+0x600>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a40      	ldr	r2, [pc, #256]	@ (80033b0 <HAL_DMA_Abort+0x604>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3e      	ldr	r2, [pc, #248]	@ (80033b4 <HAL_DMA_Abort+0x608>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3d      	ldr	r2, [pc, #244]	@ (80033b8 <HAL_DMA_Abort+0x60c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3b      	ldr	r2, [pc, #236]	@ (80033bc <HAL_DMA_Abort+0x610>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3a      	ldr	r2, [pc, #232]	@ (80033c0 <HAL_DMA_Abort+0x614>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a38      	ldr	r2, [pc, #224]	@ (80033c4 <HAL_DMA_Abort+0x618>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a37      	ldr	r2, [pc, #220]	@ (80033c8 <HAL_DMA_Abort+0x61c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a35      	ldr	r2, [pc, #212]	@ (80033cc <HAL_DMA_Abort+0x620>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a34      	ldr	r2, [pc, #208]	@ (80033d0 <HAL_DMA_Abort+0x624>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a32      	ldr	r2, [pc, #200]	@ (80033d4 <HAL_DMA_Abort+0x628>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a31      	ldr	r2, [pc, #196]	@ (80033d8 <HAL_DMA_Abort+0x62c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2f      	ldr	r2, [pc, #188]	@ (80033dc <HAL_DMA_Abort+0x630>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2e      	ldr	r2, [pc, #184]	@ (80033e0 <HAL_DMA_Abort+0x634>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <HAL_DMA_Abort+0x638>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_DMA_Abort+0x58e>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_DMA_Abort+0x590>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d015      	beq.n	800336c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003348:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003360:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800336a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8
 80033c8:	58025408 	.word	0x58025408
 80033cc:	5802541c 	.word	0x5802541c
 80033d0:	58025430 	.word	0x58025430
 80033d4:	58025444 	.word	0x58025444
 80033d8:	58025458 	.word	0x58025458
 80033dc:	5802546c 	.word	0x5802546c
 80033e0:	58025480 	.word	0x58025480
 80033e4:	58025494 	.word	0x58025494

080033e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e237      	b.n	800386a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d004      	beq.n	8003410 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2280      	movs	r2, #128	@ 0x80
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e22c      	b.n	800386a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5c      	ldr	r2, [pc, #368]	@ (8003588 <HAL_DMA_Abort_IT+0x1a0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d04a      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <HAL_DMA_Abort_IT+0x1a4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d045      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a59      	ldr	r2, [pc, #356]	@ (8003590 <HAL_DMA_Abort_IT+0x1a8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d040      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a58      	ldr	r2, [pc, #352]	@ (8003594 <HAL_DMA_Abort_IT+0x1ac>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d03b      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a56      	ldr	r2, [pc, #344]	@ (8003598 <HAL_DMA_Abort_IT+0x1b0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d036      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a55      	ldr	r2, [pc, #340]	@ (800359c <HAL_DMA_Abort_IT+0x1b4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d031      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a53      	ldr	r2, [pc, #332]	@ (80035a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02c      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a52      	ldr	r2, [pc, #328]	@ (80035a4 <HAL_DMA_Abort_IT+0x1bc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d027      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a50      	ldr	r2, [pc, #320]	@ (80035a8 <HAL_DMA_Abort_IT+0x1c0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a4f      	ldr	r2, [pc, #316]	@ (80035ac <HAL_DMA_Abort_IT+0x1c4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01d      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4d      	ldr	r2, [pc, #308]	@ (80035b0 <HAL_DMA_Abort_IT+0x1c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4c      	ldr	r2, [pc, #304]	@ (80035b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <HAL_DMA_Abort_IT+0x1d0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a49      	ldr	r2, [pc, #292]	@ (80035bc <HAL_DMA_Abort_IT+0x1d4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a47      	ldr	r2, [pc, #284]	@ (80035c0 <HAL_DMA_Abort_IT+0x1d8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a46      	ldr	r2, [pc, #280]	@ (80035c4 <HAL_DMA_Abort_IT+0x1dc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Abort_IT+0xcc>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_Abort_IT+0xce>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8086 	beq.w	80035c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003588 <HAL_DMA_Abort_IT+0x1a0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d04a      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2e      	ldr	r2, [pc, #184]	@ (800358c <HAL_DMA_Abort_IT+0x1a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d045      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <HAL_DMA_Abort_IT+0x1a8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d040      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003594 <HAL_DMA_Abort_IT+0x1ac>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d03b      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a29      	ldr	r2, [pc, #164]	@ (8003598 <HAL_DMA_Abort_IT+0x1b0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d036      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	@ (800359c <HAL_DMA_Abort_IT+0x1b4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d031      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a26      	ldr	r2, [pc, #152]	@ (80035a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d02c      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <HAL_DMA_Abort_IT+0x1bc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d027      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <HAL_DMA_Abort_IT+0x1c0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d022      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a22      	ldr	r2, [pc, #136]	@ (80035ac <HAL_DMA_Abort_IT+0x1c4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d01d      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a20      	ldr	r2, [pc, #128]	@ (80035b0 <HAL_DMA_Abort_IT+0x1c8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d018      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1f      	ldr	r2, [pc, #124]	@ (80035b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1d      	ldr	r2, [pc, #116]	@ (80035b8 <HAL_DMA_Abort_IT+0x1d0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <HAL_DMA_Abort_IT+0x1d4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <HAL_DMA_Abort_IT+0x1d8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a19      	ldr	r2, [pc, #100]	@ (80035c4 <HAL_DMA_Abort_IT+0x1dc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <HAL_DMA_Abort_IT+0x18e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e178      	b.n	8003868 <HAL_DMA_Abort_IT+0x480>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e16f      	b.n	8003868 <HAL_DMA_Abort_IT+0x480>
 8003588:	40020010 	.word	0x40020010
 800358c:	40020028 	.word	0x40020028
 8003590:	40020040 	.word	0x40020040
 8003594:	40020058 	.word	0x40020058
 8003598:	40020070 	.word	0x40020070
 800359c:	40020088 	.word	0x40020088
 80035a0:	400200a0 	.word	0x400200a0
 80035a4:	400200b8 	.word	0x400200b8
 80035a8:	40020410 	.word	0x40020410
 80035ac:	40020428 	.word	0x40020428
 80035b0:	40020440 	.word	0x40020440
 80035b4:	40020458 	.word	0x40020458
 80035b8:	40020470 	.word	0x40020470
 80035bc:	40020488 	.word	0x40020488
 80035c0:	400204a0 	.word	0x400204a0
 80035c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 020e 	bic.w	r2, r2, #14
 80035d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003790 <HAL_DMA_Abort_IT+0x3a8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6b      	ldr	r2, [pc, #428]	@ (8003794 <HAL_DMA_Abort_IT+0x3ac>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a69      	ldr	r2, [pc, #420]	@ (8003798 <HAL_DMA_Abort_IT+0x3b0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a68      	ldr	r2, [pc, #416]	@ (800379c <HAL_DMA_Abort_IT+0x3b4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a66      	ldr	r2, [pc, #408]	@ (80037a0 <HAL_DMA_Abort_IT+0x3b8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a65      	ldr	r2, [pc, #404]	@ (80037a4 <HAL_DMA_Abort_IT+0x3bc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a63      	ldr	r2, [pc, #396]	@ (80037a8 <HAL_DMA_Abort_IT+0x3c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a62      	ldr	r2, [pc, #392]	@ (80037ac <HAL_DMA_Abort_IT+0x3c4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a60      	ldr	r2, [pc, #384]	@ (80037b0 <HAL_DMA_Abort_IT+0x3c8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5f      	ldr	r2, [pc, #380]	@ (80037b4 <HAL_DMA_Abort_IT+0x3cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a5d      	ldr	r2, [pc, #372]	@ (80037b8 <HAL_DMA_Abort_IT+0x3d0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5c      	ldr	r2, [pc, #368]	@ (80037bc <HAL_DMA_Abort_IT+0x3d4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a5a      	ldr	r2, [pc, #360]	@ (80037c0 <HAL_DMA_Abort_IT+0x3d8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a59      	ldr	r2, [pc, #356]	@ (80037c4 <HAL_DMA_Abort_IT+0x3dc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a57      	ldr	r2, [pc, #348]	@ (80037c8 <HAL_DMA_Abort_IT+0x3e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a56      	ldr	r2, [pc, #344]	@ (80037cc <HAL_DMA_Abort_IT+0x3e4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d108      	bne.n	800368a <HAL_DMA_Abort_IT+0x2a2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e007      	b.n	800369a <HAL_DMA_Abort_IT+0x2b2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3c      	ldr	r2, [pc, #240]	@ (8003790 <HAL_DMA_Abort_IT+0x3a8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d072      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003794 <HAL_DMA_Abort_IT+0x3ac>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d06d      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a39      	ldr	r2, [pc, #228]	@ (8003798 <HAL_DMA_Abort_IT+0x3b0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d068      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a37      	ldr	r2, [pc, #220]	@ (800379c <HAL_DMA_Abort_IT+0x3b4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d063      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a36      	ldr	r2, [pc, #216]	@ (80037a0 <HAL_DMA_Abort_IT+0x3b8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d05e      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <HAL_DMA_Abort_IT+0x3bc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d059      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a33      	ldr	r2, [pc, #204]	@ (80037a8 <HAL_DMA_Abort_IT+0x3c0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d054      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a31      	ldr	r2, [pc, #196]	@ (80037ac <HAL_DMA_Abort_IT+0x3c4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d04f      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a30      	ldr	r2, [pc, #192]	@ (80037b0 <HAL_DMA_Abort_IT+0x3c8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04a      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2e      	ldr	r2, [pc, #184]	@ (80037b4 <HAL_DMA_Abort_IT+0x3cc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d045      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2d      	ldr	r2, [pc, #180]	@ (80037b8 <HAL_DMA_Abort_IT+0x3d0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d040      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2b      	ldr	r2, [pc, #172]	@ (80037bc <HAL_DMA_Abort_IT+0x3d4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d03b      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <HAL_DMA_Abort_IT+0x3d8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d036      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a28      	ldr	r2, [pc, #160]	@ (80037c4 <HAL_DMA_Abort_IT+0x3dc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d031      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <HAL_DMA_Abort_IT+0x3e0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d02c      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a25      	ldr	r2, [pc, #148]	@ (80037cc <HAL_DMA_Abort_IT+0x3e4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a24      	ldr	r2, [pc, #144]	@ (80037d0 <HAL_DMA_Abort_IT+0x3e8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a22      	ldr	r2, [pc, #136]	@ (80037d4 <HAL_DMA_Abort_IT+0x3ec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a21      	ldr	r2, [pc, #132]	@ (80037d8 <HAL_DMA_Abort_IT+0x3f0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1f      	ldr	r2, [pc, #124]	@ (80037dc <HAL_DMA_Abort_IT+0x3f4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1e      	ldr	r2, [pc, #120]	@ (80037e0 <HAL_DMA_Abort_IT+0x3f8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <HAL_DMA_Abort_IT+0x3fc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <HAL_DMA_Abort_IT+0x400>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a19      	ldr	r2, [pc, #100]	@ (80037ec <HAL_DMA_Abort_IT+0x404>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d132      	bne.n	80037f0 <HAL_DMA_Abort_IT+0x408>
 800378a:	2301      	movs	r3, #1
 800378c:	e031      	b.n	80037f2 <HAL_DMA_Abort_IT+0x40a>
 800378e:	bf00      	nop
 8003790:	40020010 	.word	0x40020010
 8003794:	40020028 	.word	0x40020028
 8003798:	40020040 	.word	0x40020040
 800379c:	40020058 	.word	0x40020058
 80037a0:	40020070 	.word	0x40020070
 80037a4:	40020088 	.word	0x40020088
 80037a8:	400200a0 	.word	0x400200a0
 80037ac:	400200b8 	.word	0x400200b8
 80037b0:	40020410 	.word	0x40020410
 80037b4:	40020428 	.word	0x40020428
 80037b8:	40020440 	.word	0x40020440
 80037bc:	40020458 	.word	0x40020458
 80037c0:	40020470 	.word	0x40020470
 80037c4:	40020488 	.word	0x40020488
 80037c8:	400204a0 	.word	0x400204a0
 80037cc:	400204b8 	.word	0x400204b8
 80037d0:	58025408 	.word	0x58025408
 80037d4:	5802541c 	.word	0x5802541c
 80037d8:	58025430 	.word	0x58025430
 80037dc:	58025444 	.word	0x58025444
 80037e0:	58025458 	.word	0x58025458
 80037e4:	5802546c 	.word	0x5802546c
 80037e8:	58025480 	.word	0x58025480
 80037ec:	58025494 	.word	0x58025494
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d028      	beq.n	8003848 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003804:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003824:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800383c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003846:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop

08003874 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	@ 0x28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003880:	4b67      	ldr	r3, [pc, #412]	@ (8003a20 <HAL_DMA_IRQHandler+0x1ac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a67      	ldr	r2, [pc, #412]	@ (8003a24 <HAL_DMA_IRQHandler+0x1b0>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003a28 <HAL_DMA_IRQHandler+0x1b4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04a      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a2c <HAL_DMA_IRQHandler+0x1b8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d045      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5c      	ldr	r2, [pc, #368]	@ (8003a30 <HAL_DMA_IRQHandler+0x1bc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d040      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a34 <HAL_DMA_IRQHandler+0x1c0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d03b      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a59      	ldr	r2, [pc, #356]	@ (8003a38 <HAL_DMA_IRQHandler+0x1c4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d036      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a57      	ldr	r2, [pc, #348]	@ (8003a3c <HAL_DMA_IRQHandler+0x1c8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a56      	ldr	r2, [pc, #344]	@ (8003a40 <HAL_DMA_IRQHandler+0x1cc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02c      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a54      	ldr	r2, [pc, #336]	@ (8003a44 <HAL_DMA_IRQHandler+0x1d0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d027      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a53      	ldr	r2, [pc, #332]	@ (8003a48 <HAL_DMA_IRQHandler+0x1d4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a51      	ldr	r2, [pc, #324]	@ (8003a4c <HAL_DMA_IRQHandler+0x1d8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01d      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a50      	ldr	r2, [pc, #320]	@ (8003a50 <HAL_DMA_IRQHandler+0x1dc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4e      	ldr	r2, [pc, #312]	@ (8003a54 <HAL_DMA_IRQHandler+0x1e0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a4d      	ldr	r2, [pc, #308]	@ (8003a58 <HAL_DMA_IRQHandler+0x1e4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a5c <HAL_DMA_IRQHandler+0x1e8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_DMA_IRQHandler+0x1ec>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a48      	ldr	r2, [pc, #288]	@ (8003a64 <HAL_DMA_IRQHandler+0x1f0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_DMA_IRQHandler+0xd6>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_DMA_IRQHandler+0xd8>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 842b 	beq.w	80041a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2208      	movs	r2, #8
 800395c:	409a      	lsls	r2, r3
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80a2 	beq.w	8003aac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a28 <HAL_DMA_IRQHandler+0x1b4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d04a      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2d      	ldr	r2, [pc, #180]	@ (8003a2c <HAL_DMA_IRQHandler+0x1b8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d045      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2b      	ldr	r2, [pc, #172]	@ (8003a30 <HAL_DMA_IRQHandler+0x1bc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d040      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a34 <HAL_DMA_IRQHandler+0x1c0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d03b      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a28      	ldr	r2, [pc, #160]	@ (8003a38 <HAL_DMA_IRQHandler+0x1c4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d036      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a27      	ldr	r2, [pc, #156]	@ (8003a3c <HAL_DMA_IRQHandler+0x1c8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d031      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a25      	ldr	r2, [pc, #148]	@ (8003a40 <HAL_DMA_IRQHandler+0x1cc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02c      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a24      	ldr	r2, [pc, #144]	@ (8003a44 <HAL_DMA_IRQHandler+0x1d0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d027      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a22      	ldr	r2, [pc, #136]	@ (8003a48 <HAL_DMA_IRQHandler+0x1d4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <HAL_DMA_IRQHandler+0x1d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d01d      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <HAL_DMA_IRQHandler+0x1dc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1e      	ldr	r2, [pc, #120]	@ (8003a54 <HAL_DMA_IRQHandler+0x1e0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a58 <HAL_DMA_IRQHandler+0x1e4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1b      	ldr	r2, [pc, #108]	@ (8003a5c <HAL_DMA_IRQHandler+0x1e8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a19      	ldr	r2, [pc, #100]	@ (8003a60 <HAL_DMA_IRQHandler+0x1ec>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <HAL_DMA_IRQHandler+0x1f0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d12f      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x1f4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e02e      	b.n	8003a7c <HAL_DMA_IRQHandler+0x208>
 8003a1e:	bf00      	nop
 8003a20:	24000000 	.word	0x24000000
 8003a24:	1b4e81b5 	.word	0x1b4e81b5
 8003a28:	40020010 	.word	0x40020010
 8003a2c:	40020028 	.word	0x40020028
 8003a30:	40020040 	.word	0x40020040
 8003a34:	40020058 	.word	0x40020058
 8003a38:	40020070 	.word	0x40020070
 8003a3c:	40020088 	.word	0x40020088
 8003a40:	400200a0 	.word	0x400200a0
 8003a44:	400200b8 	.word	0x400200b8
 8003a48:	40020410 	.word	0x40020410
 8003a4c:	40020428 	.word	0x40020428
 8003a50:	40020440 	.word	0x40020440
 8003a54:	40020458 	.word	0x40020458
 8003a58:	40020470 	.word	0x40020470
 8003a5c:	40020488 	.word	0x40020488
 8003a60:	400204a0 	.word	0x400204a0
 8003a64:	400204b8 	.word	0x400204b8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2208      	movs	r2, #8
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d06e      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a69      	ldr	r2, [pc, #420]	@ (8003c6c <HAL_DMA_IRQHandler+0x3f8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a67      	ldr	r2, [pc, #412]	@ (8003c70 <HAL_DMA_IRQHandler+0x3fc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a66      	ldr	r2, [pc, #408]	@ (8003c74 <HAL_DMA_IRQHandler+0x400>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a64      	ldr	r2, [pc, #400]	@ (8003c78 <HAL_DMA_IRQHandler+0x404>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a63      	ldr	r2, [pc, #396]	@ (8003c7c <HAL_DMA_IRQHandler+0x408>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a61      	ldr	r2, [pc, #388]	@ (8003c80 <HAL_DMA_IRQHandler+0x40c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a60      	ldr	r2, [pc, #384]	@ (8003c84 <HAL_DMA_IRQHandler+0x410>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c88 <HAL_DMA_IRQHandler+0x414>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5d      	ldr	r2, [pc, #372]	@ (8003c8c <HAL_DMA_IRQHandler+0x418>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5b      	ldr	r2, [pc, #364]	@ (8003c90 <HAL_DMA_IRQHandler+0x41c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003c94 <HAL_DMA_IRQHandler+0x420>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a58      	ldr	r2, [pc, #352]	@ (8003c98 <HAL_DMA_IRQHandler+0x424>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a57      	ldr	r2, [pc, #348]	@ (8003c9c <HAL_DMA_IRQHandler+0x428>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a55      	ldr	r2, [pc, #340]	@ (8003ca0 <HAL_DMA_IRQHandler+0x42c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a54      	ldr	r2, [pc, #336]	@ (8003ca4 <HAL_DMA_IRQHandler+0x430>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a52      	ldr	r2, [pc, #328]	@ (8003ca8 <HAL_DMA_IRQHandler+0x434>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10a      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x304>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e003      	b.n	8003b80 <HAL_DMA_IRQHandler+0x30c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b98:	f043 0202 	orr.w	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2204      	movs	r2, #4
 8003baa:	409a      	lsls	r2, r3
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 808f 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <HAL_DMA_IRQHandler+0x3f8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04a      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c70 <HAL_DMA_IRQHandler+0x3fc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d045      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <HAL_DMA_IRQHandler+0x400>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d040      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	@ (8003c78 <HAL_DMA_IRQHandler+0x404>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d03b      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a26      	ldr	r2, [pc, #152]	@ (8003c7c <HAL_DMA_IRQHandler+0x408>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d036      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a24      	ldr	r2, [pc, #144]	@ (8003c80 <HAL_DMA_IRQHandler+0x40c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d031      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a23      	ldr	r2, [pc, #140]	@ (8003c84 <HAL_DMA_IRQHandler+0x410>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d02c      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a21      	ldr	r2, [pc, #132]	@ (8003c88 <HAL_DMA_IRQHandler+0x414>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d027      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a20      	ldr	r2, [pc, #128]	@ (8003c8c <HAL_DMA_IRQHandler+0x418>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <HAL_DMA_IRQHandler+0x41c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01d      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <HAL_DMA_IRQHandler+0x420>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1b      	ldr	r2, [pc, #108]	@ (8003c98 <HAL_DMA_IRQHandler+0x424>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <HAL_DMA_IRQHandler+0x428>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ca0 <HAL_DMA_IRQHandler+0x42c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <HAL_DMA_IRQHandler+0x430>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <HAL_DMA_IRQHandler+0x434>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d12a      	bne.n	8003cac <HAL_DMA_IRQHandler+0x438>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e023      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x440>
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f043 0204 	orr.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2210      	movs	r2, #16
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a6 	beq.w	8003e36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a85      	ldr	r2, [pc, #532]	@ (8003f04 <HAL_DMA_IRQHandler+0x690>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a83      	ldr	r2, [pc, #524]	@ (8003f08 <HAL_DMA_IRQHandler+0x694>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a82      	ldr	r2, [pc, #520]	@ (8003f0c <HAL_DMA_IRQHandler+0x698>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a80      	ldr	r2, [pc, #512]	@ (8003f10 <HAL_DMA_IRQHandler+0x69c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a7f      	ldr	r2, [pc, #508]	@ (8003f14 <HAL_DMA_IRQHandler+0x6a0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7d      	ldr	r2, [pc, #500]	@ (8003f18 <HAL_DMA_IRQHandler+0x6a4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f1c <HAL_DMA_IRQHandler+0x6a8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7a      	ldr	r2, [pc, #488]	@ (8003f20 <HAL_DMA_IRQHandler+0x6ac>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a79      	ldr	r2, [pc, #484]	@ (8003f24 <HAL_DMA_IRQHandler+0x6b0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a77      	ldr	r2, [pc, #476]	@ (8003f28 <HAL_DMA_IRQHandler+0x6b4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a76      	ldr	r2, [pc, #472]	@ (8003f2c <HAL_DMA_IRQHandler+0x6b8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a74      	ldr	r2, [pc, #464]	@ (8003f30 <HAL_DMA_IRQHandler+0x6bc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a73      	ldr	r2, [pc, #460]	@ (8003f34 <HAL_DMA_IRQHandler+0x6c0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a71      	ldr	r2, [pc, #452]	@ (8003f38 <HAL_DMA_IRQHandler+0x6c4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a70      	ldr	r2, [pc, #448]	@ (8003f3c <HAL_DMA_IRQHandler+0x6c8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <HAL_DMA_IRQHandler+0x6cc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10a      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x52c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e009      	b.n	8003db4 <HAL_DMA_IRQHandler+0x540>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d03e      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d018      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d024      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e01f      	b.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01b      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	e016      	b.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d107      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0208 	bic.w	r2, r2, #8
 8003e24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2220      	movs	r2, #32
 8003e40:	409a      	lsls	r2, r3
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8110 	beq.w	800406c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2c      	ldr	r2, [pc, #176]	@ (8003f04 <HAL_DMA_IRQHandler+0x690>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f08 <HAL_DMA_IRQHandler+0x694>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d045      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a29      	ldr	r2, [pc, #164]	@ (8003f0c <HAL_DMA_IRQHandler+0x698>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d040      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <HAL_DMA_IRQHandler+0x69c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d03b      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_DMA_IRQHandler+0x6a0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d036      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a25      	ldr	r2, [pc, #148]	@ (8003f18 <HAL_DMA_IRQHandler+0x6a4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	@ (8003f1c <HAL_DMA_IRQHandler+0x6a8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d02c      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_DMA_IRQHandler+0x6ac>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d027      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a20      	ldr	r2, [pc, #128]	@ (8003f24 <HAL_DMA_IRQHandler+0x6b0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <HAL_DMA_IRQHandler+0x6b4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f2c <HAL_DMA_IRQHandler+0x6b8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <HAL_DMA_IRQHandler+0x6bc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f34 <HAL_DMA_IRQHandler+0x6c0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <HAL_DMA_IRQHandler+0x6c4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <HAL_DMA_IRQHandler+0x6c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	@ (8003f40 <HAL_DMA_IRQHandler+0x6cc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d12b      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x6d0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e02a      	b.n	8003f58 <HAL_DMA_IRQHandler+0x6e4>
 8003f02:	bf00      	nop
 8003f04:	40020010 	.word	0x40020010
 8003f08:	40020028 	.word	0x40020028
 8003f0c:	40020040 	.word	0x40020040
 8003f10:	40020058 	.word	0x40020058
 8003f14:	40020070 	.word	0x40020070
 8003f18:	40020088 	.word	0x40020088
 8003f1c:	400200a0 	.word	0x400200a0
 8003f20:	400200b8 	.word	0x400200b8
 8003f24:	40020410 	.word	0x40020410
 8003f28:	40020428 	.word	0x40020428
 8003f2c:	40020440 	.word	0x40020440
 8003f30:	40020458 	.word	0x40020458
 8003f34:	40020470 	.word	0x40020470
 8003f38:	40020488 	.word	0x40020488
 8003f3c:	400204a0 	.word	0x400204a0
 8003f40:	400204b8 	.word	0x400204b8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8087 	beq.w	800406c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2220      	movs	r2, #32
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d139      	bne.n	8003fee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0216 	bic.w	r2, r2, #22
 8003f88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <HAL_DMA_IRQHandler+0x736>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0208 	bic.w	r2, r2, #8
 8003fb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	223f      	movs	r2, #63	@ 0x3f
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8382 	beq.w	80046e8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
          }
          return;
 8003fec:	e37c      	b.n	80046e8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d108      	bne.n	800401c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	2b00      	cmp	r3, #0
 8004010:	d02c      	beq.n	800406c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
 800401a:	e027      	b.n	800406c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d023      	beq.n	800406c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
 800402c:	e01e      	b.n	800406c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10f      	bne.n	800405c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0210 	bic.w	r2, r2, #16
 800404a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 833e 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8088 	beq.w	8004194 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2204      	movs	r2, #4
 8004088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a89      	ldr	r2, [pc, #548]	@ (80042b8 <HAL_DMA_IRQHandler+0xa44>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d04a      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a88      	ldr	r2, [pc, #544]	@ (80042bc <HAL_DMA_IRQHandler+0xa48>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d045      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a86      	ldr	r2, [pc, #536]	@ (80042c0 <HAL_DMA_IRQHandler+0xa4c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d040      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a85      	ldr	r2, [pc, #532]	@ (80042c4 <HAL_DMA_IRQHandler+0xa50>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d03b      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a83      	ldr	r2, [pc, #524]	@ (80042c8 <HAL_DMA_IRQHandler+0xa54>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d036      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a82      	ldr	r2, [pc, #520]	@ (80042cc <HAL_DMA_IRQHandler+0xa58>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d031      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a80      	ldr	r2, [pc, #512]	@ (80042d0 <HAL_DMA_IRQHandler+0xa5c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d02c      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	@ (80042d4 <HAL_DMA_IRQHandler+0xa60>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d027      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7d      	ldr	r2, [pc, #500]	@ (80042d8 <HAL_DMA_IRQHandler+0xa64>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d022      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7c      	ldr	r2, [pc, #496]	@ (80042dc <HAL_DMA_IRQHandler+0xa68>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d01d      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7a      	ldr	r2, [pc, #488]	@ (80042e0 <HAL_DMA_IRQHandler+0xa6c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a79      	ldr	r2, [pc, #484]	@ (80042e4 <HAL_DMA_IRQHandler+0xa70>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a77      	ldr	r2, [pc, #476]	@ (80042e8 <HAL_DMA_IRQHandler+0xa74>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a76      	ldr	r2, [pc, #472]	@ (80042ec <HAL_DMA_IRQHandler+0xa78>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a74      	ldr	r2, [pc, #464]	@ (80042f0 <HAL_DMA_IRQHandler+0xa7c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a73      	ldr	r2, [pc, #460]	@ (80042f4 <HAL_DMA_IRQHandler+0xa80>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <HAL_DMA_IRQHandler+0x8ca>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e007      	b.n	800414e <HAL_DMA_IRQHandler+0x8da>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3301      	adds	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	429a      	cmp	r2, r3
 8004158:	d307      	bcc.n	800416a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f2      	bne.n	800414e <HAL_DMA_IRQHandler+0x8da>
 8004168:	e000      	b.n	800416c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800416a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004182:	e003      	b.n	800418c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 82aa 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
 80041a6:	e2a4      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a52      	ldr	r2, [pc, #328]	@ (80042f8 <HAL_DMA_IRQHandler+0xa84>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d04a      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a51      	ldr	r2, [pc, #324]	@ (80042fc <HAL_DMA_IRQHandler+0xa88>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d045      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004300 <HAL_DMA_IRQHandler+0xa8c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d040      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004304 <HAL_DMA_IRQHandler+0xa90>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d03b      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004308 <HAL_DMA_IRQHandler+0xa94>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d036      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a4b      	ldr	r2, [pc, #300]	@ (800430c <HAL_DMA_IRQHandler+0xa98>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d031      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a49      	ldr	r2, [pc, #292]	@ (8004310 <HAL_DMA_IRQHandler+0xa9c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d02c      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a48      	ldr	r2, [pc, #288]	@ (8004314 <HAL_DMA_IRQHandler+0xaa0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d027      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a46      	ldr	r2, [pc, #280]	@ (8004318 <HAL_DMA_IRQHandler+0xaa4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d022      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a45      	ldr	r2, [pc, #276]	@ (800431c <HAL_DMA_IRQHandler+0xaa8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01d      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a43      	ldr	r2, [pc, #268]	@ (8004320 <HAL_DMA_IRQHandler+0xaac>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a42      	ldr	r2, [pc, #264]	@ (8004324 <HAL_DMA_IRQHandler+0xab0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a40      	ldr	r2, [pc, #256]	@ (8004328 <HAL_DMA_IRQHandler+0xab4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a3f      	ldr	r2, [pc, #252]	@ (800432c <HAL_DMA_IRQHandler+0xab8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3d      	ldr	r2, [pc, #244]	@ (8004330 <HAL_DMA_IRQHandler+0xabc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_DMA_IRQHandler+0x9d4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3c      	ldr	r2, [pc, #240]	@ (8004334 <HAL_DMA_IRQHandler+0xac0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <HAL_DMA_IRQHandler+0x9d8>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_DMA_IRQHandler+0x9da>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 824f 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80dd 	beq.w	800442c <HAL_DMA_IRQHandler+0xbb8>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80d7 	beq.w	800442c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2204      	movs	r2, #4
 8004288:	409a      	lsls	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d059      	beq.n	800434c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d14a      	bne.n	8004338 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8220 	beq.w	80046ec <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b4:	e21a      	b.n	80046ec <HAL_DMA_IRQHandler+0xe78>
 80042b6:	bf00      	nop
 80042b8:	40020010 	.word	0x40020010
 80042bc:	40020028 	.word	0x40020028
 80042c0:	40020040 	.word	0x40020040
 80042c4:	40020058 	.word	0x40020058
 80042c8:	40020070 	.word	0x40020070
 80042cc:	40020088 	.word	0x40020088
 80042d0:	400200a0 	.word	0x400200a0
 80042d4:	400200b8 	.word	0x400200b8
 80042d8:	40020410 	.word	0x40020410
 80042dc:	40020428 	.word	0x40020428
 80042e0:	40020440 	.word	0x40020440
 80042e4:	40020458 	.word	0x40020458
 80042e8:	40020470 	.word	0x40020470
 80042ec:	40020488 	.word	0x40020488
 80042f0:	400204a0 	.word	0x400204a0
 80042f4:	400204b8 	.word	0x400204b8
 80042f8:	48022c08 	.word	0x48022c08
 80042fc:	48022c1c 	.word	0x48022c1c
 8004300:	48022c30 	.word	0x48022c30
 8004304:	48022c44 	.word	0x48022c44
 8004308:	48022c58 	.word	0x48022c58
 800430c:	48022c6c 	.word	0x48022c6c
 8004310:	48022c80 	.word	0x48022c80
 8004314:	48022c94 	.word	0x48022c94
 8004318:	58025408 	.word	0x58025408
 800431c:	5802541c 	.word	0x5802541c
 8004320:	58025430 	.word	0x58025430
 8004324:	58025444 	.word	0x58025444
 8004328:	58025458 	.word	0x58025458
 800432c:	5802546c 	.word	0x5802546c
 8004330:	58025480 	.word	0x58025480
 8004334:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 81d5 	beq.w	80046ec <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800434a:	e1cf      	b.n	80046ec <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d160      	bne.n	8004418 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7f      	ldr	r2, [pc, #508]	@ (8004558 <HAL_DMA_IRQHandler+0xce4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d04a      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a7d      	ldr	r2, [pc, #500]	@ (800455c <HAL_DMA_IRQHandler+0xce8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d045      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7c      	ldr	r2, [pc, #496]	@ (8004560 <HAL_DMA_IRQHandler+0xcec>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d040      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a7a      	ldr	r2, [pc, #488]	@ (8004564 <HAL_DMA_IRQHandler+0xcf0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d03b      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a79      	ldr	r2, [pc, #484]	@ (8004568 <HAL_DMA_IRQHandler+0xcf4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d036      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a77      	ldr	r2, [pc, #476]	@ (800456c <HAL_DMA_IRQHandler+0xcf8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d031      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a76      	ldr	r2, [pc, #472]	@ (8004570 <HAL_DMA_IRQHandler+0xcfc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d02c      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a74      	ldr	r2, [pc, #464]	@ (8004574 <HAL_DMA_IRQHandler+0xd00>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d027      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a73      	ldr	r2, [pc, #460]	@ (8004578 <HAL_DMA_IRQHandler+0xd04>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d022      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a71      	ldr	r2, [pc, #452]	@ (800457c <HAL_DMA_IRQHandler+0xd08>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01d      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a70      	ldr	r2, [pc, #448]	@ (8004580 <HAL_DMA_IRQHandler+0xd0c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004584 <HAL_DMA_IRQHandler+0xd10>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004588 <HAL_DMA_IRQHandler+0xd14>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6b      	ldr	r2, [pc, #428]	@ (800458c <HAL_DMA_IRQHandler+0xd18>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004590 <HAL_DMA_IRQHandler+0xd1c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xb82>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a68      	ldr	r2, [pc, #416]	@ (8004594 <HAL_DMA_IRQHandler+0xd20>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <HAL_DMA_IRQHandler+0xb94>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0208 	bic.w	r2, r2, #8
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e007      	b.n	8004418 <HAL_DMA_IRQHandler+0xba4>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0204 	bic.w	r2, r2, #4
 8004416:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8165 	beq.w	80046ec <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800442a:	e15f      	b.n	80046ec <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2202      	movs	r2, #2
 8004436:	409a      	lsls	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80c5 	beq.w	80045cc <HAL_DMA_IRQHandler+0xd58>
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80bf 	beq.w	80045cc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	2202      	movs	r2, #2
 8004458:	409a      	lsls	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d018      	beq.n	800449a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 813a 	beq.w	80046f0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004484:	e134      	b.n	80046f0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8130 	beq.w	80046f0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004498:	e12a      	b.n	80046f0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 8089 	bne.w	80045b8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004558 <HAL_DMA_IRQHandler+0xce4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d04a      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a29      	ldr	r2, [pc, #164]	@ (800455c <HAL_DMA_IRQHandler+0xce8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d045      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a28      	ldr	r2, [pc, #160]	@ (8004560 <HAL_DMA_IRQHandler+0xcec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d040      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a26      	ldr	r2, [pc, #152]	@ (8004564 <HAL_DMA_IRQHandler+0xcf0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a25      	ldr	r2, [pc, #148]	@ (8004568 <HAL_DMA_IRQHandler+0xcf4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d036      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a23      	ldr	r2, [pc, #140]	@ (800456c <HAL_DMA_IRQHandler+0xcf8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d031      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <HAL_DMA_IRQHandler+0xcfc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d02c      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a20      	ldr	r2, [pc, #128]	@ (8004574 <HAL_DMA_IRQHandler+0xd00>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d027      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004578 <HAL_DMA_IRQHandler+0xd04>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <HAL_DMA_IRQHandler+0xd08>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_DMA_IRQHandler+0xd0c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1a      	ldr	r2, [pc, #104]	@ (8004584 <HAL_DMA_IRQHandler+0xd10>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_DMA_IRQHandler+0xd14>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a17      	ldr	r2, [pc, #92]	@ (800458c <HAL_DMA_IRQHandler+0xd18>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_DMA_IRQHandler+0xd1c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_DMA_IRQHandler+0xcd2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <HAL_DMA_IRQHandler+0xd20>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d128      	bne.n	8004598 <HAL_DMA_IRQHandler+0xd24>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0214 	bic.w	r2, r2, #20
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e027      	b.n	80045a8 <HAL_DMA_IRQHandler+0xd34>
 8004558:	40020010 	.word	0x40020010
 800455c:	40020028 	.word	0x40020028
 8004560:	40020040 	.word	0x40020040
 8004564:	40020058 	.word	0x40020058
 8004568:	40020070 	.word	0x40020070
 800456c:	40020088 	.word	0x40020088
 8004570:	400200a0 	.word	0x400200a0
 8004574:	400200b8 	.word	0x400200b8
 8004578:	40020410 	.word	0x40020410
 800457c:	40020428 	.word	0x40020428
 8004580:	40020440 	.word	0x40020440
 8004584:	40020458 	.word	0x40020458
 8004588:	40020470 	.word	0x40020470
 800458c:	40020488 	.word	0x40020488
 8004590:	400204a0 	.word	0x400204a0
 8004594:	400204b8 	.word	0x400204b8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 020a 	bic.w	r2, r2, #10
 80045a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8097 	beq.w	80046f0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ca:	e091      	b.n	80046f0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2208      	movs	r2, #8
 80045d6:	409a      	lsls	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8088 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe7e>
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8082 	beq.w	80046f2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a41      	ldr	r2, [pc, #260]	@ (80046f8 <HAL_DMA_IRQHandler+0xe84>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d04a      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3f      	ldr	r2, [pc, #252]	@ (80046fc <HAL_DMA_IRQHandler+0xe88>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d045      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3e      	ldr	r2, [pc, #248]	@ (8004700 <HAL_DMA_IRQHandler+0xe8c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d040      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3c      	ldr	r2, [pc, #240]	@ (8004704 <HAL_DMA_IRQHandler+0xe90>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d03b      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3b      	ldr	r2, [pc, #236]	@ (8004708 <HAL_DMA_IRQHandler+0xe94>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d036      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a39      	ldr	r2, [pc, #228]	@ (800470c <HAL_DMA_IRQHandler+0xe98>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d031      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a38      	ldr	r2, [pc, #224]	@ (8004710 <HAL_DMA_IRQHandler+0xe9c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d02c      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a36      	ldr	r2, [pc, #216]	@ (8004714 <HAL_DMA_IRQHandler+0xea0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d027      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a35      	ldr	r2, [pc, #212]	@ (8004718 <HAL_DMA_IRQHandler+0xea4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d022      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a33      	ldr	r2, [pc, #204]	@ (800471c <HAL_DMA_IRQHandler+0xea8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01d      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a32      	ldr	r2, [pc, #200]	@ (8004720 <HAL_DMA_IRQHandler+0xeac>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a30      	ldr	r2, [pc, #192]	@ (8004724 <HAL_DMA_IRQHandler+0xeb0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2f      	ldr	r2, [pc, #188]	@ (8004728 <HAL_DMA_IRQHandler+0xeb4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2d      	ldr	r2, [pc, #180]	@ (800472c <HAL_DMA_IRQHandler+0xeb8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2c      	ldr	r2, [pc, #176]	@ (8004730 <HAL_DMA_IRQHandler+0xebc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_DMA_IRQHandler+0xe1a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2a      	ldr	r2, [pc, #168]	@ (8004734 <HAL_DMA_IRQHandler+0xec0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d108      	bne.n	80046a0 <HAL_DMA_IRQHandler+0xe2c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 021c 	bic.w	r2, r2, #28
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e007      	b.n	80046b0 <HAL_DMA_IRQHandler+0xe3c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 020e 	bic.w	r2, r2, #14
 80046ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2201      	movs	r2, #1
 80046ba:	409a      	lsls	r2, r3
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
 80046e6:	e004      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046f2:	3728      	adds	r7, #40	@ 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40020010 	.word	0x40020010
 80046fc:	40020028 	.word	0x40020028
 8004700:	40020040 	.word	0x40020040
 8004704:	40020058 	.word	0x40020058
 8004708:	40020070 	.word	0x40020070
 800470c:	40020088 	.word	0x40020088
 8004710:	400200a0 	.word	0x400200a0
 8004714:	400200b8 	.word	0x400200b8
 8004718:	40020410 	.word	0x40020410
 800471c:	40020428 	.word	0x40020428
 8004720:	40020440 	.word	0x40020440
 8004724:	40020458 	.word	0x40020458
 8004728:	40020470 	.word	0x40020470
 800472c:	40020488 	.word	0x40020488
 8004730:	400204a0 	.word	0x400204a0
 8004734:	400204b8 	.word	0x400204b8

08004738 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004762:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004768:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7f      	ldr	r2, [pc, #508]	@ (800496c <DMA_SetConfig+0x21c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d072      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a7d      	ldr	r2, [pc, #500]	@ (8004970 <DMA_SetConfig+0x220>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d06d      	beq.n	800485a <DMA_SetConfig+0x10a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7c      	ldr	r2, [pc, #496]	@ (8004974 <DMA_SetConfig+0x224>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d068      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7a      	ldr	r2, [pc, #488]	@ (8004978 <DMA_SetConfig+0x228>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d063      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a79      	ldr	r2, [pc, #484]	@ (800497c <DMA_SetConfig+0x22c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d05e      	beq.n	800485a <DMA_SetConfig+0x10a>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a77      	ldr	r2, [pc, #476]	@ (8004980 <DMA_SetConfig+0x230>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d059      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a76      	ldr	r2, [pc, #472]	@ (8004984 <DMA_SetConfig+0x234>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d054      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a74      	ldr	r2, [pc, #464]	@ (8004988 <DMA_SetConfig+0x238>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d04f      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a73      	ldr	r2, [pc, #460]	@ (800498c <DMA_SetConfig+0x23c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d04a      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a71      	ldr	r2, [pc, #452]	@ (8004990 <DMA_SetConfig+0x240>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d045      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a70      	ldr	r2, [pc, #448]	@ (8004994 <DMA_SetConfig+0x244>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d040      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004998 <DMA_SetConfig+0x248>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d03b      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6d      	ldr	r2, [pc, #436]	@ (800499c <DMA_SetConfig+0x24c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d036      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6b      	ldr	r2, [pc, #428]	@ (80049a0 <DMA_SetConfig+0x250>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d031      	beq.n	800485a <DMA_SetConfig+0x10a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6a      	ldr	r2, [pc, #424]	@ (80049a4 <DMA_SetConfig+0x254>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d02c      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a68      	ldr	r2, [pc, #416]	@ (80049a8 <DMA_SetConfig+0x258>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d027      	beq.n	800485a <DMA_SetConfig+0x10a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a67      	ldr	r2, [pc, #412]	@ (80049ac <DMA_SetConfig+0x25c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d022      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a65      	ldr	r2, [pc, #404]	@ (80049b0 <DMA_SetConfig+0x260>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01d      	beq.n	800485a <DMA_SetConfig+0x10a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a64      	ldr	r2, [pc, #400]	@ (80049b4 <DMA_SetConfig+0x264>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a62      	ldr	r2, [pc, #392]	@ (80049b8 <DMA_SetConfig+0x268>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a61      	ldr	r2, [pc, #388]	@ (80049bc <DMA_SetConfig+0x26c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <DMA_SetConfig+0x10a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a5f      	ldr	r2, [pc, #380]	@ (80049c0 <DMA_SetConfig+0x270>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a5e      	ldr	r2, [pc, #376]	@ (80049c4 <DMA_SetConfig+0x274>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5c      	ldr	r2, [pc, #368]	@ (80049c8 <DMA_SetConfig+0x278>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <DMA_SetConfig+0x10e>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <DMA_SetConfig+0x110>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800486c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d004      	beq.n	8004880 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800487e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a39      	ldr	r2, [pc, #228]	@ (800496c <DMA_SetConfig+0x21c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d04a      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a38      	ldr	r2, [pc, #224]	@ (8004970 <DMA_SetConfig+0x220>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d045      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a36      	ldr	r2, [pc, #216]	@ (8004974 <DMA_SetConfig+0x224>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d040      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a35      	ldr	r2, [pc, #212]	@ (8004978 <DMA_SetConfig+0x228>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d03b      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a33      	ldr	r2, [pc, #204]	@ (800497c <DMA_SetConfig+0x22c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d036      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a32      	ldr	r2, [pc, #200]	@ (8004980 <DMA_SetConfig+0x230>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d031      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	@ (8004984 <DMA_SetConfig+0x234>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02c      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004988 <DMA_SetConfig+0x238>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d027      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2d      	ldr	r2, [pc, #180]	@ (800498c <DMA_SetConfig+0x23c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d022      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2c      	ldr	r2, [pc, #176]	@ (8004990 <DMA_SetConfig+0x240>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d01d      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004994 <DMA_SetConfig+0x244>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d018      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a29      	ldr	r2, [pc, #164]	@ (8004998 <DMA_SetConfig+0x248>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a27      	ldr	r2, [pc, #156]	@ (800499c <DMA_SetConfig+0x24c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a26      	ldr	r2, [pc, #152]	@ (80049a0 <DMA_SetConfig+0x250>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a24      	ldr	r2, [pc, #144]	@ (80049a4 <DMA_SetConfig+0x254>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <DMA_SetConfig+0x1d0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <DMA_SetConfig+0x258>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <DMA_SetConfig+0x1d4>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <DMA_SetConfig+0x1d6>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d059      	beq.n	80049de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	223f      	movs	r2, #63	@ 0x3f
 8004934:	409a      	lsls	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004948:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d138      	bne.n	80049cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800496a:	e0ae      	b.n	8004aca <DMA_SetConfig+0x37a>
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
 80049ac:	58025408 	.word	0x58025408
 80049b0:	5802541c 	.word	0x5802541c
 80049b4:	58025430 	.word	0x58025430
 80049b8:	58025444 	.word	0x58025444
 80049bc:	58025458 	.word	0x58025458
 80049c0:	5802546c 	.word	0x5802546c
 80049c4:	58025480 	.word	0x58025480
 80049c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	60da      	str	r2, [r3, #12]
}
 80049dc:	e075      	b.n	8004aca <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ad8 <DMA_SetConfig+0x388>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d04a      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a3b      	ldr	r2, [pc, #236]	@ (8004adc <DMA_SetConfig+0x38c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d045      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ae0 <DMA_SetConfig+0x390>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d040      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a38      	ldr	r2, [pc, #224]	@ (8004ae4 <DMA_SetConfig+0x394>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d03b      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a37      	ldr	r2, [pc, #220]	@ (8004ae8 <DMA_SetConfig+0x398>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d036      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a35      	ldr	r2, [pc, #212]	@ (8004aec <DMA_SetConfig+0x39c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d031      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a34      	ldr	r2, [pc, #208]	@ (8004af0 <DMA_SetConfig+0x3a0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d02c      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a32      	ldr	r2, [pc, #200]	@ (8004af4 <DMA_SetConfig+0x3a4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d027      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a31      	ldr	r2, [pc, #196]	@ (8004af8 <DMA_SetConfig+0x3a8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d022      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004afc <DMA_SetConfig+0x3ac>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01d      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2e      	ldr	r2, [pc, #184]	@ (8004b00 <DMA_SetConfig+0x3b0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d018      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <DMA_SetConfig+0x3b4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004b08 <DMA_SetConfig+0x3b8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a29      	ldr	r2, [pc, #164]	@ (8004b0c <DMA_SetConfig+0x3bc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a28      	ldr	r2, [pc, #160]	@ (8004b10 <DMA_SetConfig+0x3c0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <DMA_SetConfig+0x32e>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a26      	ldr	r2, [pc, #152]	@ (8004b14 <DMA_SetConfig+0x3c4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d101      	bne.n	8004a82 <DMA_SetConfig+0x332>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <DMA_SetConfig+0x334>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b40      	cmp	r3, #64	@ 0x40
 8004aa6:	d108      	bne.n	8004aba <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	60da      	str	r2, [r3, #12]
}
 8004ab8:	e007      	b.n	8004aca <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	60da      	str	r2, [r3, #12]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	48022c08 	.word	0x48022c08
 8004adc:	48022c1c 	.word	0x48022c1c
 8004ae0:	48022c30 	.word	0x48022c30
 8004ae4:	48022c44 	.word	0x48022c44
 8004ae8:	48022c58 	.word	0x48022c58
 8004aec:	48022c6c 	.word	0x48022c6c
 8004af0:	48022c80 	.word	0x48022c80
 8004af4:	48022c94 	.word	0x48022c94
 8004af8:	58025408 	.word	0x58025408
 8004afc:	5802541c 	.word	0x5802541c
 8004b00:	58025430 	.word	0x58025430
 8004b04:	58025444 	.word	0x58025444
 8004b08:	58025458 	.word	0x58025458
 8004b0c:	5802546c 	.word	0x5802546c
 8004b10:	58025480 	.word	0x58025480
 8004b14:	58025494 	.word	0x58025494

08004b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a42      	ldr	r2, [pc, #264]	@ (8004c30 <DMA_CalcBaseAndBitshift+0x118>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d04a      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a41      	ldr	r2, [pc, #260]	@ (8004c34 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d045      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a3f      	ldr	r2, [pc, #252]	@ (8004c38 <DMA_CalcBaseAndBitshift+0x120>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d040      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a3e      	ldr	r2, [pc, #248]	@ (8004c3c <DMA_CalcBaseAndBitshift+0x124>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d03b      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c40 <DMA_CalcBaseAndBitshift+0x128>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d036      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3b      	ldr	r2, [pc, #236]	@ (8004c44 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d031      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a39      	ldr	r2, [pc, #228]	@ (8004c48 <DMA_CalcBaseAndBitshift+0x130>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02c      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a38      	ldr	r2, [pc, #224]	@ (8004c4c <DMA_CalcBaseAndBitshift+0x134>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d027      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a36      	ldr	r2, [pc, #216]	@ (8004c50 <DMA_CalcBaseAndBitshift+0x138>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a35      	ldr	r2, [pc, #212]	@ (8004c54 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01d      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a33      	ldr	r2, [pc, #204]	@ (8004c58 <DMA_CalcBaseAndBitshift+0x140>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a32      	ldr	r2, [pc, #200]	@ (8004c5c <DMA_CalcBaseAndBitshift+0x144>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a30      	ldr	r2, [pc, #192]	@ (8004c60 <DMA_CalcBaseAndBitshift+0x148>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c64 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c68 <DMA_CalcBaseAndBitshift+0x150>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2c      	ldr	r2, [pc, #176]	@ (8004c6c <DMA_CalcBaseAndBitshift+0x154>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <DMA_CalcBaseAndBitshift+0xac>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <DMA_CalcBaseAndBitshift+0xae>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d024      	beq.n	8004c14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3b10      	subs	r3, #16
 8004bd2:	4a27      	ldr	r2, [pc, #156]	@ (8004c70 <DMA_CalcBaseAndBitshift+0x158>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	4a24      	ldr	r2, [pc, #144]	@ (8004c74 <DMA_CalcBaseAndBitshift+0x15c>)
 8004be4:	5cd3      	ldrb	r3, [r2, r3]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d908      	bls.n	8004c04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c78 <DMA_CalcBaseAndBitshift+0x160>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	1d1a      	adds	r2, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c02:	e00d      	b.n	8004c20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <DMA_CalcBaseAndBitshift+0x160>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c12:	e005      	b.n	8004c20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	40020010 	.word	0x40020010
 8004c34:	40020028 	.word	0x40020028
 8004c38:	40020040 	.word	0x40020040
 8004c3c:	40020058 	.word	0x40020058
 8004c40:	40020070 	.word	0x40020070
 8004c44:	40020088 	.word	0x40020088
 8004c48:	400200a0 	.word	0x400200a0
 8004c4c:	400200b8 	.word	0x400200b8
 8004c50:	40020410 	.word	0x40020410
 8004c54:	40020428 	.word	0x40020428
 8004c58:	40020440 	.word	0x40020440
 8004c5c:	40020458 	.word	0x40020458
 8004c60:	40020470 	.word	0x40020470
 8004c64:	40020488 	.word	0x40020488
 8004c68:	400204a0 	.word	0x400204a0
 8004c6c:	400204b8 	.word	0x400204b8
 8004c70:	aaaaaaab 	.word	0xaaaaaaab
 8004c74:	0800f430 	.word	0x0800f430
 8004c78:	fffffc00 	.word	0xfffffc00

08004c7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d120      	bne.n	8004cd2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d858      	bhi.n	8004d4a <DMA_CheckFifoParam+0xce>
 8004c98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <DMA_CheckFifoParam+0x24>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cc3 	.word	0x08004cc3
 8004ca8:	08004cb1 	.word	0x08004cb1
 8004cac:	08004d4b 	.word	0x08004d4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d048      	beq.n	8004d4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cc0:	e045      	b.n	8004d4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cca:	d142      	bne.n	8004d52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cd0:	e03f      	b.n	8004d52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cda:	d123      	bne.n	8004d24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d838      	bhi.n	8004d56 <DMA_CheckFifoParam+0xda>
 8004ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <DMA_CheckFifoParam+0x70>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004cfd 	.word	0x08004cfd
 8004cf0:	08004d03 	.word	0x08004d03
 8004cf4:	08004cfd 	.word	0x08004cfd
 8004cf8:	08004d15 	.word	0x08004d15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
        break;
 8004d00:	e030      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d025      	beq.n	8004d5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d12:	e022      	b.n	8004d5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d1c:	d11f      	bne.n	8004d5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d22:	e01c      	b.n	8004d5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d902      	bls.n	8004d32 <DMA_CheckFifoParam+0xb6>
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d003      	beq.n	8004d38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d30:	e018      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
        break;
 8004d36:	e015      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00e      	beq.n	8004d62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
    break;
 8004d48:	e00b      	b.n	8004d62 <DMA_CheckFifoParam+0xe6>
        break;
 8004d4a:	bf00      	nop
 8004d4c:	e00a      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e008      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
        break;
 8004d52:	bf00      	nop
 8004d54:	e006      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
        break;
 8004d56:	bf00      	nop
 8004d58:	e004      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
        break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <DMA_CheckFifoParam+0xe8>
    break;
 8004d62:	bf00      	nop
    }
  }

  return status;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop

08004d74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a38      	ldr	r2, [pc, #224]	@ (8004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d022      	beq.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a36      	ldr	r2, [pc, #216]	@ (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01d      	beq.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a35      	ldr	r2, [pc, #212]	@ (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a33      	ldr	r2, [pc, #204]	@ (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a32      	ldr	r2, [pc, #200]	@ (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a30      	ldr	r2, [pc, #192]	@ (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01a      	beq.n	8004e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3b08      	subs	r3, #8
 8004de4:	4a28      	ldr	r2, [pc, #160]	@ (8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4b26      	ldr	r3, [pc, #152]	@ (8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	461a      	mov	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2201      	movs	r2, #1
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e10:	e024      	b.n	8004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	3b10      	subs	r3, #16
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a1c      	ldr	r2, [pc, #112]	@ (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d806      	bhi.n	8004e3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d902      	bls.n	8004e3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3308      	adds	r3, #8
 8004e38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	461a      	mov	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	2201      	movs	r2, #1
 8004e56:	409a      	lsls	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	58025408 	.word	0x58025408
 8004e6c:	5802541c 	.word	0x5802541c
 8004e70:	58025430 	.word	0x58025430
 8004e74:	58025444 	.word	0x58025444
 8004e78:	58025458 	.word	0x58025458
 8004e7c:	5802546c 	.word	0x5802546c
 8004e80:	58025480 	.word	0x58025480
 8004e84:	58025494 	.word	0x58025494
 8004e88:	cccccccd 	.word	0xcccccccd
 8004e8c:	16009600 	.word	0x16009600
 8004e90:	58025880 	.word	0x58025880
 8004e94:	aaaaaaab 	.word	0xaaaaaaab
 8004e98:	400204b8 	.word	0x400204b8
 8004e9c:	4002040f 	.word	0x4002040f
 8004ea0:	10008200 	.word	0x10008200
 8004ea4:	40020880 	.word	0x40020880

08004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d04a      	beq.n	8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d847      	bhi.n	8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a25      	ldr	r2, [pc, #148]	@ (8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d022      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a24      	ldr	r2, [pc, #144]	@ (8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d01d      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a22      	ldr	r2, [pc, #136]	@ (8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d018      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a21      	ldr	r2, [pc, #132]	@ (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4b17      	ldr	r3, [pc, #92]	@ (8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a15      	ldr	r2, [pc, #84]	@ (8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f30:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f32:	e009      	b.n	8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a11      	ldr	r2, [pc, #68]	@ (8004f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f46:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	58025408 	.word	0x58025408
 8004f64:	5802541c 	.word	0x5802541c
 8004f68:	58025430 	.word	0x58025430
 8004f6c:	58025444 	.word	0x58025444
 8004f70:	58025458 	.word	0x58025458
 8004f74:	5802546c 	.word	0x5802546c
 8004f78:	58025480 	.word	0x58025480
 8004f7c:	58025494 	.word	0x58025494
 8004f80:	1600963f 	.word	0x1600963f
 8004f84:	58025940 	.word	0x58025940
 8004f88:	1000823f 	.word	0x1000823f
 8004f8c:	40020940 	.word	0x40020940

08004f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	@ 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f9e:	4b89      	ldr	r3, [pc, #548]	@ (80051c4 <HAL_GPIO_Init+0x234>)
 8004fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fa2:	e194      	b.n	80052ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8186 	beq.w	80052c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d005      	beq.n	8004fd4 <HAL_GPIO_Init+0x44>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d130      	bne.n	8005036 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2203      	movs	r2, #3
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800500a:	2201      	movs	r2, #1
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	091b      	lsrs	r3, r3, #4
 8005020:	f003 0201 	and.w	r2, r3, #1
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b03      	cmp	r3, #3
 8005040:	d017      	beq.n	8005072 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	2203      	movs	r2, #3
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d123      	bne.n	80050c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	08da      	lsrs	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3208      	adds	r2, #8
 8005086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4013      	ands	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	08da      	lsrs	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3208      	adds	r2, #8
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	2203      	movs	r2, #3
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 0203 	and.w	r2, r3, #3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80e0 	beq.w	80052c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005108:	4b2f      	ldr	r3, [pc, #188]	@ (80051c8 <HAL_GPIO_Init+0x238>)
 800510a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800510e:	4a2e      	ldr	r2, [pc, #184]	@ (80051c8 <HAL_GPIO_Init+0x238>)
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005118:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <HAL_GPIO_Init+0x238>)
 800511a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005126:	4a29      	ldr	r2, [pc, #164]	@ (80051cc <HAL_GPIO_Init+0x23c>)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	3302      	adds	r3, #2
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a20      	ldr	r2, [pc, #128]	@ (80051d0 <HAL_GPIO_Init+0x240>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d052      	beq.n	80051f8 <HAL_GPIO_Init+0x268>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1f      	ldr	r2, [pc, #124]	@ (80051d4 <HAL_GPIO_Init+0x244>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_GPIO_Init+0x22e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1e      	ldr	r2, [pc, #120]	@ (80051d8 <HAL_GPIO_Init+0x248>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <HAL_GPIO_Init+0x22a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1d      	ldr	r2, [pc, #116]	@ (80051dc <HAL_GPIO_Init+0x24c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d025      	beq.n	80051b6 <HAL_GPIO_Init+0x226>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1c      	ldr	r2, [pc, #112]	@ (80051e0 <HAL_GPIO_Init+0x250>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <HAL_GPIO_Init+0x222>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1b      	ldr	r2, [pc, #108]	@ (80051e4 <HAL_GPIO_Init+0x254>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d019      	beq.n	80051ae <HAL_GPIO_Init+0x21e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1a      	ldr	r2, [pc, #104]	@ (80051e8 <HAL_GPIO_Init+0x258>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_GPIO_Init+0x21a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <HAL_GPIO_Init+0x25c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00d      	beq.n	80051a6 <HAL_GPIO_Init+0x216>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <HAL_GPIO_Init+0x260>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <HAL_GPIO_Init+0x212>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <HAL_GPIO_Init+0x264>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_GPIO_Init+0x20e>
 800519a:	2309      	movs	r3, #9
 800519c:	e02d      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 800519e:	230a      	movs	r3, #10
 80051a0:	e02b      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051a2:	2308      	movs	r3, #8
 80051a4:	e029      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e027      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051aa:	2306      	movs	r3, #6
 80051ac:	e025      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051ae:	2305      	movs	r3, #5
 80051b0:	e023      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051b2:	2304      	movs	r3, #4
 80051b4:	e021      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051b6:	2303      	movs	r3, #3
 80051b8:	e01f      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e01d      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051be:	2301      	movs	r3, #1
 80051c0:	e01b      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051c2:	bf00      	nop
 80051c4:	58000080 	.word	0x58000080
 80051c8:	58024400 	.word	0x58024400
 80051cc:	58000400 	.word	0x58000400
 80051d0:	58020000 	.word	0x58020000
 80051d4:	58020400 	.word	0x58020400
 80051d8:	58020800 	.word	0x58020800
 80051dc:	58020c00 	.word	0x58020c00
 80051e0:	58021000 	.word	0x58021000
 80051e4:	58021400 	.word	0x58021400
 80051e8:	58021800 	.word	0x58021800
 80051ec:	58021c00 	.word	0x58021c00
 80051f0:	58022000 	.word	0x58022000
 80051f4:	58022400 	.word	0x58022400
 80051f8:	2300      	movs	r3, #0
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	f002 0203 	and.w	r2, r2, #3
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	4093      	lsls	r3, r2
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800520a:	4938      	ldr	r1, [pc, #224]	@ (80052ec <HAL_GPIO_Init+0x35c>)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3302      	adds	r3, #2
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800523e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800526c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	43db      	mvns	r3, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4013      	ands	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f47f ae63 	bne.w	8004fa4 <HAL_GPIO_Init+0x14>
  }
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	3724      	adds	r7, #36	@ 0x24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	58000400 	.word	0x58000400

080052f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
 80052fc:	4613      	mov	r3, r2
 80052fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005300:	787b      	ldrb	r3, [r7, #1]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005306:	887a      	ldrh	r2, [r7, #2]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800530c:	e003      	b.n	8005316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800530e:	887b      	ldrh	r3, [r7, #2]
 8005310:	041a      	lsls	r2, r3, #16
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	619a      	str	r2, [r3, #24]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	4603      	mov	r3, r0
 800532a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800532c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005330:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800533c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb fea9 	bl	80010a0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e08b      	b.n	8005482 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb fbf0 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2224      	movs	r2, #36	@ 0x24
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d107      	bne.n	80053d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	e006      	b.n	80053e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80053de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d108      	bne.n	80053fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	e007      	b.n	800540a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <HAL_I2C_Init+0x134>)
 8005416:	430b      	orrs	r3, r1
 8005418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	02008000 	.word	0x02008000

08005490 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d138      	bne.n	8005518 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e032      	b.n	800551a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	@ 0x24
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b20      	cmp	r3, #32
 800553a:	d139      	bne.n	80055b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005546:	2302      	movs	r3, #2
 8005548:	e033      	b.n	80055b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2224      	movs	r2, #36	@ 0x24
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005578:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e000      	b.n	80055b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055b0:	2302      	movs	r3, #2
  }
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80055c8:	4b29      	ldr	r3, [pc, #164]	@ (8005670 <HAL_PWREx_ConfigSupply+0xb0>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d00a      	beq.n	80055ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055d4:	4b26      	ldr	r3, [pc, #152]	@ (8005670 <HAL_PWREx_ConfigSupply+0xb0>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d001      	beq.n	80055e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e040      	b.n	8005668 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e03e      	b.n	8005668 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055ea:	4b21      	ldr	r3, [pc, #132]	@ (8005670 <HAL_PWREx_ConfigSupply+0xb0>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80055f2:	491f      	ldr	r1, [pc, #124]	@ (8005670 <HAL_PWREx_ConfigSupply+0xb0>)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055fa:	f7fc fc27 	bl	8001e4c <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005600:	e009      	b.n	8005616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005602:	f7fc fc23 	bl	8001e4c <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005610:	d901      	bls.n	8005616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e028      	b.n	8005668 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005616:	4b16      	ldr	r3, [pc, #88]	@ (8005670 <HAL_PWREx_ConfigSupply+0xb0>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005622:	d1ee      	bne.n	8005602 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b1e      	cmp	r3, #30
 8005628:	d008      	beq.n	800563c <HAL_PWREx_ConfigSupply+0x7c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b2e      	cmp	r3, #46	@ 0x2e
 800562e:	d005      	beq.n	800563c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b1d      	cmp	r3, #29
 8005634:	d002      	beq.n	800563c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b2d      	cmp	r3, #45	@ 0x2d
 800563a:	d114      	bne.n	8005666 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800563c:	f7fc fc06 	bl	8001e4c <HAL_GetTick>
 8005640:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005642:	e009      	b.n	8005658 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005644:	f7fc fc02 	bl	8001e4c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005652:	d901      	bls.n	8005658 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e007      	b.n	8005668 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005658:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <HAL_PWREx_ConfigSupply+0xb0>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005664:	d1ee      	bne.n	8005644 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	58024800 	.word	0x58024800

08005674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	@ 0x30
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f000 bc1f 	b.w	8005ec6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80b3 	beq.w	80057fc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005696:	4b95      	ldr	r3, [pc, #596]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800569e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056a0:	4b92      	ldr	r3, [pc, #584]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d007      	beq.n	80056bc <HAL_RCC_OscConfig+0x48>
 80056ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ae:	2b18      	cmp	r3, #24
 80056b0:	d112      	bne.n	80056d8 <HAL_RCC_OscConfig+0x64>
 80056b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d10d      	bne.n	80056d8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056bc:	4b8b      	ldr	r3, [pc, #556]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8098 	beq.w	80057fa <HAL_RCC_OscConfig+0x186>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 8093 	bne.w	80057fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e3f6      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e0:	d106      	bne.n	80056f0 <HAL_RCC_OscConfig+0x7c>
 80056e2:	4b82      	ldr	r3, [pc, #520]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a81      	ldr	r2, [pc, #516]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e058      	b.n	80057a2 <HAL_RCC_OscConfig+0x12e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d112      	bne.n	800571e <HAL_RCC_OscConfig+0xaa>
 80056f8:	4b7c      	ldr	r3, [pc, #496]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a7b      	ldr	r2, [pc, #492]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b79      	ldr	r3, [pc, #484]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a78      	ldr	r2, [pc, #480]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800570a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b76      	ldr	r3, [pc, #472]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a75      	ldr	r2, [pc, #468]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	e041      	b.n	80057a2 <HAL_RCC_OscConfig+0x12e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005726:	d112      	bne.n	800574e <HAL_RCC_OscConfig+0xda>
 8005728:	4b70      	ldr	r3, [pc, #448]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6f      	ldr	r2, [pc, #444]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800572e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	4b6d      	ldr	r3, [pc, #436]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a6c      	ldr	r2, [pc, #432]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800573a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4b6a      	ldr	r3, [pc, #424]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a69      	ldr	r2, [pc, #420]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	e029      	b.n	80057a2 <HAL_RCC_OscConfig+0x12e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005756:	d112      	bne.n	800577e <HAL_RCC_OscConfig+0x10a>
 8005758:	4b64      	ldr	r3, [pc, #400]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a63      	ldr	r2, [pc, #396]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800575e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4b61      	ldr	r3, [pc, #388]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a60      	ldr	r2, [pc, #384]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	4b5e      	ldr	r3, [pc, #376]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a5d      	ldr	r2, [pc, #372]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e011      	b.n	80057a2 <HAL_RCC_OscConfig+0x12e>
 800577e:	4b5b      	ldr	r3, [pc, #364]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a5a      	ldr	r2, [pc, #360]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b58      	ldr	r3, [pc, #352]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a57      	ldr	r2, [pc, #348]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b55      	ldr	r3, [pc, #340]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a54      	ldr	r2, [pc, #336]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800579c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80057a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d013      	beq.n	80057d2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fc fb4f 	bl	8001e4c <HAL_GetTick>
 80057ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b2:	f7fc fb4b 	bl	8001e4c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	@ 0x64
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e380      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057c4:	4b49      	ldr	r3, [pc, #292]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x13e>
 80057d0:	e014      	b.n	80057fc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fc fb3b 	bl	8001e4c <HAL_GetTick>
 80057d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057da:	f7fc fb37 	bl	8001e4c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b64      	cmp	r3, #100	@ 0x64
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e36c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057ec:	4b3f      	ldr	r3, [pc, #252]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCC_OscConfig+0x166>
 80057f8:	e000      	b.n	80057fc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 808c 	beq.w	8005922 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800580a:	4b38      	ldr	r3, [pc, #224]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005812:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005814:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005818:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <HAL_RCC_OscConfig+0x1bc>
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	2b18      	cmp	r3, #24
 8005824:	d137      	bne.n	8005896 <HAL_RCC_OscConfig+0x222>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d132      	bne.n	8005896 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005830:	4b2e      	ldr	r3, [pc, #184]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_OscConfig+0x1d4>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e33e      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005848:	4b28      	ldr	r3, [pc, #160]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f023 0219 	bic.w	r2, r3, #25
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4925      	ldr	r1, [pc, #148]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fc faf7 	bl	8001e4c <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005862:	f7fc faf3 	bl	8001e4c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e328      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005874:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005880:	4b1a      	ldr	r3, [pc, #104]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	4917      	ldr	r1, [pc, #92]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005894:	e045      	b.n	8005922 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d028      	beq.n	80058f0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800589e:	4b13      	ldr	r3, [pc, #76]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 0219 	bic.w	r2, r3, #25
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4910      	ldr	r1, [pc, #64]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fc facc 	bl	8001e4c <HAL_GetTick>
 80058b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b8:	f7fc fac8 	bl	8001e4c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e2fd      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	061b      	lsls	r3, r3, #24
 80058e4:	4901      	ldr	r1, [pc, #4]	@ (80058ec <HAL_RCC_OscConfig+0x278>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	604b      	str	r3, [r1, #4]
 80058ea:	e01a      	b.n	8005922 <HAL_RCC_OscConfig+0x2ae>
 80058ec:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f0:	4b97      	ldr	r3, [pc, #604]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a96      	ldr	r2, [pc, #600]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fc faa6 	bl	8001e4c <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005904:	f7fc faa2 	bl	8001e4c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e2d7      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005916:	4b8e      	ldr	r3, [pc, #568]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	d06a      	beq.n	8005a04 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800592e:	4b88      	ldr	r3, [pc, #544]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005936:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005938:	4b85      	ldr	r3, [pc, #532]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b08      	cmp	r3, #8
 8005942:	d007      	beq.n	8005954 <HAL_RCC_OscConfig+0x2e0>
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b18      	cmp	r3, #24
 8005948:	d11b      	bne.n	8005982 <HAL_RCC_OscConfig+0x30e>
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d116      	bne.n	8005982 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005954:	4b7e      	ldr	r3, [pc, #504]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_OscConfig+0x2f8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2b80      	cmp	r3, #128	@ 0x80
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e2ac      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800596c:	4b78      	ldr	r3, [pc, #480]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	061b      	lsls	r3, r3, #24
 800597a:	4975      	ldr	r1, [pc, #468]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005980:	e040      	b.n	8005a04 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d023      	beq.n	80059d2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800598a:	4b71      	ldr	r3, [pc, #452]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a70      	ldr	r2, [pc, #448]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005996:	f7fc fa59 	bl	8001e4c <HAL_GetTick>
 800599a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800599e:	f7fc fa55 	bl	8001e4c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e28a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059b0:	4b67      	ldr	r3, [pc, #412]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059bc:	4b64      	ldr	r3, [pc, #400]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	061b      	lsls	r3, r3, #24
 80059ca:	4961      	ldr	r1, [pc, #388]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60cb      	str	r3, [r1, #12]
 80059d0:	e018      	b.n	8005a04 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80059d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059de:	f7fc fa35 	bl	8001e4c <HAL_GetTick>
 80059e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059e6:	f7fc fa31 	bl	8001e4c <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e266      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059f8:	4b55      	ldr	r3, [pc, #340]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d036      	beq.n	8005a7e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a18:	4b4d      	ldr	r3, [pc, #308]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1c:	4a4c      	ldr	r2, [pc, #304]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fc fa12 	bl	8001e4c <HAL_GetTick>
 8005a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2c:	f7fc fa0e 	bl	8001e4c <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e243      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a3e:	4b44      	ldr	r3, [pc, #272]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x3b8>
 8005a4a:	e018      	b.n	8005a7e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4c:	4b40      	ldr	r3, [pc, #256]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a50:	4a3f      	ldr	r2, [pc, #252]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a58:	f7fc f9f8 	bl	8001e4c <HAL_GetTick>
 8005a5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fc f9f4 	bl	8001e4c <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e229      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a72:	4b37      	ldr	r3, [pc, #220]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d036      	beq.n	8005af8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d019      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a92:	4b2f      	ldr	r3, [pc, #188]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2e      	ldr	r2, [pc, #184]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a9e:	f7fc f9d5 	bl	8001e4c <HAL_GetTick>
 8005aa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aa6:	f7fc f9d1 	bl	8001e4c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e206      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ab8:	4b25      	ldr	r3, [pc, #148]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x432>
 8005ac4:	e018      	b.n	8005af8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ac6:	4b22      	ldr	r3, [pc, #136]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a21      	ldr	r2, [pc, #132]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ad0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ad2:	f7fc f9bb 	bl	8001e4c <HAL_GetTick>
 8005ad6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ada:	f7fc f9b7 	bl	8001e4c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e1ec      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005aec:	4b18      	ldr	r3, [pc, #96]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1f0      	bne.n	8005ada <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80af 	beq.w	8005c64 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b06:	4b13      	ldr	r3, [pc, #76]	@ (8005b54 <HAL_RCC_OscConfig+0x4e0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a12      	ldr	r2, [pc, #72]	@ (8005b54 <HAL_RCC_OscConfig+0x4e0>)
 8005b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b12:	f7fc f99b 	bl	8001e4c <HAL_GetTick>
 8005b16:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1a:	f7fc f997 	bl	8001e4c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b64      	cmp	r3, #100	@ 0x64
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1cc      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b2c:	4b09      	ldr	r3, [pc, #36]	@ (8005b54 <HAL_RCC_OscConfig+0x4e0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d10b      	bne.n	8005b58 <HAL_RCC_OscConfig+0x4e4>
 8005b40:	4b03      	ldr	r3, [pc, #12]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b44:	4a02      	ldr	r2, [pc, #8]	@ (8005b50 <HAL_RCC_OscConfig+0x4dc>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b4c:	e05b      	b.n	8005c06 <HAL_RCC_OscConfig+0x592>
 8005b4e:	bf00      	nop
 8005b50:	58024400 	.word	0x58024400
 8005b54:	58024800 	.word	0x58024800
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d112      	bne.n	8005b86 <HAL_RCC_OscConfig+0x512>
 8005b60:	4b9d      	ldr	r3, [pc, #628]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b64:	4a9c      	ldr	r2, [pc, #624]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b66:	f023 0301 	bic.w	r3, r3, #1
 8005b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b6c:	4b9a      	ldr	r3, [pc, #616]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b70:	4a99      	ldr	r2, [pc, #612]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b78:	4b97      	ldr	r3, [pc, #604]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7c:	4a96      	ldr	r2, [pc, #600]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b7e:	f023 0304 	bic.w	r3, r3, #4
 8005b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b84:	e03f      	b.n	8005c06 <HAL_RCC_OscConfig+0x592>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d112      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x540>
 8005b8e:	4b92      	ldr	r3, [pc, #584]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b92:	4a91      	ldr	r2, [pc, #580]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b94:	f043 0304 	orr.w	r3, r3, #4
 8005b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9e:	4a8e      	ldr	r2, [pc, #568]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ba6:	4b8c      	ldr	r3, [pc, #560]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005baa:	4a8b      	ldr	r2, [pc, #556]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb2:	e028      	b.n	8005c06 <HAL_RCC_OscConfig+0x592>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b85      	cmp	r3, #133	@ 0x85
 8005bba:	d112      	bne.n	8005be2 <HAL_RCC_OscConfig+0x56e>
 8005bbc:	4b86      	ldr	r3, [pc, #536]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc0:	4a85      	ldr	r2, [pc, #532]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bc2:	f043 0304 	orr.w	r3, r3, #4
 8005bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc8:	4b83      	ldr	r3, [pc, #524]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bcc:	4a82      	ldr	r2, [pc, #520]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd4:	4b80      	ldr	r3, [pc, #512]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd8:	4a7f      	ldr	r2, [pc, #508]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be0:	e011      	b.n	8005c06 <HAL_RCC_OscConfig+0x592>
 8005be2:	4b7d      	ldr	r3, [pc, #500]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be6:	4a7c      	ldr	r2, [pc, #496]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bee:	4b7a      	ldr	r3, [pc, #488]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf2:	4a79      	ldr	r2, [pc, #484]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bfa:	4b77      	ldr	r3, [pc, #476]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfe:	4a76      	ldr	r2, [pc, #472]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d015      	beq.n	8005c3a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0e:	f7fc f91d 	bl	8001e4c <HAL_GetTick>
 8005c12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c14:	e00a      	b.n	8005c2c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fc f919 	bl	8001e4c <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e14c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0ee      	beq.n	8005c16 <HAL_RCC_OscConfig+0x5a2>
 8005c38:	e014      	b.n	8005c64 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7fc f907 	bl	8001e4c <HAL_GetTick>
 8005c3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c42:	f7fc f903 	bl	8001e4c <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e136      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c58:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1ee      	bne.n	8005c42 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 812b 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c76:	2b18      	cmp	r3, #24
 8005c78:	f000 80bb 	beq.w	8005df2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	f040 8095 	bne.w	8005db0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	4b54      	ldr	r3, [pc, #336]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a53      	ldr	r2, [pc, #332]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005c8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fc f8db 	bl	8001e4c <HAL_GetTick>
 8005c96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9a:	f7fc f8d7 	bl	8001e4c <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e10c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cac:	4b4a      	ldr	r3, [pc, #296]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f0      	bne.n	8005c9a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb8:	4b47      	ldr	r3, [pc, #284]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005cba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cbc:	4b47      	ldr	r3, [pc, #284]	@ (8005ddc <HAL_RCC_OscConfig+0x768>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cc8:	0112      	lsls	r2, r2, #4
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	4942      	ldr	r1, [pc, #264]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	628b      	str	r3, [r1, #40]	@ 0x28
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	025b      	lsls	r3, r3, #9
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	3b01      	subs	r3, #1
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	061b      	lsls	r3, r3, #24
 8005cfe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d02:	4935      	ldr	r1, [pc, #212]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005d08:	4b33      	ldr	r3, [pc, #204]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	4a32      	ldr	r2, [pc, #200]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d14:	4b30      	ldr	r3, [pc, #192]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d18:	4b31      	ldr	r3, [pc, #196]	@ (8005de0 <HAL_RCC_OscConfig+0x76c>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d20:	00d2      	lsls	r2, r2, #3
 8005d22:	492d      	ldr	r1, [pc, #180]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d28:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	f023 020c 	bic.w	r2, r3, #12
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d34:	4928      	ldr	r1, [pc, #160]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d3a:	4b27      	ldr	r3, [pc, #156]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	f023 0202 	bic.w	r2, r3, #2
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	4924      	ldr	r1, [pc, #144]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d4c:	4b22      	ldr	r3, [pc, #136]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	4a21      	ldr	r2, [pc, #132]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d58:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d64:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d70:	4b19      	ldr	r3, [pc, #100]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	4a18      	ldr	r2, [pc, #96]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d7c:	4b16      	ldr	r3, [pc, #88]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc f860 	bl	8001e4c <HAL_GetTick>
 8005d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fc f85c 	bl	8001e4c <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e091      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0x71c>
 8005dae:	e089      	b.n	8005ec4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db0:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a08      	ldr	r2, [pc, #32]	@ (8005dd8 <HAL_RCC_OscConfig+0x764>)
 8005db6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fc f846 	bl	8001e4c <HAL_GetTick>
 8005dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dc2:	e00f      	b.n	8005de4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fc f842 	bl	8001e4c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d908      	bls.n	8005de4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e077      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
 8005dd6:	bf00      	nop
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	fffffc0c 	.word	0xfffffc0c
 8005de0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005de4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e9      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x750>
 8005df0:	e068      	b.n	8005ec4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005df2:	4b37      	ldr	r3, [pc, #220]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005df8:	4b35      	ldr	r3, [pc, #212]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d031      	beq.n	8005e6a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f003 0203 	and.w	r2, r3, #3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d12a      	bne.n	8005e6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	091b      	lsrs	r3, r3, #4
 8005e18:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d122      	bne.n	8005e6a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d11a      	bne.n	8005e6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	0a5b      	lsrs	r3, r3, #9
 8005e38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e40:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d111      	bne.n	8005e6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d108      	bne.n	8005e6a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	0e1b      	lsrs	r3, r3, #24
 8005e5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e02b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e6e:	4b18      	ldr	r3, [pc, #96]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e78:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d01f      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e84:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e88:	4a11      	ldr	r2, [pc, #68]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e90:	f7fb ffdc 	bl	8001e4c <HAL_GetTick>
 8005e94:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e96:	bf00      	nop
 8005e98:	f7fb ffd8 	bl	8001e4c <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d0f9      	beq.n	8005e98 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed4 <HAL_RCC_OscConfig+0x860>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005eb0:	00d2      	lsls	r2, r2, #3
 8005eb2:	4907      	ldr	r1, [pc, #28]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	4a04      	ldr	r2, [pc, #16]	@ (8005ed0 <HAL_RCC_OscConfig+0x85c>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3730      	adds	r7, #48	@ 0x30
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	ffff0007 	.word	0xffff0007

08005ed8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e19c      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eec:	4b8a      	ldr	r3, [pc, #552]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d910      	bls.n	8005f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b87      	ldr	r3, [pc, #540]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f023 020f 	bic.w	r2, r3, #15
 8005f02:	4985      	ldr	r1, [pc, #532]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0a:	4b83      	ldr	r3, [pc, #524]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e184      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d010      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d908      	bls.n	8005f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f38:	4b78      	ldr	r3, [pc, #480]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	4975      	ldr	r1, [pc, #468]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	4b70      	ldr	r3, [pc, #448]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d908      	bls.n	8005f78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f66:	4b6d      	ldr	r3, [pc, #436]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	496a      	ldr	r1, [pc, #424]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d010      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	4b64      	ldr	r3, [pc, #400]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d908      	bls.n	8005fa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f94:	4b61      	ldr	r3, [pc, #388]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	495e      	ldr	r1, [pc, #376]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	4b59      	ldr	r3, [pc, #356]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d908      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fc2:	4b56      	ldr	r3, [pc, #344]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	4953      	ldr	r1, [pc, #332]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d010      	beq.n	8006002 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d908      	bls.n	8006002 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f023 020f 	bic.w	r2, r3, #15
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	4947      	ldr	r1, [pc, #284]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d055      	beq.n	80060ba <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800600e:	4b43      	ldr	r3, [pc, #268]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	4940      	ldr	r1, [pc, #256]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 800601c:	4313      	orrs	r3, r2
 800601e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d107      	bne.n	8006038 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006028:	4b3c      	ldr	r3, [pc, #240]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d121      	bne.n	8006078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0f6      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d107      	bne.n	8006050 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006040:	4b36      	ldr	r3, [pc, #216]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d115      	bne.n	8006078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0ea      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d107      	bne.n	8006068 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006058:	4b30      	ldr	r3, [pc, #192]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0de      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006068:	4b2c      	ldr	r3, [pc, #176]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0d6      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006078:	4b28      	ldr	r3, [pc, #160]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f023 0207 	bic.w	r2, r3, #7
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4925      	ldr	r1, [pc, #148]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 8006086:	4313      	orrs	r3, r2
 8006088:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608a:	f7fb fedf 	bl	8001e4c <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006090:	e00a      	b.n	80060a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006092:	f7fb fedb 	bl	8001e4c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0be      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a8:	4b1c      	ldr	r3, [pc, #112]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d1eb      	bne.n	8006092 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d010      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	4b14      	ldr	r3, [pc, #80]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d208      	bcs.n	80060e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d6:	4b11      	ldr	r3, [pc, #68]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f023 020f 	bic.w	r2, r3, #15
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	490e      	ldr	r1, [pc, #56]	@ (800611c <HAL_RCC_ClockConfig+0x244>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d214      	bcs.n	8006120 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f6:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f023 020f 	bic.w	r2, r3, #15
 80060fe:	4906      	ldr	r1, [pc, #24]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006106:	4b04      	ldr	r3, [pc, #16]	@ (8006118 <HAL_RCC_ClockConfig+0x240>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d005      	beq.n	8006120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e086      	b.n	8006226 <HAL_RCC_ClockConfig+0x34e>
 8006118:	52002000 	.word	0x52002000
 800611c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	4b3f      	ldr	r3, [pc, #252]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006138:	429a      	cmp	r2, r3
 800613a:	d208      	bcs.n	800614e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800613c:	4b3c      	ldr	r3, [pc, #240]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	4939      	ldr	r1, [pc, #228]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 800614a:	4313      	orrs	r3, r2
 800614c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d010      	beq.n	800617c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	4b34      	ldr	r3, [pc, #208]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006166:	429a      	cmp	r2, r3
 8006168:	d208      	bcs.n	800617c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800616a:	4b31      	ldr	r3, [pc, #196]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	492e      	ldr	r1, [pc, #184]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 8006178:	4313      	orrs	r3, r2
 800617a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d010      	beq.n	80061aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	4b28      	ldr	r3, [pc, #160]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006194:	429a      	cmp	r2, r3
 8006196:	d208      	bcs.n	80061aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006198:	4b25      	ldr	r3, [pc, #148]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	4922      	ldr	r1, [pc, #136]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d010      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69da      	ldr	r2, [r3, #28]
 80061ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d208      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	4917      	ldr	r1, [pc, #92]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80061d8:	f000 f834 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b14      	ldr	r3, [pc, #80]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	4912      	ldr	r1, [pc, #72]	@ (8006234 <HAL_RCC_ClockConfig+0x35c>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80061f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006230 <HAL_RCC_ClockConfig+0x358>)
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006234 <HAL_RCC_ClockConfig+0x35c>)
 8006200:	5cd3      	ldrb	r3, [r2, r3]
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
 800620c:	4a0a      	ldr	r2, [pc, #40]	@ (8006238 <HAL_RCC_ClockConfig+0x360>)
 800620e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006210:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <HAL_RCC_ClockConfig+0x364>)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006216:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <HAL_RCC_ClockConfig+0x368>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fb fdcc 	bl	8001db8 <HAL_InitTick>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400
 8006234:	0800f420 	.word	0x0800f420
 8006238:	24000004 	.word	0x24000004
 800623c:	24000000 	.word	0x24000000
 8006240:	24000008 	.word	0x24000008

08006244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	b089      	sub	sp, #36	@ 0x24
 8006248:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800624a:	4bb3      	ldr	r3, [pc, #716]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006252:	2b18      	cmp	r3, #24
 8006254:	f200 8155 	bhi.w	8006502 <HAL_RCC_GetSysClockFreq+0x2be>
 8006258:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <HAL_RCC_GetSysClockFreq+0x1c>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	080062c5 	.word	0x080062c5
 8006264:	08006503 	.word	0x08006503
 8006268:	08006503 	.word	0x08006503
 800626c:	08006503 	.word	0x08006503
 8006270:	08006503 	.word	0x08006503
 8006274:	08006503 	.word	0x08006503
 8006278:	08006503 	.word	0x08006503
 800627c:	08006503 	.word	0x08006503
 8006280:	080062eb 	.word	0x080062eb
 8006284:	08006503 	.word	0x08006503
 8006288:	08006503 	.word	0x08006503
 800628c:	08006503 	.word	0x08006503
 8006290:	08006503 	.word	0x08006503
 8006294:	08006503 	.word	0x08006503
 8006298:	08006503 	.word	0x08006503
 800629c:	08006503 	.word	0x08006503
 80062a0:	080062f1 	.word	0x080062f1
 80062a4:	08006503 	.word	0x08006503
 80062a8:	08006503 	.word	0x08006503
 80062ac:	08006503 	.word	0x08006503
 80062b0:	08006503 	.word	0x08006503
 80062b4:	08006503 	.word	0x08006503
 80062b8:	08006503 	.word	0x08006503
 80062bc:	08006503 	.word	0x08006503
 80062c0:	080062f7 	.word	0x080062f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062c4:	4b94      	ldr	r3, [pc, #592]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062d0:	4b91      	ldr	r3, [pc, #580]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	08db      	lsrs	r3, r3, #3
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	4a90      	ldr	r2, [pc, #576]	@ (800651c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
 80062e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062e2:	e111      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062e4:	4b8d      	ldr	r3, [pc, #564]	@ (800651c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062e6:	61bb      	str	r3, [r7, #24]
      break;
 80062e8:	e10e      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062ea:	4b8d      	ldr	r3, [pc, #564]	@ (8006520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062ec:	61bb      	str	r3, [r7, #24]
      break;
 80062ee:	e10b      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80062f0:	4b8c      	ldr	r3, [pc, #560]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062f2:	61bb      	str	r3, [r7, #24]
      break;
 80062f4:	e108      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062f6:	4b88      	ldr	r3, [pc, #544]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006300:	4b85      	ldr	r3, [pc, #532]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800630a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800630c:	4b82      	ldr	r3, [pc, #520]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006316:	4b80      	ldr	r3, [pc, #512]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631a:	08db      	lsrs	r3, r3, #3
 800631c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	fb02 f303 	mul.w	r3, r2, r3
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80e1 	beq.w	80064fc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b02      	cmp	r3, #2
 800633e:	f000 8083 	beq.w	8006448 <HAL_RCC_GetSysClockFreq+0x204>
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b02      	cmp	r3, #2
 8006346:	f200 80a1 	bhi.w	800648c <HAL_RCC_GetSysClockFreq+0x248>
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x114>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d056      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006356:	e099      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006358:	4b6f      	ldr	r3, [pc, #444]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02d      	beq.n	80063c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006364:	4b6c      	ldr	r3, [pc, #432]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	08db      	lsrs	r3, r3, #3
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	4a6b      	ldr	r2, [pc, #428]	@ (800651c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
 8006374:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b62      	ldr	r3, [pc, #392]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a02 	vldr	s12, [r7, #8]
 80063a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80063be:	e087      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800652c <HAL_RCC_GetSysClockFreq+0x2e8>
 80063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d2:	4b51      	ldr	r3, [pc, #324]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006402:	e065      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006530 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006416:	4b40      	ldr	r3, [pc, #256]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006426:	ed97 6a02 	vldr	s12, [r7, #8]
 800642a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006446:	e043      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006534 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645a:	4b2f      	ldr	r3, [pc, #188]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646a:	ed97 6a02 	vldr	s12, [r7, #8]
 800646e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006528 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800648a:	e021      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006496:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006530 <HAL_RCC_GetSysClockFreq+0x2ec>
 800649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649e:	4b1e      	ldr	r3, [pc, #120]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80064b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064d0:	4b11      	ldr	r3, [pc, #68]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d4:	0a5b      	lsrs	r3, r3, #9
 80064d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064da:	3301      	adds	r3, #1
 80064dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064f4:	ee17 3a90 	vmov	r3, s15
 80064f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80064fa:	e005      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
      break;
 8006500:	e002      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006502:	4b07      	ldr	r3, [pc, #28]	@ (8006520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006504:	61bb      	str	r3, [r7, #24]
      break;
 8006506:	bf00      	nop
  }

  return sysclockfreq;
 8006508:	69bb      	ldr	r3, [r7, #24]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3724      	adds	r7, #36	@ 0x24
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	58024400 	.word	0x58024400
 800651c:	03d09000 	.word	0x03d09000
 8006520:	003d0900 	.word	0x003d0900
 8006524:	007a1200 	.word	0x007a1200
 8006528:	46000000 	.word	0x46000000
 800652c:	4c742400 	.word	0x4c742400
 8006530:	4a742400 	.word	0x4a742400
 8006534:	4af42400 	.word	0x4af42400

08006538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800653e:	f7ff fe81 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8006542:	4602      	mov	r2, r0
 8006544:	4b10      	ldr	r3, [pc, #64]	@ (8006588 <HAL_RCC_GetHCLKFreq+0x50>)
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	490f      	ldr	r1, [pc, #60]	@ (800658c <HAL_RCC_GetHCLKFreq+0x54>)
 8006550:	5ccb      	ldrb	r3, [r1, r3]
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	fa22 f303 	lsr.w	r3, r2, r3
 800655a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800655c:	4b0a      	ldr	r3, [pc, #40]	@ (8006588 <HAL_RCC_GetHCLKFreq+0x50>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	4a09      	ldr	r2, [pc, #36]	@ (800658c <HAL_RCC_GetHCLKFreq+0x54>)
 8006566:	5cd3      	ldrb	r3, [r2, r3]
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	fa22 f303 	lsr.w	r3, r2, r3
 8006572:	4a07      	ldr	r2, [pc, #28]	@ (8006590 <HAL_RCC_GetHCLKFreq+0x58>)
 8006574:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006576:	4a07      	ldr	r2, [pc, #28]	@ (8006594 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800657c:	4b04      	ldr	r3, [pc, #16]	@ (8006590 <HAL_RCC_GetHCLKFreq+0x58>)
 800657e:	681b      	ldr	r3, [r3, #0]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	58024400 	.word	0x58024400
 800658c:	0800f420 	.word	0x0800f420
 8006590:	24000004 	.word	0x24000004
 8006594:	24000000 	.word	0x24000000

08006598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800659c:	f7ff ffcc 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4904      	ldr	r1, [pc, #16]	@ (80065c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	58024400 	.word	0x58024400
 80065c0:	0800f420 	.word	0x0800f420

080065c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80065c8:	f7ff ffb6 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 80065cc:	4602      	mov	r2, r0
 80065ce:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	4904      	ldr	r1, [pc, #16]	@ (80065ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80065da:	5ccb      	ldrb	r3, [r1, r3]
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	58024400 	.word	0x58024400
 80065ec:	0800f420 	.word	0x0800f420

080065f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f4:	b0c8      	sub	sp, #288	@ 0x120
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006602:	2300      	movs	r3, #0
 8006604:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006614:	2500      	movs	r5, #0
 8006616:	ea54 0305 	orrs.w	r3, r4, r5
 800661a:	d049      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800661c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006622:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006626:	d02f      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006628:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800662c:	d828      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800662e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006632:	d01a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006638:	d822      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800663e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006642:	d007      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006644:	e01c      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006646:	4ba7      	ldr	r3, [pc, #668]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664a:	4aa6      	ldr	r2, [pc, #664]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800664c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006652:	e01a      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006658:	3308      	adds	r3, #8
 800665a:	2102      	movs	r1, #2
 800665c:	4618      	mov	r0, r3
 800665e:	f001 fc43 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006668:	e00f      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800666a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800666e:	3328      	adds	r3, #40	@ 0x28
 8006670:	2102      	movs	r1, #2
 8006672:	4618      	mov	r0, r3
 8006674:	f001 fcea 	bl	800804c <RCCEx_PLL3_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800667e:	e004      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006692:	4b94      	ldr	r3, [pc, #592]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006696:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800669a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800669e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a0:	4a90      	ldr	r2, [pc, #576]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80066a6:	e003      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	ea58 0309 	orrs.w	r3, r8, r9
 80066c4:	d047      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d82a      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80066d0:	a201      	add	r2, pc, #4	@ (adr r2, 80066d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066ed 	.word	0x080066ed
 80066dc:	080066fb 	.word	0x080066fb
 80066e0:	08006711 	.word	0x08006711
 80066e4:	0800672f 	.word	0x0800672f
 80066e8:	0800672f 	.word	0x0800672f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ec:	4b7d      	ldr	r3, [pc, #500]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	4a7c      	ldr	r2, [pc, #496]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066f8:	e01a      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066fe:	3308      	adds	r3, #8
 8006700:	2100      	movs	r1, #0
 8006702:	4618      	mov	r0, r3
 8006704:	f001 fbf0 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800670e:	e00f      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006714:	3328      	adds	r3, #40	@ 0x28
 8006716:	2100      	movs	r1, #0
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fc97 	bl	800804c <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006724:	e004      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800672c:	e000      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800672e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006730:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006738:	4b6a      	ldr	r3, [pc, #424]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800673a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800673c:	f023 0107 	bic.w	r1, r3, #7
 8006740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	4a67      	ldr	r2, [pc, #412]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006748:	430b      	orrs	r3, r1
 800674a:	6513      	str	r3, [r2, #80]	@ 0x50
 800674c:	e003      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006752:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006762:	f04f 0b00 	mov.w	fp, #0
 8006766:	ea5a 030b 	orrs.w	r3, sl, fp
 800676a:	d054      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800676c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006772:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006776:	d036      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006778:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800677c:	d82f      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800677e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006782:	d032      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006788:	d829      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800678a:	2bc0      	cmp	r3, #192	@ 0xc0
 800678c:	d02f      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800678e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006790:	d825      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006792:	2b80      	cmp	r3, #128	@ 0x80
 8006794:	d018      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006796:	2b80      	cmp	r3, #128	@ 0x80
 8006798:	d821      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800679e:	2b40      	cmp	r3, #64	@ 0x40
 80067a0:	d007      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80067a2:	e01c      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a4:	4b4f      	ldr	r3, [pc, #316]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	4a4e      	ldr	r2, [pc, #312]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80067b0:	e01e      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067b6:	3308      	adds	r3, #8
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fb94 	bl	8007ee8 <RCCEx_PLL2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80067c6:	e013      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067cc:	3328      	adds	r3, #40	@ 0x28
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 fc3b 	bl	800804c <RCCEx_PLL3_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80067dc:	e008      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067e4:	e004      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80067ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80067f8:	4b3a      	ldr	r3, [pc, #232]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006806:	4a37      	ldr	r2, [pc, #220]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006808:	430b      	orrs	r3, r1
 800680a:	6513      	str	r3, [r2, #80]	@ 0x50
 800680c:	e003      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006812:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006822:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800682c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006830:	460b      	mov	r3, r1
 8006832:	4313      	orrs	r3, r2
 8006834:	d05c      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800683a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800683c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006840:	d03b      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006842:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006846:	d834      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800684c:	d037      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800684e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006852:	d82e      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006854:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006858:	d033      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800685a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800685e:	d828      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006864:	d01a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686a:	d822      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006874:	d007      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006876:	e01c      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006878:	4b1a      	ldr	r3, [pc, #104]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4a19      	ldr	r2, [pc, #100]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800687e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006884:	e01e      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800688a:	3308      	adds	r3, #8
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f001 fb2a 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800689a:	e013      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800689c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a0:	3328      	adds	r3, #40	@ 0x28
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fbd1 	bl	800804c <RCCEx_PLL3_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80068b0:	e008      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068b8:	e004      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80068ba:	bf00      	nop
 80068bc:	e002      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80068be:	bf00      	nop
 80068c0:	e000      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80068c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10d      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80068d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068da:	4a02      	ldr	r2, [pc, #8]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6513      	str	r3, [r2, #80]	@ 0x50
 80068e0:	e006      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80068fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006900:	2300      	movs	r3, #0
 8006902:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006906:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	d03a      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006916:	2b30      	cmp	r3, #48	@ 0x30
 8006918:	d01f      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800691a:	2b30      	cmp	r3, #48	@ 0x30
 800691c:	d819      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800691e:	2b20      	cmp	r3, #32
 8006920:	d00c      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006922:	2b20      	cmp	r3, #32
 8006924:	d815      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d019      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800692a:	2b10      	cmp	r3, #16
 800692c:	d111      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692e:	4bae      	ldr	r3, [pc, #696]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006932:	4aad      	ldr	r2, [pc, #692]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800693a:	e011      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006940:	3308      	adds	r3, #8
 8006942:	2102      	movs	r1, #2
 8006944:	4618      	mov	r0, r3
 8006946:	f001 facf 	bl	8007ee8 <RCCEx_PLL2_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006950:	e006      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006958:	e002      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800695a:	bf00      	nop
 800695c:	e000      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800695e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006960:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006968:	4b9f      	ldr	r3, [pc, #636]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800696a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006976:	4a9c      	ldr	r2, [pc, #624]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006978:	430b      	orrs	r3, r1
 800697a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800697c:	e003      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006982:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006992:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006996:	2300      	movs	r3, #0
 8006998:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800699c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d051      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80069a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069b0:	d035      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80069b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069b6:	d82e      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80069b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069bc:	d031      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80069be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069c2:	d828      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80069c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c8:	d01a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80069ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ce:	d822      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80069d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d8:	d007      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80069da:	e01c      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069dc:	4b82      	ldr	r3, [pc, #520]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	4a81      	ldr	r2, [pc, #516]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069e8:	e01c      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ee:	3308      	adds	r3, #8
 80069f0:	2100      	movs	r1, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 fa78 	bl	8007ee8 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069fe:	e011      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a04:	3328      	adds	r3, #40	@ 0x28
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fb1f 	bl	800804c <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a14:	e006      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a1c:	e002      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a2c:	4b6e      	ldr	r3, [pc, #440]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3a:	4a6b      	ldr	r2, [pc, #428]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d053      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a74:	d033      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006a76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a7a:	d82c      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a80:	d02f      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006a82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a86:	d826      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a8c:	d02b      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a92:	d820      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a98:	d012      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a9e:	d81a      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d022      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa8:	d115      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aae:	3308      	adds	r3, #8
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fa18 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006abe:	e015      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac4:	3328      	adds	r3, #40	@ 0x28
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fabf 	bl	800804c <RCCEx_PLL3_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e00a      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006adc:	e006      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006ade:	bf00      	nop
 8006ae0:	e004      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006af4:	4b3c      	ldr	r3, [pc, #240]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b02:	4a39      	ldr	r2, [pc, #228]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b08:	e003      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006b1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b22:	2300      	movs	r3, #0
 8006b24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	d060      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b3a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006b3e:	d039      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006b40:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006b44:	d832      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b4a:	d035      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b50:	d82c      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	d031      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5c:	d826      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b62:	d02d      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006b64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b68:	d820      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b6e:	d012      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b74:	d81a      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d024      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b7e:	d115      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b84:	3308      	adds	r3, #8
 8006b86:	2101      	movs	r1, #1
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f9ad 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b94:	e017      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b9a:	3328      	adds	r3, #40	@ 0x28
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 fa54 	bl	800804c <RCCEx_PLL3_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006baa:	e00c      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e006      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bb8:	bf00      	nop
 8006bba:	e004      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e002      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bc0:	bf00      	nop
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10e      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bce:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006bde:	4a02      	ldr	r2, [pc, #8]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006be6:	bf00      	nop
 8006be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d037      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c1e:	d00e      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c24:	d816      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d018      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c2e:	d111      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c30:	4bc4      	ldr	r3, [pc, #784]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	4ac3      	ldr	r2, [pc, #780]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c3c:	e00f      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c42:	3308      	adds	r3, #8
 8006c44:	2101      	movs	r1, #1
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f94e 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c52:	e004      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c5a:	e000      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c66:	4bb7      	ldr	r3, [pc, #732]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c74:	4ab3      	ldr	r2, [pc, #716]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c76:	430b      	orrs	r3, r1
 8006c78:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c7a:	e003      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c94:	2300      	movs	r3, #0
 8006c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006c9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	d039      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d81c      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006cae:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006cf1 	.word	0x08006cf1
 8006cb8:	08006cc5 	.word	0x08006cc5
 8006cbc:	08006cd3 	.word	0x08006cd3
 8006cc0:	08006cf1 	.word	0x08006cf1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc4:	4b9f      	ldr	r3, [pc, #636]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	4a9e      	ldr	r2, [pc, #632]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cd0:	e00f      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	2102      	movs	r1, #2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f904 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ce6:	e004      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cee:	e000      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cfa:	4b92      	ldr	r3, [pc, #584]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cfe:	f023 0103 	bic.w	r1, r3, #3
 8006d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d08:	4a8e      	ldr	r2, [pc, #568]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d0e:	e003      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006d24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f000 8099 	beq.w	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d3a:	4b83      	ldr	r3, [pc, #524]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a82      	ldr	r2, [pc, #520]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d46:	f7fb f881 	bl	8001e4c <HAL_GetTick>
 8006d4a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d4e:	e00b      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d50:	f7fb f87c 	bl	8001e4c <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b64      	cmp	r3, #100	@ 0x64
 8006d5e:	d903      	bls.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d66:	e005      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d68:	4b77      	ldr	r3, [pc, #476]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0ed      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006d74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d173      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d7c:	4b71      	ldr	r3, [pc, #452]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d88:	4053      	eors	r3, r2
 8006d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d015      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d92:	4b6c      	ldr	r3, [pc, #432]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d9e:	4b69      	ldr	r3, [pc, #420]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da2:	4a68      	ldr	r2, [pc, #416]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006da8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006daa:	4b66      	ldr	r3, [pc, #408]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dae:	4a65      	ldr	r2, [pc, #404]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006db4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006db6:	4a63      	ldr	r2, [pc, #396]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dca:	d118      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fb f83e 	bl	8001e4c <HAL_GetTick>
 8006dd0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dd4:	e00d      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd6:	f7fb f839 	bl	8001e4c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d903      	bls.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006df0:	e005      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006df2:	4b54      	ldr	r3, [pc, #336]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0eb      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d129      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e16:	d10e      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006e18:	4b4a      	ldr	r3, [pc, #296]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e28:	091a      	lsrs	r2, r3, #4
 8006e2a:	4b48      	ldr	r3, [pc, #288]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	4a45      	ldr	r2, [pc, #276]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6113      	str	r3, [r2, #16]
 8006e34:	e005      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006e36:	4b43      	ldr	r3, [pc, #268]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	4a42      	ldr	r2, [pc, #264]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e40:	6113      	str	r3, [r2, #16]
 8006e42:	4b40      	ldr	r3, [pc, #256]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e52:	4a3c      	ldr	r2, [pc, #240]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e58:	e008      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f002 0301 	and.w	r3, r2, #1
 8006e78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f000 8090 	beq.w	8006fae <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e96:	2b28      	cmp	r3, #40	@ 0x28
 8006e98:	d870      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006f85 	.word	0x08006f85
 8006ea4:	08006f7d 	.word	0x08006f7d
 8006ea8:	08006f7d 	.word	0x08006f7d
 8006eac:	08006f7d 	.word	0x08006f7d
 8006eb0:	08006f7d 	.word	0x08006f7d
 8006eb4:	08006f7d 	.word	0x08006f7d
 8006eb8:	08006f7d 	.word	0x08006f7d
 8006ebc:	08006f7d 	.word	0x08006f7d
 8006ec0:	08006f51 	.word	0x08006f51
 8006ec4:	08006f7d 	.word	0x08006f7d
 8006ec8:	08006f7d 	.word	0x08006f7d
 8006ecc:	08006f7d 	.word	0x08006f7d
 8006ed0:	08006f7d 	.word	0x08006f7d
 8006ed4:	08006f7d 	.word	0x08006f7d
 8006ed8:	08006f7d 	.word	0x08006f7d
 8006edc:	08006f7d 	.word	0x08006f7d
 8006ee0:	08006f67 	.word	0x08006f67
 8006ee4:	08006f7d 	.word	0x08006f7d
 8006ee8:	08006f7d 	.word	0x08006f7d
 8006eec:	08006f7d 	.word	0x08006f7d
 8006ef0:	08006f7d 	.word	0x08006f7d
 8006ef4:	08006f7d 	.word	0x08006f7d
 8006ef8:	08006f7d 	.word	0x08006f7d
 8006efc:	08006f7d 	.word	0x08006f7d
 8006f00:	08006f85 	.word	0x08006f85
 8006f04:	08006f7d 	.word	0x08006f7d
 8006f08:	08006f7d 	.word	0x08006f7d
 8006f0c:	08006f7d 	.word	0x08006f7d
 8006f10:	08006f7d 	.word	0x08006f7d
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006f7d 	.word	0x08006f7d
 8006f1c:	08006f7d 	.word	0x08006f7d
 8006f20:	08006f85 	.word	0x08006f85
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f7d 	.word	0x08006f7d
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	08006f7d 	.word	0x08006f7d
 8006f34:	08006f7d 	.word	0x08006f7d
 8006f38:	08006f7d 	.word	0x08006f7d
 8006f3c:	08006f7d 	.word	0x08006f7d
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	58024400 	.word	0x58024400
 8006f48:	58024800 	.word	0x58024800
 8006f4c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f54:	3308      	adds	r3, #8
 8006f56:	2101      	movs	r1, #1
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 ffc5 	bl	8007ee8 <RCCEx_PLL2_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f64:	e00f      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f6a:	3328      	adds	r3, #40	@ 0x28
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f86c 	bl	800804c <RCCEx_PLL3_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f7a:	e004      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f82:	e000      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f8e:	4bc0      	ldr	r3, [pc, #768]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f9e:	4abc      	ldr	r2, [pc, #752]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fa4:	e003      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006faa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f002 0302 	and.w	r3, r2, #2
 8006fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fc4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	d043      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fd6:	2b05      	cmp	r3, #5
 8006fd8:	d824      	bhi.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006fda:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	08006ff9 	.word	0x08006ff9
 8006fe8:	0800700f 	.word	0x0800700f
 8006fec:	0800702d 	.word	0x0800702d
 8006ff0:	0800702d 	.word	0x0800702d
 8006ff4:	0800702d 	.word	0x0800702d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	2101      	movs	r1, #1
 8007000:	4618      	mov	r0, r3
 8007002:	f000 ff71 	bl	8007ee8 <RCCEx_PLL2_Config>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800700c:	e00f      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800700e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007012:	3328      	adds	r3, #40	@ 0x28
 8007014:	2101      	movs	r1, #1
 8007016:	4618      	mov	r0, r3
 8007018:	f001 f818 	bl	800804c <RCCEx_PLL3_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007022:	e004      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800702a:	e000      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800702c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007036:	4b96      	ldr	r3, [pc, #600]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703a:	f023 0107 	bic.w	r1, r3, #7
 800703e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007046:	4a92      	ldr	r2, [pc, #584]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007048:	430b      	orrs	r3, r1
 800704a:	6553      	str	r3, [r2, #84]	@ 0x54
 800704c:	e003      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007052:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f002 0304 	and.w	r3, r2, #4
 8007062:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007066:	2300      	movs	r3, #0
 8007068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800706c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007070:	460b      	mov	r3, r1
 8007072:	4313      	orrs	r3, r2
 8007074:	d043      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800707a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800707e:	2b05      	cmp	r3, #5
 8007080:	d824      	bhi.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007082:	a201      	add	r2, pc, #4	@ (adr r2, 8007088 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007088:	080070d5 	.word	0x080070d5
 800708c:	080070a1 	.word	0x080070a1
 8007090:	080070b7 	.word	0x080070b7
 8007094:	080070d5 	.word	0x080070d5
 8007098:	080070d5 	.word	0x080070d5
 800709c:	080070d5 	.word	0x080070d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070a4:	3308      	adds	r3, #8
 80070a6:	2101      	movs	r1, #1
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 ff1d 	bl	8007ee8 <RCCEx_PLL2_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070b4:	e00f      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ba:	3328      	adds	r3, #40	@ 0x28
 80070bc:	2101      	movs	r1, #1
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 ffc4 	bl	800804c <RCCEx_PLL3_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070ca:	e004      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070d2:	e000      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80070d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070de:	4b6c      	ldr	r3, [pc, #432]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e2:	f023 0107 	bic.w	r1, r3, #7
 80070e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070ee:	4a68      	ldr	r2, [pc, #416]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070f0:	430b      	orrs	r3, r1
 80070f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070f4:	e003      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f002 0320 	and.w	r3, r2, #32
 800710a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800710e:	2300      	movs	r3, #0
 8007110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007118:	460b      	mov	r3, r1
 800711a:	4313      	orrs	r3, r2
 800711c:	d055      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800711e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007126:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800712a:	d033      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800712c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007130:	d82c      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007136:	d02f      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800713c:	d826      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800713e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007142:	d02b      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007144:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007148:	d820      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800714e:	d012      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007154:	d81a      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d022      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800715a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715e:	d115      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007164:	3308      	adds	r3, #8
 8007166:	2100      	movs	r1, #0
 8007168:	4618      	mov	r0, r3
 800716a:	f000 febd 	bl	8007ee8 <RCCEx_PLL2_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007174:	e015      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800717a:	3328      	adds	r3, #40	@ 0x28
 800717c:	2102      	movs	r1, #2
 800717e:	4618      	mov	r0, r3
 8007180:	f000 ff64 	bl	800804c <RCCEx_PLL3_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800718a:	e00a      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007192:	e006      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007194:	bf00      	nop
 8007196:	e004      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007198:	bf00      	nop
 800719a:	e002      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800719c:	bf00      	nop
 800719e:	e000      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80071a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071aa:	4b39      	ldr	r3, [pc, #228]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071ba:	4a35      	ldr	r2, [pc, #212]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071bc:	430b      	orrs	r3, r1
 80071be:	6553      	str	r3, [r2, #84]	@ 0x54
 80071c0:	e003      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80071d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071da:	2300      	movs	r3, #0
 80071dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80071e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4313      	orrs	r3, r2
 80071e8:	d058      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071f6:	d033      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80071f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071fc:	d82c      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007202:	d02f      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007208:	d826      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800720a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800720e:	d02b      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007214:	d820      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800721a:	d012      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800721c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007220:	d81a      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d022      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800722a:	d115      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800722c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007230:	3308      	adds	r3, #8
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fe57 	bl	8007ee8 <RCCEx_PLL2_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007240:	e015      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007246:	3328      	adds	r3, #40	@ 0x28
 8007248:	2102      	movs	r1, #2
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fefe 	bl	800804c <RCCEx_PLL3_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007256:	e00a      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800725e:	e006      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007260:	bf00      	nop
 8007262:	e004      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007264:	bf00      	nop
 8007266:	e002      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800726c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10e      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007276:	4b06      	ldr	r3, [pc, #24]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800727e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007286:	4a02      	ldr	r2, [pc, #8]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007288:	430b      	orrs	r3, r1
 800728a:	6593      	str	r3, [r2, #88]	@ 0x58
 800728c:	e006      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800728e:	bf00      	nop
 8007290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007298:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80072a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80072b6:	460b      	mov	r3, r1
 80072b8:	4313      	orrs	r3, r2
 80072ba:	d055      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80072bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072c8:	d033      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80072ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072ce:	d82c      	bhi.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80072d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072d4:	d02f      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80072d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072da:	d826      	bhi.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80072dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072e0:	d02b      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80072e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072e6:	d820      	bhi.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80072e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072ec:	d012      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80072ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072f2:	d81a      	bhi.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d022      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80072f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fc:	d115      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007302:	3308      	adds	r3, #8
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fdee 	bl	8007ee8 <RCCEx_PLL2_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007312:	e015      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007318:	3328      	adds	r3, #40	@ 0x28
 800731a:	2102      	movs	r1, #2
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fe95 	bl	800804c <RCCEx_PLL3_Config>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007328:	e00a      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007330:	e006      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007332:	bf00      	nop
 8007334:	e004      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007336:	bf00      	nop
 8007338:	e002      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800733e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007348:	4ba1      	ldr	r3, [pc, #644]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800734a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007354:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007358:	4a9d      	ldr	r2, [pc, #628]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800735a:	430b      	orrs	r3, r1
 800735c:	6593      	str	r3, [r2, #88]	@ 0x58
 800735e:	e003      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007364:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f002 0308 	and.w	r3, r2, #8
 8007374:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007378:	2300      	movs	r3, #0
 800737a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800737e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007382:	460b      	mov	r3, r1
 8007384:	4313      	orrs	r3, r2
 8007386:	d01e      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800738c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007394:	d10c      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800739a:	3328      	adds	r3, #40	@ 0x28
 800739c:	2102      	movs	r1, #2
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fe54 	bl	800804c <RCCEx_PLL3_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073b0:	4b87      	ldr	r3, [pc, #540]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073c0:	4a83      	ldr	r2, [pc, #524]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073c2:	430b      	orrs	r3, r1
 80073c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f002 0310 	and.w	r3, r2, #16
 80073d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073d6:	2300      	movs	r3, #0
 80073d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80073e0:	460b      	mov	r3, r1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	d01e      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f2:	d10c      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f8:	3328      	adds	r3, #40	@ 0x28
 80073fa:	2102      	movs	r1, #2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fe25 	bl	800804c <RCCEx_PLL3_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800740e:	4b70      	ldr	r3, [pc, #448]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007412:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800741a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800741e:	4a6c      	ldr	r2, [pc, #432]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007420:	430b      	orrs	r3, r1
 8007422:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007434:	2300      	movs	r3, #0
 8007436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800743a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800743e:	460b      	mov	r3, r1
 8007440:	4313      	orrs	r3, r2
 8007442:	d03e      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007448:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800744c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007450:	d022      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007456:	d81b      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007460:	d00b      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007462:	e015      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007468:	3308      	adds	r3, #8
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fd3b 	bl	8007ee8 <RCCEx_PLL2_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007478:	e00f      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800747a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800747e:	3328      	adds	r3, #40	@ 0x28
 8007480:	2102      	movs	r1, #2
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fde2 	bl	800804c <RCCEx_PLL3_Config>
 8007488:	4603      	mov	r3, r0
 800748a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800748e:	e004      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007496:	e000      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074a2:	4b4b      	ldr	r3, [pc, #300]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074b2:	4a47      	ldr	r2, [pc, #284]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074b4:	430b      	orrs	r3, r1
 80074b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074b8:	e003      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80074ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074d0:	2300      	movs	r3, #0
 80074d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80074d8:	460b      	mov	r3, r1
 80074da:	4313      	orrs	r3, r2
 80074dc:	d03b      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074ea:	d01f      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80074ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074f0:	d818      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80074f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074f6:	d003      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80074f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074fc:	d007      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80074fe:	e011      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007500:	4b33      	ldr	r3, [pc, #204]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007504:	4a32      	ldr	r2, [pc, #200]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800750a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800750c:	e00f      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800750e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007512:	3328      	adds	r3, #40	@ 0x28
 8007514:	2101      	movs	r1, #1
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fd98 	bl	800804c <RCCEx_PLL3_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007522:	e004      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800752a:	e000      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800752c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007536:	4b26      	ldr	r3, [pc, #152]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800753a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800753e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007546:	4a22      	ldr	r2, [pc, #136]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007548:	430b      	orrs	r3, r1
 800754a:	6553      	str	r3, [r2, #84]	@ 0x54
 800754c:	e003      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007552:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007562:	673b      	str	r3, [r7, #112]	@ 0x70
 8007564:	2300      	movs	r3, #0
 8007566:	677b      	str	r3, [r7, #116]	@ 0x74
 8007568:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800756c:	460b      	mov	r3, r1
 800756e:	4313      	orrs	r3, r2
 8007570:	d034      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007580:	d007      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007582:	e011      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007584:	4b12      	ldr	r3, [pc, #72]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	4a11      	ldr	r2, [pc, #68]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800758a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800758e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007590:	e00e      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007596:	3308      	adds	r3, #8
 8007598:	2102      	movs	r1, #2
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fca4 	bl	8007ee8 <RCCEx_PLL2_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075a6:	e003      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10d      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075b8:	4b05      	ldr	r3, [pc, #20]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c6:	4a02      	ldr	r2, [pc, #8]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075c8:	430b      	orrs	r3, r1
 80075ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075cc:	e006      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80075e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ea:	2300      	movs	r3, #0
 80075ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80075f2:	460b      	mov	r3, r1
 80075f4:	4313      	orrs	r3, r2
 80075f6:	d00c      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075fc:	3328      	adds	r3, #40	@ 0x28
 80075fe:	2102      	movs	r1, #2
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fd23 	bl	800804c <RCCEx_PLL3_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800761e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007620:	2300      	movs	r3, #0
 8007622:	667b      	str	r3, [r7, #100]	@ 0x64
 8007624:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007628:	460b      	mov	r3, r1
 800762a:	4313      	orrs	r3, r2
 800762c:	d038      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800762e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800763a:	d018      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800763c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007640:	d811      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007646:	d014      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800764c:	d80b      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d011      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007656:	d106      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007658:	4bc3      	ldr	r3, [pc, #780]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4ac2      	ldr	r2, [pc, #776]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800765e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007664:	e008      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800766c:	e004      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800766e:	bf00      	nop
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007678:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007680:	4bb9      	ldr	r3, [pc, #740]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007684:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007690:	4ab5      	ldr	r2, [pc, #724]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007692:	430b      	orrs	r3, r1
 8007694:	6553      	str	r3, [r2, #84]	@ 0x54
 8007696:	e003      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800769c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80076ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ae:	2300      	movs	r3, #0
 80076b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80076b6:	460b      	mov	r3, r1
 80076b8:	4313      	orrs	r3, r2
 80076ba:	d009      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076bc:	4baa      	ldr	r3, [pc, #680]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076ca:	4aa7      	ldr	r2, [pc, #668]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80076dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80076de:	2300      	movs	r3, #0
 80076e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80076e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80076e6:	460b      	mov	r3, r1
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076ec:	4b9e      	ldr	r3, [pc, #632]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80076f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076fa:	4a9b      	ldr	r2, [pc, #620]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076fc:	430b      	orrs	r3, r1
 80076fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800770c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800770e:	2300      	movs	r3, #0
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007712:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d009      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800771c:	4b92      	ldr	r3, [pc, #584]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800771e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007720:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800772a:	4a8f      	ldr	r2, [pc, #572]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800772c:	430b      	orrs	r3, r1
 800772e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800773c:	643b      	str	r3, [r7, #64]	@ 0x40
 800773e:	2300      	movs	r3, #0
 8007740:	647b      	str	r3, [r7, #68]	@ 0x44
 8007742:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007746:	460b      	mov	r3, r1
 8007748:	4313      	orrs	r3, r2
 800774a:	d00e      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800774c:	4b86      	ldr	r3, [pc, #536]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	4a85      	ldr	r2, [pc, #532]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007752:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007756:	6113      	str	r3, [r2, #16]
 8007758:	4b83      	ldr	r3, [pc, #524]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800775a:	6919      	ldr	r1, [r3, #16]
 800775c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007760:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007764:	4a80      	ldr	r2, [pc, #512]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007766:	430b      	orrs	r3, r1
 8007768:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800776a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007778:	2300      	movs	r3, #0
 800777a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800777c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007786:	4b78      	ldr	r3, [pc, #480]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800778e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007794:	4a74      	ldr	r2, [pc, #464]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007796:	430b      	orrs	r3, r1
 8007798:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800779a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80077a8:	2300      	movs	r3, #0
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80077b0:	460b      	mov	r3, r1
 80077b2:	4313      	orrs	r3, r2
 80077b4:	d00a      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077b6:	4b6c      	ldr	r3, [pc, #432]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80077be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c6:	4a68      	ldr	r2, [pc, #416]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80077cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	2100      	movs	r1, #0
 80077d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077de:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80077e2:	460b      	mov	r3, r1
 80077e4:	4313      	orrs	r3, r2
 80077e6:	d011      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ec:	3308      	adds	r3, #8
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fb79 	bl	8007ee8 <RCCEx_PLL2_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80077fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007804:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007808:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800780c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	2100      	movs	r1, #0
 8007816:	6239      	str	r1, [r7, #32]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
 800781e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007822:	460b      	mov	r3, r1
 8007824:	4313      	orrs	r3, r2
 8007826:	d011      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800782c:	3308      	adds	r3, #8
 800782e:	2101      	movs	r1, #1
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fb59 	bl	8007ee8 <RCCEx_PLL2_Config>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800783c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007848:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800784c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	2100      	movs	r1, #0
 8007856:	61b9      	str	r1, [r7, #24]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	61fb      	str	r3, [r7, #28]
 800785e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	d011      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800786c:	3308      	adds	r3, #8
 800786e:	2102      	movs	r1, #2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fb39 	bl	8007ee8 <RCCEx_PLL2_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800787c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007884:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007888:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800788c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	2100      	movs	r1, #0
 8007896:	6139      	str	r1, [r7, #16]
 8007898:	f003 0308 	and.w	r3, r3, #8
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80078a2:	460b      	mov	r3, r1
 80078a4:	4313      	orrs	r3, r2
 80078a6:	d011      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ac:	3328      	adds	r3, #40	@ 0x28
 80078ae:	2100      	movs	r1, #0
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fbcb 	bl	800804c <RCCEx_PLL3_Config>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80078bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80078cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	2100      	movs	r1, #0
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d011      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ec:	3328      	adds	r3, #40	@ 0x28
 80078ee:	2101      	movs	r1, #1
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fbab 	bl	800804c <RCCEx_PLL3_Config>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80078fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007908:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800790c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	2100      	movs	r1, #0
 8007916:	6039      	str	r1, [r7, #0]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	607b      	str	r3, [r7, #4]
 800791e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d011      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800792c:	3328      	adds	r3, #40	@ 0x28
 800792e:	2102      	movs	r1, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fb8b 	bl	800804c <RCCEx_PLL3_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800793c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007948:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800794c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	e000      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
}
 800795a:	4618      	mov	r0, r3
 800795c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007960:	46bd      	mov	sp, r7
 8007962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400

0800796c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007970:	f7fe fde2 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b06      	ldr	r3, [pc, #24]	@ (8007990 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	091b      	lsrs	r3, r3, #4
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4904      	ldr	r1, [pc, #16]	@ (8007994 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	58024400 	.word	0x58024400
 8007994:	0800f420 	.word	0x0800f420

08007998 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007998:	b480      	push	{r7}
 800799a:	b089      	sub	sp, #36	@ 0x24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079a0:	4ba1      	ldr	r3, [pc, #644]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80079aa:	4b9f      	ldr	r3, [pc, #636]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ae:	0b1b      	lsrs	r3, r3, #12
 80079b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079b6:	4b9c      	ldr	r3, [pc, #624]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ba:	091b      	lsrs	r3, r3, #4
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80079c2:	4b99      	ldr	r3, [pc, #612]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c6:	08db      	lsrs	r3, r3, #3
 80079c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	fb02 f303 	mul.w	r3, r2, r3
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8111 	beq.w	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	f000 8083 	beq.w	8007af4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	f200 80a1 	bhi.w	8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d056      	beq.n	8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a02:	e099      	b.n	8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a04:	4b88      	ldr	r3, [pc, #544]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d02d      	beq.n	8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a10:	4b85      	ldr	r3, [pc, #532]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	4a84      	ldr	r2, [pc, #528]	@ (8007c2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a6a:	e087      	b.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aae:	e065      	b.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac2:	4b59      	ldr	r3, [pc, #356]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007af2:	e043      	b.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b06:	4b48      	ldr	r3, [pc, #288]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b36:	e021      	b.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4a:	4b37      	ldr	r3, [pc, #220]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	0a5b      	lsrs	r3, r3, #9
 8007b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba2:	ee17 2a90 	vmov	r2, s15
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007baa:	4b1f      	ldr	r3, [pc, #124]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bae:	0c1b      	lsrs	r3, r3, #16
 8007bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd0:	ee17 2a90 	vmov	r2, s15
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007bd8:	4b13      	ldr	r3, [pc, #76]	@ (8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	0e1b      	lsrs	r3, r3, #24
 8007bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bfe:	ee17 2a90 	vmov	r2, s15
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c06:	e008      	b.n	8007c1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	609a      	str	r2, [r3, #8]
}
 8007c1a:	bf00      	nop
 8007c1c:	3724      	adds	r7, #36	@ 0x24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	58024400 	.word	0x58024400
 8007c2c:	03d09000 	.word	0x03d09000
 8007c30:	46000000 	.word	0x46000000
 8007c34:	4c742400 	.word	0x4c742400
 8007c38:	4a742400 	.word	0x4a742400
 8007c3c:	4af42400 	.word	0x4af42400

08007c40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b089      	sub	sp, #36	@ 0x24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c48:	4ba1      	ldr	r3, [pc, #644]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c52:	4b9f      	ldr	r3, [pc, #636]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c56:	0d1b      	lsrs	r3, r3, #20
 8007c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	0a1b      	lsrs	r3, r3, #8
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c6a:	4b99      	ldr	r3, [pc, #612]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	08db      	lsrs	r3, r3, #3
 8007c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8111 	beq.w	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	f000 8083 	beq.w	8007d9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	f200 80a1 	bhi.w	8007de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d056      	beq.n	8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007caa:	e099      	b.n	8007de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cac:	4b88      	ldr	r3, [pc, #544]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d02d      	beq.n	8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb8:	4b85      	ldr	r3, [pc, #532]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	08db      	lsrs	r3, r3, #3
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	4a84      	ldr	r2, [pc, #528]	@ (8007ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d12:	e087      	b.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d26:	4b6a      	ldr	r3, [pc, #424]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d56:	e065      	b.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6a:	4b59      	ldr	r3, [pc, #356]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d9a:	e043      	b.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dae:	4b48      	ldr	r3, [pc, #288]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dde:	e021      	b.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df2:	4b37      	ldr	r3, [pc, #220]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e24:	4b2a      	ldr	r3, [pc, #168]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e28:	0a5b      	lsrs	r3, r3, #9
 8007e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4a:	ee17 2a90 	vmov	r2, s15
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e52:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	0c1b      	lsrs	r3, r3, #16
 8007e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e5c:	ee07 3a90 	vmov	s15, r3
 8007e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e78:	ee17 2a90 	vmov	r2, s15
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e80:	4b13      	ldr	r3, [pc, #76]	@ (8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	0e1b      	lsrs	r3, r3, #24
 8007e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea6:	ee17 2a90 	vmov	r2, s15
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007eae:	e008      	b.n	8007ec2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	609a      	str	r2, [r3, #8]
}
 8007ec2:	bf00      	nop
 8007ec4:	3724      	adds	r7, #36	@ 0x24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	03d09000 	.word	0x03d09000
 8007ed8:	46000000 	.word	0x46000000
 8007edc:	4c742400 	.word	0x4c742400
 8007ee0:	4a742400 	.word	0x4a742400
 8007ee4:	4af42400 	.word	0x4af42400

08007ee8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ef6:	4b53      	ldr	r3, [pc, #332]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d101      	bne.n	8007f06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e099      	b.n	800803a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f06:	4b4f      	ldr	r3, [pc, #316]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f12:	f7f9 ff9b 	bl	8001e4c <HAL_GetTick>
 8007f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f18:	e008      	b.n	8007f2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f1a:	f7f9 ff97 	bl	8001e4c <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e086      	b.n	800803a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f2c:	4b45      	ldr	r3, [pc, #276]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f0      	bne.n	8007f1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f38:	4b42      	ldr	r3, [pc, #264]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	031b      	lsls	r3, r3, #12
 8007f46:	493f      	ldr	r1, [pc, #252]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	025b      	lsls	r3, r3, #9
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	041b      	lsls	r3, r3, #16
 8007f6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	061b      	lsls	r3, r3, #24
 8007f78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f7c:	4931      	ldr	r1, [pc, #196]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f82:	4b30      	ldr	r3, [pc, #192]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	492d      	ldr	r1, [pc, #180]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f94:	4b2b      	ldr	r3, [pc, #172]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	f023 0220 	bic.w	r2, r3, #32
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	4928      	ldr	r1, [pc, #160]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fa6:	4b27      	ldr	r3, [pc, #156]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007faa:	4a26      	ldr	r2, [pc, #152]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	f023 0310 	bic.w	r3, r3, #16
 8007fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fb2:	4b24      	ldr	r3, [pc, #144]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fb6:	4b24      	ldr	r3, [pc, #144]	@ (8008048 <RCCEx_PLL2_Config+0x160>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	69d2      	ldr	r2, [r2, #28]
 8007fbe:	00d2      	lsls	r2, r2, #3
 8007fc0:	4920      	ldr	r1, [pc, #128]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fca:	4a1e      	ldr	r2, [pc, #120]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fcc:	f043 0310 	orr.w	r3, r3, #16
 8007fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	4a19      	ldr	r2, [pc, #100]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fe4:	e00f      	b.n	8008006 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d106      	bne.n	8007ffa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007fec:	4b15      	ldr	r3, [pc, #84]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	4a14      	ldr	r2, [pc, #80]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ff8:	e005      	b.n	8008006 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ffa:	4b12      	ldr	r3, [pc, #72]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	4a11      	ldr	r2, [pc, #68]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8008000:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008004:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008006:	4b0f      	ldr	r3, [pc, #60]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a0e      	ldr	r2, [pc, #56]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 800800c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008012:	f7f9 ff1b 	bl	8001e4c <HAL_GetTick>
 8008016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008018:	e008      	b.n	800802c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800801a:	f7f9 ff17 	bl	8001e4c <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b02      	cmp	r3, #2
 8008026:	d901      	bls.n	800802c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e006      	b.n	800803a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800802c:	4b05      	ldr	r3, [pc, #20]	@ (8008044 <RCCEx_PLL2_Config+0x15c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0f0      	beq.n	800801a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	58024400 	.word	0x58024400
 8008048:	ffff0007 	.word	0xffff0007

0800804c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800805a:	4b53      	ldr	r3, [pc, #332]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 800805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b03      	cmp	r3, #3
 8008064:	d101      	bne.n	800806a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e099      	b.n	800819e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800806a:	4b4f      	ldr	r3, [pc, #316]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a4e      	ldr	r2, [pc, #312]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008076:	f7f9 fee9 	bl	8001e4c <HAL_GetTick>
 800807a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800807c:	e008      	b.n	8008090 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800807e:	f7f9 fee5 	bl	8001e4c <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d901      	bls.n	8008090 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e086      	b.n	800819e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008090:	4b45      	ldr	r3, [pc, #276]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f0      	bne.n	800807e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800809c:	4b42      	ldr	r3, [pc, #264]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 800809e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	051b      	lsls	r3, r3, #20
 80080aa:	493f      	ldr	r1, [pc, #252]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	3b01      	subs	r3, #1
 80080c0:	025b      	lsls	r3, r3, #9
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	3b01      	subs	r3, #1
 80080da:	061b      	lsls	r3, r3, #24
 80080dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080e0:	4931      	ldr	r1, [pc, #196]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080e6:	4b30      	ldr	r3, [pc, #192]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 80080e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	492d      	ldr	r1, [pc, #180]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80080f8:	4b2b      	ldr	r3, [pc, #172]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	4928      	ldr	r1, [pc, #160]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800810a:	4b27      	ldr	r3, [pc, #156]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	4a26      	ldr	r2, [pc, #152]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008114:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008116:	4b24      	ldr	r3, [pc, #144]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800811a:	4b24      	ldr	r3, [pc, #144]	@ (80081ac <RCCEx_PLL3_Config+0x160>)
 800811c:	4013      	ands	r3, r2
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	69d2      	ldr	r2, [r2, #28]
 8008122:	00d2      	lsls	r2, r2, #3
 8008124:	4920      	ldr	r1, [pc, #128]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008126:	4313      	orrs	r3, r2
 8008128:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800812a:	4b1f      	ldr	r3, [pc, #124]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812e:	4a1e      	ldr	r2, [pc, #120]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008134:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800813c:	4b1a      	ldr	r3, [pc, #104]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 800813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008140:	4a19      	ldr	r2, [pc, #100]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008142:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008146:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008148:	e00f      	b.n	800816a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d106      	bne.n	800815e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008150:	4b15      	ldr	r3, [pc, #84]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	4a14      	ldr	r2, [pc, #80]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008156:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800815a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800815c:	e005      	b.n	800816a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800815e:	4b12      	ldr	r3, [pc, #72]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	4a11      	ldr	r2, [pc, #68]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008164:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008168:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800816a:	4b0f      	ldr	r3, [pc, #60]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a0e      	ldr	r2, [pc, #56]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008176:	f7f9 fe69 	bl	8001e4c <HAL_GetTick>
 800817a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800817c:	e008      	b.n	8008190 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800817e:	f7f9 fe65 	bl	8001e4c <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b02      	cmp	r3, #2
 800818a:	d901      	bls.n	8008190 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e006      	b.n	800819e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <RCCEx_PLL3_Config+0x15c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0f0      	beq.n	800817e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	58024400 	.word	0x58024400
 80081ac:	ffff0007 	.word	0xffff0007

080081b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e10f      	b.n	80083e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a87      	ldr	r2, [pc, #540]	@ (80083ec <HAL_SPI_Init+0x23c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00f      	beq.n	80081f2 <HAL_SPI_Init+0x42>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a86      	ldr	r2, [pc, #536]	@ (80083f0 <HAL_SPI_Init+0x240>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00a      	beq.n	80081f2 <HAL_SPI_Init+0x42>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a84      	ldr	r2, [pc, #528]	@ (80083f4 <HAL_SPI_Init+0x244>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d005      	beq.n	80081f2 <HAL_SPI_Init+0x42>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	2b0f      	cmp	r3, #15
 80081ec:	d901      	bls.n	80081f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e0f7      	b.n	80083e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fbba 	bl	800896c <SPI_GetPacketSize>
 80081f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a7b      	ldr	r2, [pc, #492]	@ (80083ec <HAL_SPI_Init+0x23c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00c      	beq.n	800821e <HAL_SPI_Init+0x6e>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a79      	ldr	r2, [pc, #484]	@ (80083f0 <HAL_SPI_Init+0x240>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <HAL_SPI_Init+0x6e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a78      	ldr	r2, [pc, #480]	@ (80083f4 <HAL_SPI_Init+0x244>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d002      	beq.n	800821e <HAL_SPI_Init+0x6e>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b08      	cmp	r3, #8
 800821c:	d811      	bhi.n	8008242 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008222:	4a72      	ldr	r2, [pc, #456]	@ (80083ec <HAL_SPI_Init+0x23c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d009      	beq.n	800823c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a70      	ldr	r2, [pc, #448]	@ (80083f0 <HAL_SPI_Init+0x240>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <HAL_SPI_Init+0x8c>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a6f      	ldr	r2, [pc, #444]	@ (80083f4 <HAL_SPI_Init+0x244>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d104      	bne.n	8008246 <HAL_SPI_Init+0x96>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b10      	cmp	r3, #16
 8008240:	d901      	bls.n	8008246 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e0cd      	b.n	80083e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7f8 ffc2 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008282:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800828c:	d119      	bne.n	80082c2 <HAL_SPI_Init+0x112>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008296:	d103      	bne.n	80082a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10c      	bne.n	80082c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80082ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082b0:	d107      	bne.n	80082c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00f      	beq.n	80082ee <HAL_SPI_Init+0x13e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	d90b      	bls.n	80082ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	e007      	b.n	80082fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008306:	431a      	orrs	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008310:	ea42 0103 	orr.w	r1, r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800835e:	ea42 0103 	orr.w	r1, r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d113      	bne.n	800839e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008388:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800839c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40013000 	.word	0x40013000
 80083f0:	40003800 	.word	0x40003800
 80083f4:	40003c00 	.word	0x40003c00

080083f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	@ 0x28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4013      	ands	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008420:	2300      	movs	r3, #0
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800842a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3330      	adds	r3, #48	@ 0x30
 8008432:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800843a:	2b00      	cmp	r3, #0
 800843c:	d010      	beq.n	8008460 <HAL_SPI_IRQHandler+0x68>
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008456:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f9c3 	bl	80087e4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800845e:	e192      	b.n	8008786 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d113      	bne.n	8008492 <HAL_SPI_IRQHandler+0x9a>
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10e      	bne.n	8008492 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
    handled = 1UL;
 800848e:	2301      	movs	r3, #1
 8008490:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10f      	bne.n	80084bc <HAL_SPI_IRQHandler+0xc4>
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d105      	bne.n	80084bc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
    handled = 1UL;
 80084b8:	2301      	movs	r3, #1
 80084ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10f      	bne.n	80084e6 <HAL_SPI_IRQHandler+0xee>
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d105      	bne.n	80084e6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
    handled = 1UL;
 80084e2:	2301      	movs	r3, #1
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f040 8147 	bne.w	800877c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 808b 	beq.w	8008610 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0208 	orr.w	r2, r2, #8
 8008508:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0210 	orr.w	r2, r2, #16
 8008518:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	699a      	ldr	r2, [r3, #24]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008528:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0208 	bic.w	r2, r2, #8
 8008538:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d13d      	bne.n	80085c4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008548:	e036      	b.n	80085b8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b0f      	cmp	r3, #15
 8008550:	d90b      	bls.n	800856a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800855a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800855c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	665a      	str	r2, [r3, #100]	@ 0x64
 8008568:	e01d      	b.n	80085a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2b07      	cmp	r3, #7
 8008570:	d90b      	bls.n	800858a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	8812      	ldrh	r2, [r2, #0]
 800857a:	b292      	uxth	r2, r2
 800857c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	665a      	str	r2, [r3, #100]	@ 0x64
 8008588:	e00d      	b.n	80085a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	b2d2      	uxtb	r2, r2
 800859a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1c2      	bne.n	800854a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f931 	bl	800882c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f8f7 	bl	80087d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80085e2:	e0d0      	b.n	8008786 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80085e4:	7cfb      	ldrb	r3, [r7, #19]
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	d103      	bne.n	80085f2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8e6 	bl	80087bc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80085f0:	e0c6      	b.n	8008780 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80085f2:	7cfb      	ldrb	r3, [r7, #19]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d103      	bne.n	8008600 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8d5 	bl	80087a8 <HAL_SPI_RxCpltCallback>
    return;
 80085fe:	e0bf      	b.n	8008780 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008600:	7cfb      	ldrb	r3, [r7, #19]
 8008602:	2b03      	cmp	r3, #3
 8008604:	f040 80bc 	bne.w	8008780 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f8c3 	bl	8008794 <HAL_SPI_TxCpltCallback>
    return;
 800860e:	e0b7      	b.n	8008780 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80b5 	beq.w	8008786 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00f      	beq.n	8008646 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800862c:	f043 0204 	orr.w	r2, r3, #4
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008644:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00f      	beq.n	8008670 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008656:	f043 0201 	orr.w	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800866e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00f      	beq.n	800869a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008680:	f043 0208 	orr.w	r2, r3, #8
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008698:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00f      	beq.n	80086c4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0220 	orr.w	r2, r2, #32
 80086c2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d05a      	beq.n	8008784 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0201 	bic.w	r2, r2, #1
 80086dc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6919      	ldr	r1, [r3, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	4b28      	ldr	r3, [pc, #160]	@ (800878c <HAL_SPI_IRQHandler+0x394>)
 80086ea:	400b      	ands	r3, r1
 80086ec:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80086f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80086f8:	d138      	bne.n	800876c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008708:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d013      	beq.n	800873a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008716:	4a1e      	ldr	r2, [pc, #120]	@ (8008790 <HAL_SPI_IRQHandler+0x398>)
 8008718:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800871e:	4618      	mov	r0, r3
 8008720:	f7fa fe62 	bl	80033e8 <HAL_DMA_Abort_IT>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008730:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800873e:	2b00      	cmp	r3, #0
 8008740:	d020      	beq.n	8008784 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008746:	4a12      	ldr	r2, [pc, #72]	@ (8008790 <HAL_SPI_IRQHandler+0x398>)
 8008748:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800874e:	4618      	mov	r0, r3
 8008750:	f7fa fe4a 	bl	80033e8 <HAL_DMA_Abort_IT>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d014      	beq.n	8008784 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008760:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800876a:	e00b      	b.n	8008784 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f82b 	bl	80087d0 <HAL_SPI_ErrorCallback>
    return;
 800877a:	e003      	b.n	8008784 <HAL_SPI_IRQHandler+0x38c>
    return;
 800877c:	bf00      	nop
 800877e:	e002      	b.n	8008786 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008780:	bf00      	nop
 8008782:	e000      	b.n	8008786 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008784:	bf00      	nop
  }
}
 8008786:	3728      	adds	r7, #40	@ 0x28
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	fffffc94 	.word	0xfffffc94
 8008790:	080087f9 	.word	0x080087f9

08008794 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008804:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f7ff ffd6 	bl	80087d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0208 	orr.w	r2, r2, #8
 800884a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0210 	orr.w	r2, r2, #16
 800885a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0201 	bic.w	r2, r2, #1
 800886a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6919      	ldr	r1, [r3, #16]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	4b3c      	ldr	r3, [pc, #240]	@ (8008968 <SPI_CloseTransfer+0x13c>)
 8008878:	400b      	ands	r3, r1
 800887a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800888a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b04      	cmp	r3, #4
 8008896:	d014      	beq.n	80088c2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00f      	beq.n	80088c2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0220 	orr.w	r2, r2, #32
 80088c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d014      	beq.n	80088f8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00f      	beq.n	80088f8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088de:	f043 0204 	orr.w	r2, r3, #4
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008908:	f043 0201 	orr.w	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699a      	ldr	r2, [r3, #24]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008920:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00f      	beq.n	800894c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008932:	f043 0208 	orr.w	r2, r3, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800894a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	fffffc90 	.word	0xfffffc90

0800896c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	3307      	adds	r3, #7
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	fb02 f303 	mul.w	r3, r2, r3
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e042      	b.n	8008a3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f8 ffa8 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2224      	movs	r2, #36	@ 0x24
 80089d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0201 	bic.w	r2, r2, #1
 80089e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 fcad 	bl	800a34c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fe3e 	bl	8009674 <UART_SetConfig>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e01b      	b.n	8008a3a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0201 	orr.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 fd2c 	bl	800a490 <UART_CheckIdleState>
 8008a38:	4603      	mov	r3, r0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b08a      	sub	sp, #40	@ 0x28
 8008a46:	af02      	add	r7, sp, #8
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d17b      	bne.n	8008b54 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_UART_Transmit+0x26>
 8008a62:	88fb      	ldrh	r3, [r7, #6]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e074      	b.n	8008b56 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2221      	movs	r2, #33	@ 0x21
 8008a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a7c:	f7f9 f9e6 	bl	8001e4c <HAL_GetTick>
 8008a80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a9a:	d108      	bne.n	8008aae <HAL_UART_Transmit+0x6c>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e003      	b.n	8008ab6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ab6:	e030      	b.n	8008b1a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2180      	movs	r1, #128	@ 0x80
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f001 fd8e 	bl	800a5e4 <UART_WaitOnFlagUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e03d      	b.n	8008b56 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	3302      	adds	r3, #2
 8008af4:	61bb      	str	r3, [r7, #24]
 8008af6:	e007      	b.n	8008b08 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1c8      	bne.n	8008ab8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2140      	movs	r1, #64	@ 0x40
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f001 fd57 	bl	800a5e4 <UART_WaitOnFlagUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e006      	b.n	8008b56 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e000      	b.n	8008b56 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
  }
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3720      	adds	r7, #32
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	@ 0x28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d137      	bne.n	8008be8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <HAL_UART_Receive_IT+0x24>
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e030      	b.n	8008bea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <HAL_UART_Receive_IT+0x94>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d01f      	beq.n	8008bd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d018      	beq.n	8008bd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	623b      	str	r3, [r7, #32]
 8008bc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	69f9      	ldr	r1, [r7, #28]
 8008bca:	6a3a      	ldr	r2, [r7, #32]
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e6      	bne.n	8008ba6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f001 fd6e 	bl	800a6c0 <UART_Start_Receive_IT>
 8008be4:	4603      	mov	r3, r0
 8008be6:	e000      	b.n	8008bea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008be8:	2302      	movs	r3, #2
  }
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3728      	adds	r7, #40	@ 0x28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	58000c00 	.word	0x58000c00

08008bf8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	@ 0x28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	4613      	mov	r3, r2
 8008c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d167      	bne.n	8008ce0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <HAL_UART_Transmit_DMA+0x24>
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e060      	b.n	8008ce2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	88fa      	ldrh	r2, [r7, #6]
 8008c2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	88fa      	ldrh	r2, [r7, #6]
 8008c32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2221      	movs	r2, #33	@ 0x21
 8008c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d028      	beq.n	8008ca0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c52:	4a26      	ldr	r2, [pc, #152]	@ (8008cec <HAL_UART_Transmit_DMA+0xf4>)
 8008c54:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c5a:	4a25      	ldr	r2, [pc, #148]	@ (8008cf0 <HAL_UART_Transmit_DMA+0xf8>)
 8008c5c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c62:	4a24      	ldr	r2, [pc, #144]	@ (8008cf4 <HAL_UART_Transmit_DMA+0xfc>)
 8008c64:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c76:	4619      	mov	r1, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3328      	adds	r3, #40	@ 0x28
 8008c7e:	461a      	mov	r2, r3
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	f7f9 fe29 	bl	80028d8 <HAL_DMA_Start_IT>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d009      	beq.n	8008ca0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2210      	movs	r2, #16
 8008c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e020      	b.n	8008ce2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2240      	movs	r2, #64	@ 0x40
 8008ca6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3308      	adds	r3, #8
 8008cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cc8:	623a      	str	r2, [r7, #32]
 8008cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	69f9      	ldr	r1, [r7, #28]
 8008cce:	6a3a      	ldr	r2, [r7, #32]
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e5      	bne.n	8008ca8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e000      	b.n	8008ce2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008ce0:	2302      	movs	r3, #2
  }
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3728      	adds	r7, #40	@ 0x28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	0800aba1 	.word	0x0800aba1
 8008cf0:	0800ac37 	.word	0x0800ac37
 8008cf4:	0800adb9 	.word	0x0800adb9

08008cf8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b09a      	sub	sp, #104	@ 0x68
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d14:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d44:	4b46      	ldr	r3, [pc, #280]	@ (8008e60 <HAL_UART_AbortReceive+0x168>)
 8008d46:	4013      	ands	r3, r2
 8008d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d52:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d118      	bne.n	8008da0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f023 0310 	bic.w	r3, r3, #16
 8008d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d8e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e6      	bne.n	8008d6e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008daa:	2b40      	cmp	r3, #64	@ 0x40
 8008dac:	d13b      	bne.n	8008e26 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dce:	61ba      	str	r2, [r7, #24]
 8008dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6979      	ldr	r1, [r7, #20]
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	613b      	str	r3, [r7, #16]
   return(result);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e5      	bne.n	8008dae <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01c      	beq.n	8008e26 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df2:	2200      	movs	r2, #0
 8008df4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7f9 ffd5 	bl	8002dac <HAL_DMA_Abort>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00e      	beq.n	8008e26 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fb fc92 	bl	8004738 <HAL_DMA_GetError>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	d105      	bne.n	8008e26 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e017      	b.n	8008e56 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	220f      	movs	r2, #15
 8008e34:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	699a      	ldr	r2, [r3, #24]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f042 0208 	orr.w	r2, r2, #8
 8008e44:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3768      	adds	r7, #104	@ 0x68
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	effffffe 	.word	0xeffffffe

08008e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b0ba      	sub	sp, #232	@ 0xe8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008e8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008e92:	4013      	ands	r3, r2
 8008e94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d11b      	bne.n	8008ed8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d015      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 8393 	beq.w	80095f4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
      }
      return;
 8008ed6:	e38d      	b.n	80095f4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8123 	beq.w	8009128 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ee2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800911c <HAL_UART_IRQHandler+0x2b8>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d106      	bne.n	8008efc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008ef2:	4b8b      	ldr	r3, [pc, #556]	@ (8009120 <HAL_UART_IRQHandler+0x2bc>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 8116 	beq.w	8009128 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d011      	beq.n	8008f2c <HAL_UART_IRQHandler+0xc8>
 8008f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00b      	beq.n	8008f2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f22:	f043 0201 	orr.w	r2, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d011      	beq.n	8008f5c <HAL_UART_IRQHandler+0xf8>
 8008f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f52:	f043 0204 	orr.w	r2, r3, #4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d011      	beq.n	8008f8c <HAL_UART_IRQHandler+0x128>
 8008f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2204      	movs	r2, #4
 8008f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f82:	f043 0202 	orr.w	r2, r3, #2
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d017      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008fa8:	4b5c      	ldr	r3, [pc, #368]	@ (800911c <HAL_UART_IRQHandler+0x2b8>)
 8008faa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fbe:	f043 0208 	orr.w	r2, r3, #8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d012      	beq.n	8008ffa <HAL_UART_IRQHandler+0x196>
 8008fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff0:	f043 0220 	orr.w	r2, r3, #32
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 82f9 	beq.w	80095f8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d013      	beq.n	800903a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d105      	bne.n	800902a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800901e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009040:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904e:	2b40      	cmp	r3, #64	@ 0x40
 8009050:	d005      	beq.n	800905e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009056:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800905a:	2b00      	cmp	r3, #0
 800905c:	d054      	beq.n	8009108 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fd38 	bl	800aad4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906e:	2b40      	cmp	r3, #64	@ 0x40
 8009070:	d146      	bne.n	8009100 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009088:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800908c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3308      	adds	r3, #8
 800909a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800909e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1d9      	bne.n	8009072 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d017      	beq.n	80090f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ce:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <HAL_UART_IRQHandler+0x2c0>)
 80090d0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fa f985 	bl	80033e8 <HAL_DMA_Abort_IT>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d019      	beq.n	8009118 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80090f2:	4610      	mov	r0, r2
 80090f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f6:	e00f      	b.n	8009118 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fab1 	bl	8009660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090fe:	e00b      	b.n	8009118 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 faad 	bl	8009660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009106:	e007      	b.n	8009118 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 faa9 	bl	8009660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009116:	e26f      	b.n	80095f8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009118:	bf00      	nop
    return;
 800911a:	e26d      	b.n	80095f8 <HAL_UART_IRQHandler+0x794>
 800911c:	10000001 	.word	0x10000001
 8009120:	04000120 	.word	0x04000120
 8009124:	0800ae39 	.word	0x0800ae39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800912c:	2b01      	cmp	r3, #1
 800912e:	f040 8203 	bne.w	8009538 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009136:	f003 0310 	and.w	r3, r3, #16
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 81fc 	beq.w	8009538 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 81f5 	beq.w	8009538 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2210      	movs	r2, #16
 8009154:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009160:	2b40      	cmp	r3, #64	@ 0x40
 8009162:	f040 816d 	bne.w	8009440 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4aa4      	ldr	r2, [pc, #656]	@ (8009400 <HAL_UART_IRQHandler+0x59c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d068      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4aa1      	ldr	r2, [pc, #644]	@ (8009404 <HAL_UART_IRQHandler+0x5a0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d061      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a9f      	ldr	r2, [pc, #636]	@ (8009408 <HAL_UART_IRQHandler+0x5a4>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d05a      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a9c      	ldr	r2, [pc, #624]	@ (800940c <HAL_UART_IRQHandler+0x5a8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d053      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a9a      	ldr	r2, [pc, #616]	@ (8009410 <HAL_UART_IRQHandler+0x5ac>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d04c      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a97      	ldr	r2, [pc, #604]	@ (8009414 <HAL_UART_IRQHandler+0x5b0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d045      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a95      	ldr	r2, [pc, #596]	@ (8009418 <HAL_UART_IRQHandler+0x5b4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d03e      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a92      	ldr	r2, [pc, #584]	@ (800941c <HAL_UART_IRQHandler+0x5b8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d037      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a90      	ldr	r2, [pc, #576]	@ (8009420 <HAL_UART_IRQHandler+0x5bc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d030      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a8d      	ldr	r2, [pc, #564]	@ (8009424 <HAL_UART_IRQHandler+0x5c0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d029      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a8b      	ldr	r2, [pc, #556]	@ (8009428 <HAL_UART_IRQHandler+0x5c4>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d022      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a88      	ldr	r2, [pc, #544]	@ (800942c <HAL_UART_IRQHandler+0x5c8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d01b      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a86      	ldr	r2, [pc, #536]	@ (8009430 <HAL_UART_IRQHandler+0x5cc>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d014      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a83      	ldr	r2, [pc, #524]	@ (8009434 <HAL_UART_IRQHandler+0x5d0>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d00d      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a81      	ldr	r2, [pc, #516]	@ (8009438 <HAL_UART_IRQHandler+0x5d4>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d006      	beq.n	8009246 <HAL_UART_IRQHandler+0x3e2>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a7e      	ldr	r2, [pc, #504]	@ (800943c <HAL_UART_IRQHandler+0x5d8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d106      	bne.n	8009254 <HAL_UART_IRQHandler+0x3f0>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	b29b      	uxth	r3, r3
 8009252:	e005      	b.n	8009260 <HAL_UART_IRQHandler+0x3fc>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 80ad 	beq.w	80093c8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009274:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009278:	429a      	cmp	r2, r3
 800927a:	f080 80a5 	bcs.w	80093c8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009284:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009294:	f000 8087 	beq.w	80093a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1da      	bne.n	8009298 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009306:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800930a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800930e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e1      	bne.n	80092e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800932e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3308      	adds	r3, #8
 800933e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009342:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009344:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009348:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e3      	bne.n	800931e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009374:	f023 0310 	bic.w	r3, r3, #16
 8009378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009386:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009388:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800938c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e4      	bne.n	8009364 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7f9 fd03 	bl	8002dac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7f7 fd8f 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80093c6:	e119      	b.n	80095fc <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093d2:	429a      	cmp	r2, r3
 80093d4:	f040 8112 	bne.w	80095fc <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e4:	f040 810a 	bne.w	80095fc <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7f7 fd74 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
      return;
 80093fc:	e0fe      	b.n	80095fc <HAL_UART_IRQHandler+0x798>
 80093fe:	bf00      	nop
 8009400:	40020010 	.word	0x40020010
 8009404:	40020028 	.word	0x40020028
 8009408:	40020040 	.word	0x40020040
 800940c:	40020058 	.word	0x40020058
 8009410:	40020070 	.word	0x40020070
 8009414:	40020088 	.word	0x40020088
 8009418:	400200a0 	.word	0x400200a0
 800941c:	400200b8 	.word	0x400200b8
 8009420:	40020410 	.word	0x40020410
 8009424:	40020428 	.word	0x40020428
 8009428:	40020440 	.word	0x40020440
 800942c:	40020458 	.word	0x40020458
 8009430:	40020470 	.word	0x40020470
 8009434:	40020488 	.word	0x40020488
 8009438:	400204a0 	.word	0x400204a0
 800943c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800944c:	b29b      	uxth	r3, r3
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800945a:	b29b      	uxth	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 80cf 	beq.w	8009600 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80ca 	beq.w	8009600 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800947a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800948e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009490:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800949c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e4      	bne.n	800946c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3308      	adds	r3, #8
 80094a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	623b      	str	r3, [r7, #32]
   return(result);
 80094b2:	6a3a      	ldr	r2, [r7, #32]
 80094b4:	4b55      	ldr	r3, [pc, #340]	@ (800960c <HAL_UART_IRQHandler+0x7a8>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3308      	adds	r3, #8
 80094c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80094c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e3      	bne.n	80094a2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0310 	bic.w	r3, r3, #16
 8009502:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009510:	61fb      	str	r3, [r7, #28]
 8009512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	69b9      	ldr	r1, [r7, #24]
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	617b      	str	r3, [r7, #20]
   return(result);
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e4      	bne.n	80094ee <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800952a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7f7 fcd7 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009536:	e063      	b.n	8009600 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800953c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00e      	beq.n	8009562 <HAL_UART_IRQHandler+0x6fe>
 8009544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009558:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f002 f9ca 	bl	800b8f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009560:	e051      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956a:	2b00      	cmp	r3, #0
 800956c:	d014      	beq.n	8009598 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800956e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800957a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800957e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d008      	beq.n	8009598 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800958a:	2b00      	cmp	r3, #0
 800958c:	d03a      	beq.n	8009604 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	4798      	blx	r3
    }
    return;
 8009596:	e035      	b.n	8009604 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800959c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d009      	beq.n	80095b8 <HAL_UART_IRQHandler+0x754>
 80095a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f001 fc53 	bl	800ae5c <UART_EndTransmit_IT>
    return;
 80095b6:	e026      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d009      	beq.n	80095d8 <HAL_UART_IRQHandler+0x774>
 80095c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d003      	beq.n	80095d8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f002 f9a3 	bl	800b91c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095d6:	e016      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <HAL_UART_IRQHandler+0x7a2>
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da0c      	bge.n	8009606 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f002 f98b 	bl	800b908 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095f2:	e008      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
      return;
 80095f4:	bf00      	nop
 80095f6:	e006      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
    return;
 80095f8:	bf00      	nop
 80095fa:	e004      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
      return;
 80095fc:	bf00      	nop
 80095fe:	e002      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009600:	bf00      	nop
 8009602:	e000      	b.n	8009606 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009604:	bf00      	nop
  }
}
 8009606:	37e8      	adds	r7, #232	@ 0xe8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	effffffe 	.word	0xeffffffe

08009610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009678:	b092      	sub	sp, #72	@ 0x48
 800967a:	af00      	add	r7, sp, #0
 800967c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	431a      	orrs	r2, r3
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	431a      	orrs	r2, r3
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	4313      	orrs	r3, r2
 800969a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4bbe      	ldr	r3, [pc, #760]	@ (800999c <UART_SetConfig+0x328>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	6812      	ldr	r2, [r2, #0]
 80096aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096ac:	430b      	orrs	r3, r1
 80096ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4ab3      	ldr	r2, [pc, #716]	@ (80099a0 <UART_SetConfig+0x32c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d004      	beq.n	80096e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096dc:	4313      	orrs	r3, r2
 80096de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	4baf      	ldr	r3, [pc, #700]	@ (80099a4 <UART_SetConfig+0x330>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	6812      	ldr	r2, [r2, #0]
 80096ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096f0:	430b      	orrs	r3, r1
 80096f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fa:	f023 010f 	bic.w	r1, r3, #15
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4aa6      	ldr	r2, [pc, #664]	@ (80099a8 <UART_SetConfig+0x334>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d177      	bne.n	8009804 <UART_SetConfig+0x190>
 8009714:	4ba5      	ldr	r3, [pc, #660]	@ (80099ac <UART_SetConfig+0x338>)
 8009716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800971c:	2b28      	cmp	r3, #40	@ 0x28
 800971e:	d86d      	bhi.n	80097fc <UART_SetConfig+0x188>
 8009720:	a201      	add	r2, pc, #4	@ (adr r2, 8009728 <UART_SetConfig+0xb4>)
 8009722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009726:	bf00      	nop
 8009728:	080097cd 	.word	0x080097cd
 800972c:	080097fd 	.word	0x080097fd
 8009730:	080097fd 	.word	0x080097fd
 8009734:	080097fd 	.word	0x080097fd
 8009738:	080097fd 	.word	0x080097fd
 800973c:	080097fd 	.word	0x080097fd
 8009740:	080097fd 	.word	0x080097fd
 8009744:	080097fd 	.word	0x080097fd
 8009748:	080097d5 	.word	0x080097d5
 800974c:	080097fd 	.word	0x080097fd
 8009750:	080097fd 	.word	0x080097fd
 8009754:	080097fd 	.word	0x080097fd
 8009758:	080097fd 	.word	0x080097fd
 800975c:	080097fd 	.word	0x080097fd
 8009760:	080097fd 	.word	0x080097fd
 8009764:	080097fd 	.word	0x080097fd
 8009768:	080097dd 	.word	0x080097dd
 800976c:	080097fd 	.word	0x080097fd
 8009770:	080097fd 	.word	0x080097fd
 8009774:	080097fd 	.word	0x080097fd
 8009778:	080097fd 	.word	0x080097fd
 800977c:	080097fd 	.word	0x080097fd
 8009780:	080097fd 	.word	0x080097fd
 8009784:	080097fd 	.word	0x080097fd
 8009788:	080097e5 	.word	0x080097e5
 800978c:	080097fd 	.word	0x080097fd
 8009790:	080097fd 	.word	0x080097fd
 8009794:	080097fd 	.word	0x080097fd
 8009798:	080097fd 	.word	0x080097fd
 800979c:	080097fd 	.word	0x080097fd
 80097a0:	080097fd 	.word	0x080097fd
 80097a4:	080097fd 	.word	0x080097fd
 80097a8:	080097ed 	.word	0x080097ed
 80097ac:	080097fd 	.word	0x080097fd
 80097b0:	080097fd 	.word	0x080097fd
 80097b4:	080097fd 	.word	0x080097fd
 80097b8:	080097fd 	.word	0x080097fd
 80097bc:	080097fd 	.word	0x080097fd
 80097c0:	080097fd 	.word	0x080097fd
 80097c4:	080097fd 	.word	0x080097fd
 80097c8:	080097f5 	.word	0x080097f5
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e326      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80097d4:	2304      	movs	r3, #4
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e322      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80097dc:	2308      	movs	r3, #8
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e31e      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80097e4:	2310      	movs	r3, #16
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e31a      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80097ec:	2320      	movs	r3, #32
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e316      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80097f4:	2340      	movs	r3, #64	@ 0x40
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e312      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80097fc:	2380      	movs	r3, #128	@ 0x80
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e30e      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a69      	ldr	r2, [pc, #420]	@ (80099b0 <UART_SetConfig+0x33c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d130      	bne.n	8009870 <UART_SetConfig+0x1fc>
 800980e:	4b67      	ldr	r3, [pc, #412]	@ (80099ac <UART_SetConfig+0x338>)
 8009810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	2b05      	cmp	r3, #5
 8009818:	d826      	bhi.n	8009868 <UART_SetConfig+0x1f4>
 800981a:	a201      	add	r2, pc, #4	@ (adr r2, 8009820 <UART_SetConfig+0x1ac>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009839 	.word	0x08009839
 8009824:	08009841 	.word	0x08009841
 8009828:	08009849 	.word	0x08009849
 800982c:	08009851 	.word	0x08009851
 8009830:	08009859 	.word	0x08009859
 8009834:	08009861 	.word	0x08009861
 8009838:	2300      	movs	r3, #0
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e2f0      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e2ec      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e2e8      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e2e4      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e2e0      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009860:	2340      	movs	r3, #64	@ 0x40
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e2dc      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009868:	2380      	movs	r3, #128	@ 0x80
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e2d8      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a4f      	ldr	r2, [pc, #316]	@ (80099b4 <UART_SetConfig+0x340>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d130      	bne.n	80098dc <UART_SetConfig+0x268>
 800987a:	4b4c      	ldr	r3, [pc, #304]	@ (80099ac <UART_SetConfig+0x338>)
 800987c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b05      	cmp	r3, #5
 8009884:	d826      	bhi.n	80098d4 <UART_SetConfig+0x260>
 8009886:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <UART_SetConfig+0x218>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098a5 	.word	0x080098a5
 8009890:	080098ad 	.word	0x080098ad
 8009894:	080098b5 	.word	0x080098b5
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e2ba      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80098ac:	2304      	movs	r3, #4
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e2b6      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80098b4:	2308      	movs	r3, #8
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e2b2      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e2ae      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80098c4:	2320      	movs	r3, #32
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e2aa      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80098cc:	2340      	movs	r3, #64	@ 0x40
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e2a6      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80098d4:	2380      	movs	r3, #128	@ 0x80
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e2a2      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a35      	ldr	r2, [pc, #212]	@ (80099b8 <UART_SetConfig+0x344>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d130      	bne.n	8009948 <UART_SetConfig+0x2d4>
 80098e6:	4b31      	ldr	r3, [pc, #196]	@ (80099ac <UART_SetConfig+0x338>)
 80098e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d826      	bhi.n	8009940 <UART_SetConfig+0x2cc>
 80098f2:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <UART_SetConfig+0x284>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	08009911 	.word	0x08009911
 80098fc:	08009919 	.word	0x08009919
 8009900:	08009921 	.word	0x08009921
 8009904:	08009929 	.word	0x08009929
 8009908:	08009931 	.word	0x08009931
 800990c:	08009939 	.word	0x08009939
 8009910:	2300      	movs	r3, #0
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e284      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e280      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e27c      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e278      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009930:	2320      	movs	r3, #32
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e274      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009938:	2340      	movs	r3, #64	@ 0x40
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e270      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009940:	2380      	movs	r3, #128	@ 0x80
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e26c      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a1b      	ldr	r2, [pc, #108]	@ (80099bc <UART_SetConfig+0x348>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d142      	bne.n	80099d8 <UART_SetConfig+0x364>
 8009952:	4b16      	ldr	r3, [pc, #88]	@ (80099ac <UART_SetConfig+0x338>)
 8009954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b05      	cmp	r3, #5
 800995c:	d838      	bhi.n	80099d0 <UART_SetConfig+0x35c>
 800995e:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <UART_SetConfig+0x2f0>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	0800997d 	.word	0x0800997d
 8009968:	08009985 	.word	0x08009985
 800996c:	0800998d 	.word	0x0800998d
 8009970:	08009995 	.word	0x08009995
 8009974:	080099c1 	.word	0x080099c1
 8009978:	080099c9 	.word	0x080099c9
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e24e      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009984:	2304      	movs	r3, #4
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e24a      	b.n	8009e22 <UART_SetConfig+0x7ae>
 800998c:	2308      	movs	r3, #8
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e246      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009994:	2310      	movs	r3, #16
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e242      	b.n	8009e22 <UART_SetConfig+0x7ae>
 800999c:	cfff69f3 	.word	0xcfff69f3
 80099a0:	58000c00 	.word	0x58000c00
 80099a4:	11fff4ff 	.word	0x11fff4ff
 80099a8:	40011000 	.word	0x40011000
 80099ac:	58024400 	.word	0x58024400
 80099b0:	40004400 	.word	0x40004400
 80099b4:	40004800 	.word	0x40004800
 80099b8:	40004c00 	.word	0x40004c00
 80099bc:	40005000 	.word	0x40005000
 80099c0:	2320      	movs	r3, #32
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c6:	e22c      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80099c8:	2340      	movs	r3, #64	@ 0x40
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e228      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80099d0:	2380      	movs	r3, #128	@ 0x80
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e224      	b.n	8009e22 <UART_SetConfig+0x7ae>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4ab1      	ldr	r2, [pc, #708]	@ (8009ca4 <UART_SetConfig+0x630>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d176      	bne.n	8009ad0 <UART_SetConfig+0x45c>
 80099e2:	4bb1      	ldr	r3, [pc, #708]	@ (8009ca8 <UART_SetConfig+0x634>)
 80099e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099ea:	2b28      	cmp	r3, #40	@ 0x28
 80099ec:	d86c      	bhi.n	8009ac8 <UART_SetConfig+0x454>
 80099ee:	a201      	add	r2, pc, #4	@ (adr r2, 80099f4 <UART_SetConfig+0x380>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a99 	.word	0x08009a99
 80099f8:	08009ac9 	.word	0x08009ac9
 80099fc:	08009ac9 	.word	0x08009ac9
 8009a00:	08009ac9 	.word	0x08009ac9
 8009a04:	08009ac9 	.word	0x08009ac9
 8009a08:	08009ac9 	.word	0x08009ac9
 8009a0c:	08009ac9 	.word	0x08009ac9
 8009a10:	08009ac9 	.word	0x08009ac9
 8009a14:	08009aa1 	.word	0x08009aa1
 8009a18:	08009ac9 	.word	0x08009ac9
 8009a1c:	08009ac9 	.word	0x08009ac9
 8009a20:	08009ac9 	.word	0x08009ac9
 8009a24:	08009ac9 	.word	0x08009ac9
 8009a28:	08009ac9 	.word	0x08009ac9
 8009a2c:	08009ac9 	.word	0x08009ac9
 8009a30:	08009ac9 	.word	0x08009ac9
 8009a34:	08009aa9 	.word	0x08009aa9
 8009a38:	08009ac9 	.word	0x08009ac9
 8009a3c:	08009ac9 	.word	0x08009ac9
 8009a40:	08009ac9 	.word	0x08009ac9
 8009a44:	08009ac9 	.word	0x08009ac9
 8009a48:	08009ac9 	.word	0x08009ac9
 8009a4c:	08009ac9 	.word	0x08009ac9
 8009a50:	08009ac9 	.word	0x08009ac9
 8009a54:	08009ab1 	.word	0x08009ab1
 8009a58:	08009ac9 	.word	0x08009ac9
 8009a5c:	08009ac9 	.word	0x08009ac9
 8009a60:	08009ac9 	.word	0x08009ac9
 8009a64:	08009ac9 	.word	0x08009ac9
 8009a68:	08009ac9 	.word	0x08009ac9
 8009a6c:	08009ac9 	.word	0x08009ac9
 8009a70:	08009ac9 	.word	0x08009ac9
 8009a74:	08009ab9 	.word	0x08009ab9
 8009a78:	08009ac9 	.word	0x08009ac9
 8009a7c:	08009ac9 	.word	0x08009ac9
 8009a80:	08009ac9 	.word	0x08009ac9
 8009a84:	08009ac9 	.word	0x08009ac9
 8009a88:	08009ac9 	.word	0x08009ac9
 8009a8c:	08009ac9 	.word	0x08009ac9
 8009a90:	08009ac9 	.word	0x08009ac9
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e1c0      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e1bc      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e1b8      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e1b4      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e1b0      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ac0:	2340      	movs	r3, #64	@ 0x40
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e1ac      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ac8:	2380      	movs	r3, #128	@ 0x80
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e1a8      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a75      	ldr	r2, [pc, #468]	@ (8009cac <UART_SetConfig+0x638>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d130      	bne.n	8009b3c <UART_SetConfig+0x4c8>
 8009ada:	4b73      	ldr	r3, [pc, #460]	@ (8009ca8 <UART_SetConfig+0x634>)
 8009adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	2b05      	cmp	r3, #5
 8009ae4:	d826      	bhi.n	8009b34 <UART_SetConfig+0x4c0>
 8009ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <UART_SetConfig+0x478>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b05 	.word	0x08009b05
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009b15 	.word	0x08009b15
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b2d 	.word	0x08009b2d
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e18a      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e186      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b14:	2308      	movs	r3, #8
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e182      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e17e      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b24:	2320      	movs	r3, #32
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e17a      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b2c:	2340      	movs	r3, #64	@ 0x40
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e176      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b34:	2380      	movs	r3, #128	@ 0x80
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3a:	e172      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a5b      	ldr	r2, [pc, #364]	@ (8009cb0 <UART_SetConfig+0x63c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d130      	bne.n	8009ba8 <UART_SetConfig+0x534>
 8009b46:	4b58      	ldr	r3, [pc, #352]	@ (8009ca8 <UART_SetConfig+0x634>)
 8009b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d826      	bhi.n	8009ba0 <UART_SetConfig+0x52c>
 8009b52:	a201      	add	r2, pc, #4	@ (adr r2, 8009b58 <UART_SetConfig+0x4e4>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b79 	.word	0x08009b79
 8009b60:	08009b81 	.word	0x08009b81
 8009b64:	08009b89 	.word	0x08009b89
 8009b68:	08009b91 	.word	0x08009b91
 8009b6c:	08009b99 	.word	0x08009b99
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e154      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e150      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b80:	2308      	movs	r3, #8
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e14c      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b88:	2310      	movs	r3, #16
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e148      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b90:	2320      	movs	r3, #32
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e144      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009b98:	2340      	movs	r3, #64	@ 0x40
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e140      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ba0:	2380      	movs	r3, #128	@ 0x80
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e13c      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a41      	ldr	r2, [pc, #260]	@ (8009cb4 <UART_SetConfig+0x640>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	f040 8082 	bne.w	8009cb8 <UART_SetConfig+0x644>
 8009bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8009ca8 <UART_SetConfig+0x634>)
 8009bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bbc:	2b28      	cmp	r3, #40	@ 0x28
 8009bbe:	d86d      	bhi.n	8009c9c <UART_SetConfig+0x628>
 8009bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <UART_SetConfig+0x554>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009c6d 	.word	0x08009c6d
 8009bcc:	08009c9d 	.word	0x08009c9d
 8009bd0:	08009c9d 	.word	0x08009c9d
 8009bd4:	08009c9d 	.word	0x08009c9d
 8009bd8:	08009c9d 	.word	0x08009c9d
 8009bdc:	08009c9d 	.word	0x08009c9d
 8009be0:	08009c9d 	.word	0x08009c9d
 8009be4:	08009c9d 	.word	0x08009c9d
 8009be8:	08009c75 	.word	0x08009c75
 8009bec:	08009c9d 	.word	0x08009c9d
 8009bf0:	08009c9d 	.word	0x08009c9d
 8009bf4:	08009c9d 	.word	0x08009c9d
 8009bf8:	08009c9d 	.word	0x08009c9d
 8009bfc:	08009c9d 	.word	0x08009c9d
 8009c00:	08009c9d 	.word	0x08009c9d
 8009c04:	08009c9d 	.word	0x08009c9d
 8009c08:	08009c7d 	.word	0x08009c7d
 8009c0c:	08009c9d 	.word	0x08009c9d
 8009c10:	08009c9d 	.word	0x08009c9d
 8009c14:	08009c9d 	.word	0x08009c9d
 8009c18:	08009c9d 	.word	0x08009c9d
 8009c1c:	08009c9d 	.word	0x08009c9d
 8009c20:	08009c9d 	.word	0x08009c9d
 8009c24:	08009c9d 	.word	0x08009c9d
 8009c28:	08009c85 	.word	0x08009c85
 8009c2c:	08009c9d 	.word	0x08009c9d
 8009c30:	08009c9d 	.word	0x08009c9d
 8009c34:	08009c9d 	.word	0x08009c9d
 8009c38:	08009c9d 	.word	0x08009c9d
 8009c3c:	08009c9d 	.word	0x08009c9d
 8009c40:	08009c9d 	.word	0x08009c9d
 8009c44:	08009c9d 	.word	0x08009c9d
 8009c48:	08009c8d 	.word	0x08009c8d
 8009c4c:	08009c9d 	.word	0x08009c9d
 8009c50:	08009c9d 	.word	0x08009c9d
 8009c54:	08009c9d 	.word	0x08009c9d
 8009c58:	08009c9d 	.word	0x08009c9d
 8009c5c:	08009c9d 	.word	0x08009c9d
 8009c60:	08009c9d 	.word	0x08009c9d
 8009c64:	08009c9d 	.word	0x08009c9d
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e0d6      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009c74:	2304      	movs	r3, #4
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7a:	e0d2      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c82:	e0ce      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009c84:	2310      	movs	r3, #16
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8a:	e0ca      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c92:	e0c6      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009c94:	2340      	movs	r3, #64	@ 0x40
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9a:	e0c2      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009c9c:	2380      	movs	r3, #128	@ 0x80
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca2:	e0be      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009ca4:	40011400 	.word	0x40011400
 8009ca8:	58024400 	.word	0x58024400
 8009cac:	40007800 	.word	0x40007800
 8009cb0:	40007c00 	.word	0x40007c00
 8009cb4:	40011800 	.word	0x40011800
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4aad      	ldr	r2, [pc, #692]	@ (8009f74 <UART_SetConfig+0x900>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d176      	bne.n	8009db0 <UART_SetConfig+0x73c>
 8009cc2:	4bad      	ldr	r3, [pc, #692]	@ (8009f78 <UART_SetConfig+0x904>)
 8009cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cca:	2b28      	cmp	r3, #40	@ 0x28
 8009ccc:	d86c      	bhi.n	8009da8 <UART_SetConfig+0x734>
 8009cce:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <UART_SetConfig+0x660>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009d79 	.word	0x08009d79
 8009cd8:	08009da9 	.word	0x08009da9
 8009cdc:	08009da9 	.word	0x08009da9
 8009ce0:	08009da9 	.word	0x08009da9
 8009ce4:	08009da9 	.word	0x08009da9
 8009ce8:	08009da9 	.word	0x08009da9
 8009cec:	08009da9 	.word	0x08009da9
 8009cf0:	08009da9 	.word	0x08009da9
 8009cf4:	08009d81 	.word	0x08009d81
 8009cf8:	08009da9 	.word	0x08009da9
 8009cfc:	08009da9 	.word	0x08009da9
 8009d00:	08009da9 	.word	0x08009da9
 8009d04:	08009da9 	.word	0x08009da9
 8009d08:	08009da9 	.word	0x08009da9
 8009d0c:	08009da9 	.word	0x08009da9
 8009d10:	08009da9 	.word	0x08009da9
 8009d14:	08009d89 	.word	0x08009d89
 8009d18:	08009da9 	.word	0x08009da9
 8009d1c:	08009da9 	.word	0x08009da9
 8009d20:	08009da9 	.word	0x08009da9
 8009d24:	08009da9 	.word	0x08009da9
 8009d28:	08009da9 	.word	0x08009da9
 8009d2c:	08009da9 	.word	0x08009da9
 8009d30:	08009da9 	.word	0x08009da9
 8009d34:	08009d91 	.word	0x08009d91
 8009d38:	08009da9 	.word	0x08009da9
 8009d3c:	08009da9 	.word	0x08009da9
 8009d40:	08009da9 	.word	0x08009da9
 8009d44:	08009da9 	.word	0x08009da9
 8009d48:	08009da9 	.word	0x08009da9
 8009d4c:	08009da9 	.word	0x08009da9
 8009d50:	08009da9 	.word	0x08009da9
 8009d54:	08009d99 	.word	0x08009d99
 8009d58:	08009da9 	.word	0x08009da9
 8009d5c:	08009da9 	.word	0x08009da9
 8009d60:	08009da9 	.word	0x08009da9
 8009d64:	08009da9 	.word	0x08009da9
 8009d68:	08009da9 	.word	0x08009da9
 8009d6c:	08009da9 	.word	0x08009da9
 8009d70:	08009da9 	.word	0x08009da9
 8009d74:	08009da1 	.word	0x08009da1
 8009d78:	2301      	movs	r3, #1
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e050      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009d80:	2304      	movs	r3, #4
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e04c      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009d88:	2308      	movs	r3, #8
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e048      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009d90:	2310      	movs	r3, #16
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e044      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009d98:	2320      	movs	r3, #32
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e040      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009da0:	2340      	movs	r3, #64	@ 0x40
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e03c      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009da8:	2380      	movs	r3, #128	@ 0x80
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e038      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a71      	ldr	r2, [pc, #452]	@ (8009f7c <UART_SetConfig+0x908>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d130      	bne.n	8009e1c <UART_SetConfig+0x7a8>
 8009dba:	4b6f      	ldr	r3, [pc, #444]	@ (8009f78 <UART_SetConfig+0x904>)
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	2b05      	cmp	r3, #5
 8009dc4:	d826      	bhi.n	8009e14 <UART_SetConfig+0x7a0>
 8009dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dcc <UART_SetConfig+0x758>)
 8009dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dcc:	08009de5 	.word	0x08009de5
 8009dd0:	08009ded 	.word	0x08009ded
 8009dd4:	08009df5 	.word	0x08009df5
 8009dd8:	08009dfd 	.word	0x08009dfd
 8009ddc:	08009e05 	.word	0x08009e05
 8009de0:	08009e0d 	.word	0x08009e0d
 8009de4:	2302      	movs	r3, #2
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e01a      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009dec:	2304      	movs	r3, #4
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e016      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009df4:	2308      	movs	r3, #8
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e012      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e00e      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009e04:	2320      	movs	r3, #32
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0a:	e00a      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009e0c:	2340      	movs	r3, #64	@ 0x40
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e006      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009e14:	2380      	movs	r3, #128	@ 0x80
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e002      	b.n	8009e22 <UART_SetConfig+0x7ae>
 8009e1c:	2380      	movs	r3, #128	@ 0x80
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a55      	ldr	r2, [pc, #340]	@ (8009f7c <UART_SetConfig+0x908>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	f040 80f8 	bne.w	800a01e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e32:	2b20      	cmp	r3, #32
 8009e34:	dc46      	bgt.n	8009ec4 <UART_SetConfig+0x850>
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	db75      	blt.n	8009f26 <UART_SetConfig+0x8b2>
 8009e3a:	3b02      	subs	r3, #2
 8009e3c:	2b1e      	cmp	r3, #30
 8009e3e:	d872      	bhi.n	8009f26 <UART_SetConfig+0x8b2>
 8009e40:	a201      	add	r2, pc, #4	@ (adr r2, 8009e48 <UART_SetConfig+0x7d4>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009ecb 	.word	0x08009ecb
 8009e4c:	08009f27 	.word	0x08009f27
 8009e50:	08009ed3 	.word	0x08009ed3
 8009e54:	08009f27 	.word	0x08009f27
 8009e58:	08009f27 	.word	0x08009f27
 8009e5c:	08009f27 	.word	0x08009f27
 8009e60:	08009ee3 	.word	0x08009ee3
 8009e64:	08009f27 	.word	0x08009f27
 8009e68:	08009f27 	.word	0x08009f27
 8009e6c:	08009f27 	.word	0x08009f27
 8009e70:	08009f27 	.word	0x08009f27
 8009e74:	08009f27 	.word	0x08009f27
 8009e78:	08009f27 	.word	0x08009f27
 8009e7c:	08009f27 	.word	0x08009f27
 8009e80:	08009ef3 	.word	0x08009ef3
 8009e84:	08009f27 	.word	0x08009f27
 8009e88:	08009f27 	.word	0x08009f27
 8009e8c:	08009f27 	.word	0x08009f27
 8009e90:	08009f27 	.word	0x08009f27
 8009e94:	08009f27 	.word	0x08009f27
 8009e98:	08009f27 	.word	0x08009f27
 8009e9c:	08009f27 	.word	0x08009f27
 8009ea0:	08009f27 	.word	0x08009f27
 8009ea4:	08009f27 	.word	0x08009f27
 8009ea8:	08009f27 	.word	0x08009f27
 8009eac:	08009f27 	.word	0x08009f27
 8009eb0:	08009f27 	.word	0x08009f27
 8009eb4:	08009f27 	.word	0x08009f27
 8009eb8:	08009f27 	.word	0x08009f27
 8009ebc:	08009f27 	.word	0x08009f27
 8009ec0:	08009f19 	.word	0x08009f19
 8009ec4:	2b40      	cmp	r3, #64	@ 0x40
 8009ec6:	d02a      	beq.n	8009f1e <UART_SetConfig+0x8aa>
 8009ec8:	e02d      	b.n	8009f26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009eca:	f7fd fd4f 	bl	800796c <HAL_RCCEx_GetD3PCLK1Freq>
 8009ece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ed0:	e02f      	b.n	8009f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd fd5e 	bl	8007998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee0:	e027      	b.n	8009f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ee2:	f107 0318 	add.w	r3, r7, #24
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fd feaa 	bl	8007c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef0:	e01f      	b.n	8009f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef2:	4b21      	ldr	r3, [pc, #132]	@ (8009f78 <UART_SetConfig+0x904>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d009      	beq.n	8009f12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009efe:	4b1e      	ldr	r3, [pc, #120]	@ (8009f78 <UART_SetConfig+0x904>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	08db      	lsrs	r3, r3, #3
 8009f04:	f003 0303 	and.w	r3, r3, #3
 8009f08:	4a1d      	ldr	r2, [pc, #116]	@ (8009f80 <UART_SetConfig+0x90c>)
 8009f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f10:	e00f      	b.n	8009f32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f12:	4b1b      	ldr	r3, [pc, #108]	@ (8009f80 <UART_SetConfig+0x90c>)
 8009f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f16:	e00c      	b.n	8009f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f18:	4b1a      	ldr	r3, [pc, #104]	@ (8009f84 <UART_SetConfig+0x910>)
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f1c:	e009      	b.n	8009f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f24:	e005      	b.n	8009f32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 81ee 	beq.w	800a316 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3e:	4a12      	ldr	r2, [pc, #72]	@ (8009f88 <UART_SetConfig+0x914>)
 8009f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f44:	461a      	mov	r2, r3
 8009f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	4613      	mov	r3, r2
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	4413      	add	r3, r2
 8009f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d305      	bcc.n	8009f6a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d910      	bls.n	8009f8c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f70:	e1d1      	b.n	800a316 <UART_SetConfig+0xca2>
 8009f72:	bf00      	nop
 8009f74:	40011c00 	.word	0x40011c00
 8009f78:	58024400 	.word	0x58024400
 8009f7c:	58000c00 	.word	0x58000c00
 8009f80:	03d09000 	.word	0x03d09000
 8009f84:	003d0900 	.word	0x003d0900
 8009f88:	0800f438 	.word	0x0800f438
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f8e:	2200      	movs	r2, #0
 8009f90:	60bb      	str	r3, [r7, #8]
 8009f92:	60fa      	str	r2, [r7, #12]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f98:	4ac0      	ldr	r2, [pc, #768]	@ (800a29c <UART_SetConfig+0xc28>)
 8009f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fae:	f7f6 f9f7 	bl	80003a0 <__aeabi_uldivmod>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4619      	mov	r1, r3
 8009fba:	f04f 0200 	mov.w	r2, #0
 8009fbe:	f04f 0300 	mov.w	r3, #0
 8009fc2:	020b      	lsls	r3, r1, #8
 8009fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fc8:	0202      	lsls	r2, r0, #8
 8009fca:	6979      	ldr	r1, [r7, #20]
 8009fcc:	6849      	ldr	r1, [r1, #4]
 8009fce:	0849      	lsrs	r1, r1, #1
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	eb12 0804 	adds.w	r8, r2, r4
 8009fda:	eb43 0905 	adc.w	r9, r3, r5
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	469a      	mov	sl, r3
 8009fe6:	4693      	mov	fp, r2
 8009fe8:	4652      	mov	r2, sl
 8009fea:	465b      	mov	r3, fp
 8009fec:	4640      	mov	r0, r8
 8009fee:	4649      	mov	r1, r9
 8009ff0:	f7f6 f9d6 	bl	80003a0 <__aeabi_uldivmod>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a002:	d308      	bcc.n	800a016 <UART_SetConfig+0x9a2>
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a00a:	d204      	bcs.n	800a016 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a012:	60da      	str	r2, [r3, #12]
 800a014:	e17f      	b.n	800a316 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a01c:	e17b      	b.n	800a316 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a026:	f040 80bd 	bne.w	800a1a4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a02a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a02e:	2b20      	cmp	r3, #32
 800a030:	dc48      	bgt.n	800a0c4 <UART_SetConfig+0xa50>
 800a032:	2b00      	cmp	r3, #0
 800a034:	db7b      	blt.n	800a12e <UART_SetConfig+0xaba>
 800a036:	2b20      	cmp	r3, #32
 800a038:	d879      	bhi.n	800a12e <UART_SetConfig+0xaba>
 800a03a:	a201      	add	r2, pc, #4	@ (adr r2, 800a040 <UART_SetConfig+0x9cc>)
 800a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a040:	0800a0cb 	.word	0x0800a0cb
 800a044:	0800a0d3 	.word	0x0800a0d3
 800a048:	0800a12f 	.word	0x0800a12f
 800a04c:	0800a12f 	.word	0x0800a12f
 800a050:	0800a0db 	.word	0x0800a0db
 800a054:	0800a12f 	.word	0x0800a12f
 800a058:	0800a12f 	.word	0x0800a12f
 800a05c:	0800a12f 	.word	0x0800a12f
 800a060:	0800a0eb 	.word	0x0800a0eb
 800a064:	0800a12f 	.word	0x0800a12f
 800a068:	0800a12f 	.word	0x0800a12f
 800a06c:	0800a12f 	.word	0x0800a12f
 800a070:	0800a12f 	.word	0x0800a12f
 800a074:	0800a12f 	.word	0x0800a12f
 800a078:	0800a12f 	.word	0x0800a12f
 800a07c:	0800a12f 	.word	0x0800a12f
 800a080:	0800a0fb 	.word	0x0800a0fb
 800a084:	0800a12f 	.word	0x0800a12f
 800a088:	0800a12f 	.word	0x0800a12f
 800a08c:	0800a12f 	.word	0x0800a12f
 800a090:	0800a12f 	.word	0x0800a12f
 800a094:	0800a12f 	.word	0x0800a12f
 800a098:	0800a12f 	.word	0x0800a12f
 800a09c:	0800a12f 	.word	0x0800a12f
 800a0a0:	0800a12f 	.word	0x0800a12f
 800a0a4:	0800a12f 	.word	0x0800a12f
 800a0a8:	0800a12f 	.word	0x0800a12f
 800a0ac:	0800a12f 	.word	0x0800a12f
 800a0b0:	0800a12f 	.word	0x0800a12f
 800a0b4:	0800a12f 	.word	0x0800a12f
 800a0b8:	0800a12f 	.word	0x0800a12f
 800a0bc:	0800a12f 	.word	0x0800a12f
 800a0c0:	0800a121 	.word	0x0800a121
 800a0c4:	2b40      	cmp	r3, #64	@ 0x40
 800a0c6:	d02e      	beq.n	800a126 <UART_SetConfig+0xab2>
 800a0c8:	e031      	b.n	800a12e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ca:	f7fc fa65 	bl	8006598 <HAL_RCC_GetPCLK1Freq>
 800a0ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0d0:	e033      	b.n	800a13a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0d2:	f7fc fa77 	bl	80065c4 <HAL_RCC_GetPCLK2Freq>
 800a0d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0d8:	e02f      	b.n	800a13a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fd fc5a 	bl	8007998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e8:	e027      	b.n	800a13a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ea:	f107 0318 	add.w	r3, r7, #24
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fd fda6 	bl	8007c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f8:	e01f      	b.n	800a13a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0fa:	4b69      	ldr	r3, [pc, #420]	@ (800a2a0 <UART_SetConfig+0xc2c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0320 	and.w	r3, r3, #32
 800a102:	2b00      	cmp	r3, #0
 800a104:	d009      	beq.n	800a11a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a106:	4b66      	ldr	r3, [pc, #408]	@ (800a2a0 <UART_SetConfig+0xc2c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	08db      	lsrs	r3, r3, #3
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	4a64      	ldr	r2, [pc, #400]	@ (800a2a4 <UART_SetConfig+0xc30>)
 800a112:	fa22 f303 	lsr.w	r3, r2, r3
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a118:	e00f      	b.n	800a13a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a11a:	4b62      	ldr	r3, [pc, #392]	@ (800a2a4 <UART_SetConfig+0xc30>)
 800a11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11e:	e00c      	b.n	800a13a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a120:	4b61      	ldr	r3, [pc, #388]	@ (800a2a8 <UART_SetConfig+0xc34>)
 800a122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a124:	e009      	b.n	800a13a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a12c:	e005      	b.n	800a13a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a13a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 80ea 	beq.w	800a316 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a146:	4a55      	ldr	r2, [pc, #340]	@ (800a29c <UART_SetConfig+0xc28>)
 800a148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a14c:	461a      	mov	r2, r3
 800a14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a150:	fbb3 f3f2 	udiv	r3, r3, r2
 800a154:	005a      	lsls	r2, r3, #1
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	085b      	lsrs	r3, r3, #1
 800a15c:	441a      	add	r2, r3
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	fbb2 f3f3 	udiv	r3, r2, r3
 800a166:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16a:	2b0f      	cmp	r3, #15
 800a16c:	d916      	bls.n	800a19c <UART_SetConfig+0xb28>
 800a16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a174:	d212      	bcs.n	800a19c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a178:	b29b      	uxth	r3, r3
 800a17a:	f023 030f 	bic.w	r3, r3, #15
 800a17e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	085b      	lsrs	r3, r3, #1
 800a184:	b29b      	uxth	r3, r3
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a18e:	4313      	orrs	r3, r2
 800a190:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	e0bc      	b.n	800a316 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1a2:	e0b8      	b.n	800a316 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	dc4b      	bgt.n	800a244 <UART_SetConfig+0xbd0>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f2c0 8087 	blt.w	800a2c0 <UART_SetConfig+0xc4c>
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	f200 8084 	bhi.w	800a2c0 <UART_SetConfig+0xc4c>
 800a1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c0 <UART_SetConfig+0xb4c>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a24b 	.word	0x0800a24b
 800a1c4:	0800a253 	.word	0x0800a253
 800a1c8:	0800a2c1 	.word	0x0800a2c1
 800a1cc:	0800a2c1 	.word	0x0800a2c1
 800a1d0:	0800a25b 	.word	0x0800a25b
 800a1d4:	0800a2c1 	.word	0x0800a2c1
 800a1d8:	0800a2c1 	.word	0x0800a2c1
 800a1dc:	0800a2c1 	.word	0x0800a2c1
 800a1e0:	0800a26b 	.word	0x0800a26b
 800a1e4:	0800a2c1 	.word	0x0800a2c1
 800a1e8:	0800a2c1 	.word	0x0800a2c1
 800a1ec:	0800a2c1 	.word	0x0800a2c1
 800a1f0:	0800a2c1 	.word	0x0800a2c1
 800a1f4:	0800a2c1 	.word	0x0800a2c1
 800a1f8:	0800a2c1 	.word	0x0800a2c1
 800a1fc:	0800a2c1 	.word	0x0800a2c1
 800a200:	0800a27b 	.word	0x0800a27b
 800a204:	0800a2c1 	.word	0x0800a2c1
 800a208:	0800a2c1 	.word	0x0800a2c1
 800a20c:	0800a2c1 	.word	0x0800a2c1
 800a210:	0800a2c1 	.word	0x0800a2c1
 800a214:	0800a2c1 	.word	0x0800a2c1
 800a218:	0800a2c1 	.word	0x0800a2c1
 800a21c:	0800a2c1 	.word	0x0800a2c1
 800a220:	0800a2c1 	.word	0x0800a2c1
 800a224:	0800a2c1 	.word	0x0800a2c1
 800a228:	0800a2c1 	.word	0x0800a2c1
 800a22c:	0800a2c1 	.word	0x0800a2c1
 800a230:	0800a2c1 	.word	0x0800a2c1
 800a234:	0800a2c1 	.word	0x0800a2c1
 800a238:	0800a2c1 	.word	0x0800a2c1
 800a23c:	0800a2c1 	.word	0x0800a2c1
 800a240:	0800a2b3 	.word	0x0800a2b3
 800a244:	2b40      	cmp	r3, #64	@ 0x40
 800a246:	d037      	beq.n	800a2b8 <UART_SetConfig+0xc44>
 800a248:	e03a      	b.n	800a2c0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a24a:	f7fc f9a5 	bl	8006598 <HAL_RCC_GetPCLK1Freq>
 800a24e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a250:	e03c      	b.n	800a2cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a252:	f7fc f9b7 	bl	80065c4 <HAL_RCC_GetPCLK2Freq>
 800a256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a258:	e038      	b.n	800a2cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a25a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fd fb9a 	bl	8007998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a268:	e030      	b.n	800a2cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a26a:	f107 0318 	add.w	r3, r7, #24
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fd fce6 	bl	8007c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a278:	e028      	b.n	800a2cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a27a:	4b09      	ldr	r3, [pc, #36]	@ (800a2a0 <UART_SetConfig+0xc2c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0320 	and.w	r3, r3, #32
 800a282:	2b00      	cmp	r3, #0
 800a284:	d012      	beq.n	800a2ac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a286:	4b06      	ldr	r3, [pc, #24]	@ (800a2a0 <UART_SetConfig+0xc2c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	08db      	lsrs	r3, r3, #3
 800a28c:	f003 0303 	and.w	r3, r3, #3
 800a290:	4a04      	ldr	r2, [pc, #16]	@ (800a2a4 <UART_SetConfig+0xc30>)
 800a292:	fa22 f303 	lsr.w	r3, r2, r3
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a298:	e018      	b.n	800a2cc <UART_SetConfig+0xc58>
 800a29a:	bf00      	nop
 800a29c:	0800f438 	.word	0x0800f438
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	03d09000 	.word	0x03d09000
 800a2a8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a2ac:	4b24      	ldr	r3, [pc, #144]	@ (800a340 <UART_SetConfig+0xccc>)
 800a2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b0:	e00c      	b.n	800a2cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2b2:	4b24      	ldr	r3, [pc, #144]	@ (800a344 <UART_SetConfig+0xcd0>)
 800a2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b6:	e009      	b.n	800a2cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2be:	e005      	b.n	800a2cc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2ca:	bf00      	nop
    }

    if (pclk != 0U)
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d021      	beq.n	800a316 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a348 <UART_SetConfig+0xcd4>)
 800a2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	441a      	add	r2, r3
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f8:	2b0f      	cmp	r3, #15
 800a2fa:	d909      	bls.n	800a310 <UART_SetConfig+0xc9c>
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a302:	d205      	bcs.n	800a310 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a306:	b29a      	uxth	r2, r3
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60da      	str	r2, [r3, #12]
 800a30e:	e002      	b.n	800a316 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2201      	movs	r2, #1
 800a31a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2201      	movs	r2, #1
 800a322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2200      	movs	r2, #0
 800a32a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2200      	movs	r2, #0
 800a330:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a332:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a336:	4618      	mov	r0, r3
 800a338:	3748      	adds	r7, #72	@ 0x48
 800a33a:	46bd      	mov	sp, r7
 800a33c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a340:	03d09000 	.word	0x03d09000
 800a344:	003d0900 	.word	0x003d0900
 800a348:	0800f438 	.word	0x0800f438

0800a34c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a358:	f003 0308 	and.w	r3, r3, #8
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00a      	beq.n	800a376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	430a      	orrs	r2, r1
 800a396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00a      	beq.n	800a3ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3be:	f003 0304 	and.w	r3, r3, #4
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01a      	beq.n	800a462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a44a:	d10a      	bne.n	800a462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00a      	beq.n	800a484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	605a      	str	r2, [r3, #4]
  }
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b098      	sub	sp, #96	@ 0x60
 800a494:	af02      	add	r7, sp, #8
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4a0:	f7f7 fcd4 	bl	8001e4c <HAL_GetTick>
 800a4a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b08      	cmp	r3, #8
 800a4b2:	d12f      	bne.n	800a514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f88e 	bl	800a5e4 <UART_WaitOnFlagUntilTimeout>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d022      	beq.n	800a514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d6:	e853 3f00 	ldrex	r3, [r3]
 800a4da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4f4:	e841 2300 	strex	r3, r2, [r1]
 800a4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e6      	bne.n	800a4ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2220      	movs	r2, #32
 800a504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e063      	b.n	800a5dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d149      	bne.n	800a5b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a522:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a52a:	2200      	movs	r2, #0
 800a52c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f857 	bl	800a5e4 <UART_WaitOnFlagUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d03c      	beq.n	800a5b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	623b      	str	r3, [r7, #32]
   return(result);
 800a54a:	6a3b      	ldr	r3, [r7, #32]
 800a54c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a55a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a55c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e6      	bne.n	800a53c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3308      	adds	r3, #8
 800a574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f023 0301 	bic.w	r3, r3, #1
 800a584:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a58e:	61fa      	str	r2, [r7, #28]
 800a590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	69b9      	ldr	r1, [r7, #24]
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	617b      	str	r3, [r7, #20]
   return(result);
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e5      	bne.n	800a56e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e012      	b.n	800a5dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3758      	adds	r7, #88	@ 0x58
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5f4:	e04f      	b.n	800a696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fc:	d04b      	beq.n	800a696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5fe:	f7f7 fc25 	bl	8001e4c <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d302      	bcc.n	800a614 <UART_WaitOnFlagUntilTimeout+0x30>
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a614:	2303      	movs	r3, #3
 800a616:	e04e      	b.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b00      	cmp	r3, #0
 800a624:	d037      	beq.n	800a696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b80      	cmp	r3, #128	@ 0x80
 800a62a:	d034      	beq.n	800a696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b40      	cmp	r3, #64	@ 0x40
 800a630:	d031      	beq.n	800a696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b08      	cmp	r3, #8
 800a63e:	d110      	bne.n	800a662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2208      	movs	r2, #8
 800a646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fa43 	bl	800aad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2208      	movs	r2, #8
 800a652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e029      	b.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	69db      	ldr	r3, [r3, #28]
 800a668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a66c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a670:	d111      	bne.n	800a696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a67a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 fa29 	bl	800aad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2220      	movs	r2, #32
 800a686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e00f      	b.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69da      	ldr	r2, [r3, #28]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4013      	ands	r3, r2
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	bf0c      	ite	eq
 800a6a6:	2301      	moveq	r3, #1
 800a6a8:	2300      	movne	r3, #0
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d0a0      	beq.n	800a5f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b0a3      	sub	sp, #140	@ 0x8c
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	88fa      	ldrh	r2, [r7, #6]
 800a6d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	88fa      	ldrh	r2, [r7, #6]
 800a6e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6f2:	d10e      	bne.n	800a712 <UART_Start_Receive_IT+0x52>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d105      	bne.n	800a708 <UART_Start_Receive_IT+0x48>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a702:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a706:	e02d      	b.n	800a764 <UART_Start_Receive_IT+0xa4>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	22ff      	movs	r2, #255	@ 0xff
 800a70c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a710:	e028      	b.n	800a764 <UART_Start_Receive_IT+0xa4>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10d      	bne.n	800a736 <UART_Start_Receive_IT+0x76>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d104      	bne.n	800a72c <UART_Start_Receive_IT+0x6c>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	22ff      	movs	r2, #255	@ 0xff
 800a726:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a72a:	e01b      	b.n	800a764 <UART_Start_Receive_IT+0xa4>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	227f      	movs	r2, #127	@ 0x7f
 800a730:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a734:	e016      	b.n	800a764 <UART_Start_Receive_IT+0xa4>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a73e:	d10d      	bne.n	800a75c <UART_Start_Receive_IT+0x9c>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <UART_Start_Receive_IT+0x92>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	227f      	movs	r2, #127	@ 0x7f
 800a74c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a750:	e008      	b.n	800a764 <UART_Start_Receive_IT+0xa4>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	223f      	movs	r2, #63	@ 0x3f
 800a756:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a75a:	e003      	b.n	800a764 <UART_Start_Receive_IT+0xa4>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2222      	movs	r2, #34	@ 0x22
 800a770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a786:	f043 0301 	orr.w	r3, r3, #1
 800a78a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3308      	adds	r3, #8
 800a794:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a798:	673a      	str	r2, [r7, #112]	@ 0x70
 800a79a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a79e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a7a0:	e841 2300 	strex	r3, r2, [r1]
 800a7a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a7a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e3      	bne.n	800a774 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b4:	d14f      	bne.n	800a856 <UART_Start_Receive_IT+0x196>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a7bc:	88fa      	ldrh	r2, [r7, #6]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d349      	bcc.n	800a856 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7ca:	d107      	bne.n	800a7dc <UART_Start_Receive_IT+0x11c>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d103      	bne.n	800a7dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4a47      	ldr	r2, [pc, #284]	@ (800a8f4 <UART_Start_Receive_IT+0x234>)
 800a7d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a7da:	e002      	b.n	800a7e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4a46      	ldr	r2, [pc, #280]	@ (800a8f8 <UART_Start_Receive_IT+0x238>)
 800a7e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d01a      	beq.n	800a820 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a7f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a80c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a80e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a812:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a81a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e4      	bne.n	800a7ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3308      	adds	r3, #8
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a836:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3308      	adds	r3, #8
 800a83e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a840:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a842:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a848:	e841 2300 	strex	r3, r2, [r1]
 800a84c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a84e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e5      	bne.n	800a820 <UART_Start_Receive_IT+0x160>
 800a854:	e046      	b.n	800a8e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a85e:	d107      	bne.n	800a870 <UART_Start_Receive_IT+0x1b0>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d103      	bne.n	800a870 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4a24      	ldr	r2, [pc, #144]	@ (800a8fc <UART_Start_Receive_IT+0x23c>)
 800a86c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a86e:	e002      	b.n	800a876 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a23      	ldr	r2, [pc, #140]	@ (800a900 <UART_Start_Receive_IT+0x240>)
 800a874:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d019      	beq.n	800a8b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a886:	e853 3f00 	ldrex	r3, [r3]
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a892:	677b      	str	r3, [r7, #116]	@ 0x74
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	461a      	mov	r2, r3
 800a89a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a89e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8a4:	e841 2300 	strex	r3, r2, [r1]
 800a8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e6      	bne.n	800a87e <UART_Start_Receive_IT+0x1be>
 800a8b0:	e018      	b.n	800a8e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	e853 3f00 	ldrex	r3, [r3]
 800a8be:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f043 0320 	orr.w	r3, r3, #32
 800a8c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8d0:	623b      	str	r3, [r7, #32]
 800a8d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d4:	69f9      	ldr	r1, [r7, #28]
 800a8d6:	6a3a      	ldr	r2, [r7, #32]
 800a8d8:	e841 2300 	strex	r3, r2, [r1]
 800a8dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e6      	bne.n	800a8b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	378c      	adds	r7, #140	@ 0x8c
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	0800b589 	.word	0x0800b589
 800a8f8:	0800b225 	.word	0x0800b225
 800a8fc:	0800b06d 	.word	0x0800b06d
 800a900:	0800aeb5 	.word	0x0800aeb5

0800a904 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b096      	sub	sp, #88	@ 0x58
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	88fa      	ldrh	r2, [r7, #6]
 800a91c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2222      	movs	r2, #34	@ 0x22
 800a92c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a936:	2b00      	cmp	r3, #0
 800a938:	d02d      	beq.n	800a996 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a940:	4a40      	ldr	r2, [pc, #256]	@ (800aa44 <UART_Start_Receive_DMA+0x140>)
 800a942:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a94a:	4a3f      	ldr	r2, [pc, #252]	@ (800aa48 <UART_Start_Receive_DMA+0x144>)
 800a94c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a954:	4a3d      	ldr	r2, [pc, #244]	@ (800aa4c <UART_Start_Receive_DMA+0x148>)
 800a956:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a95e:	2200      	movs	r2, #0
 800a960:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3324      	adds	r3, #36	@ 0x24
 800a96e:	4619      	mov	r1, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a974:	461a      	mov	r2, r3
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	f7f7 ffae 	bl	80028d8 <HAL_DMA_Start_IT>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d009      	beq.n	800a996 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2210      	movs	r2, #16
 800a986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2220      	movs	r2, #32
 800a98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e051      	b.n	800aa3a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d018      	beq.n	800a9d0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a6:	e853 3f00 	ldrex	r3, [r3]
 800a9aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9be:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a9c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9c4:	e841 2300 	strex	r3, r2, [r1]
 800a9c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a9ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1e6      	bne.n	800a99e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	e853 3f00 	ldrex	r3, [r3]
 800a9de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	f043 0301 	orr.w	r3, r3, #1
 800a9e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a9f0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a9f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e5      	bne.n	800a9d0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3308      	adds	r3, #8
 800aa0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	613b      	str	r3, [r7, #16]
   return(result);
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3308      	adds	r3, #8
 800aa22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa24:	623a      	str	r2, [r7, #32]
 800aa26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	69f9      	ldr	r1, [r7, #28]
 800aa2a:	6a3a      	ldr	r2, [r7, #32]
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e5      	bne.n	800aa04 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3758      	adds	r7, #88	@ 0x58
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	0800ac53 	.word	0x0800ac53
 800aa48:	0800ad7b 	.word	0x0800ad7b
 800aa4c:	0800adb9 	.word	0x0800adb9

0800aa50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b08f      	sub	sp, #60	@ 0x3c
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	e853 3f00 	ldrex	r3, [r3]
 800aa64:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aa6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e6      	bne.n	800aa58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3308      	adds	r3, #8
 800aa90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aaa0:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaaa:	61ba      	str	r2, [r7, #24]
 800aaac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	613b      	str	r3, [r7, #16]
   return(result);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e5      	bne.n	800aa8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aac6:	bf00      	nop
 800aac8:	373c      	adds	r7, #60	@ 0x3c
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
	...

0800aad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b095      	sub	sp, #84	@ 0x54
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae4:	e853 3f00 	ldrex	r3, [r3]
 800aae8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aaf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aafa:	643b      	str	r3, [r7, #64]	@ 0x40
 800aafc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab02:	e841 2300 	strex	r3, r2, [r1]
 800ab06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e6      	bne.n	800aadc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3308      	adds	r3, #8
 800ab14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	e853 3f00 	ldrex	r3, [r3]
 800ab1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	4b1e      	ldr	r3, [pc, #120]	@ (800ab9c <UART_EndRxTransfer+0xc8>)
 800ab22:	4013      	ands	r3, r2
 800ab24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab36:	e841 2300 	strex	r3, r2, [r1]
 800ab3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e5      	bne.n	800ab0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d118      	bne.n	800ab7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	e853 3f00 	ldrex	r3, [r3]
 800ab56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f023 0310 	bic.w	r3, r3, #16
 800ab5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6c:	6979      	ldr	r1, [r7, #20]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	e841 2300 	strex	r3, r2, [r1]
 800ab74:	613b      	str	r3, [r7, #16]
   return(result);
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e6      	bne.n	800ab4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab90:	bf00      	nop
 800ab92:	3754      	adds	r7, #84	@ 0x54
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	effffffe 	.word	0xeffffffe

0800aba0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b090      	sub	sp, #64	@ 0x40
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abb6:	d037      	beq.n	800ac28 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800abb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abba:	2200      	movs	r2, #0
 800abbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3308      	adds	r3, #8
 800abc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abca:	e853 3f00 	ldrex	r3, [r3]
 800abce:	623b      	str	r3, [r7, #32]
   return(result);
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800abd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3308      	adds	r3, #8
 800abde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abe0:	633a      	str	r2, [r7, #48]	@ 0x30
 800abe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abe8:	e841 2300 	strex	r3, r2, [r1]
 800abec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1e5      	bne.n	800abc0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	e853 3f00 	ldrex	r3, [r3]
 800ac00:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac12:	61fb      	str	r3, [r7, #28]
 800ac14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac16:	69b9      	ldr	r1, [r7, #24]
 800ac18:	69fa      	ldr	r2, [r7, #28]
 800ac1a:	e841 2300 	strex	r3, r2, [r1]
 800ac1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e6      	bne.n	800abf4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac26:	e002      	b.n	800ac2e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ac28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ac2a:	f7fe fcf1 	bl	8009610 <HAL_UART_TxCpltCallback>
}
 800ac2e:	bf00      	nop
 800ac30:	3740      	adds	r7, #64	@ 0x40
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f7fe fced 	bl	8009624 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b09c      	sub	sp, #112	@ 0x70
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac68:	d071      	beq.n	800ad4e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ac6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac86:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac90:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e6      	bne.n	800ac72 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3308      	adds	r3, #8
 800acaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb6:	f023 0301 	bic.w	r3, r3, #1
 800acba:	667b      	str	r3, [r7, #100]	@ 0x64
 800acbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	3308      	adds	r3, #8
 800acc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800acc4:	647a      	str	r2, [r7, #68]	@ 0x44
 800acc6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800accc:	e841 2300 	strex	r3, r2, [r1]
 800acd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e5      	bne.n	800aca4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3308      	adds	r3, #8
 800acde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	e853 3f00 	ldrex	r3, [r3]
 800ace6:	623b      	str	r3, [r7, #32]
   return(result);
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acee:	663b      	str	r3, [r7, #96]	@ 0x60
 800acf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3308      	adds	r3, #8
 800acf6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800acf8:	633a      	str	r2, [r7, #48]	@ 0x30
 800acfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e5      	bne.n	800acd8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad0e:	2220      	movs	r2, #32
 800ad10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d118      	bne.n	800ad4e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f023 0310 	bic.w	r3, r3, #16
 800ad30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3e:	69b9      	ldr	r1, [r7, #24]
 800ad40:	69fa      	ldr	r2, [r7, #28]
 800ad42:	e841 2300 	strex	r3, r2, [r1]
 800ad46:	617b      	str	r3, [r7, #20]
   return(result);
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e6      	bne.n	800ad1c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad50:	2200      	movs	r2, #0
 800ad52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d107      	bne.n	800ad6c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad62:	4619      	mov	r1, r3
 800ad64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad66:	f7f6 f8bd 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad6a:	e002      	b.n	800ad72 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ad6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad6e:	f7fe fc63 	bl	8009638 <HAL_UART_RxCpltCallback>
}
 800ad72:	bf00      	nop
 800ad74:	3770      	adds	r7, #112	@ 0x70
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b084      	sub	sp, #16
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d109      	bne.n	800adaa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad9c:	085b      	lsrs	r3, r3, #1
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	4619      	mov	r1, r3
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7f6 f89e 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ada8:	e002      	b.n	800adb0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f7fe fc4e 	bl	800964c <HAL_UART_RxHalfCpltCallback>
}
 800adb0:	bf00      	nop
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adcc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800add4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade0:	2b80      	cmp	r3, #128	@ 0x80
 800ade2:	d109      	bne.n	800adf8 <UART_DMAError+0x40>
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	2b21      	cmp	r3, #33	@ 0x21
 800ade8:	d106      	bne.n	800adf8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2200      	movs	r2, #0
 800adee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800adf2:	6978      	ldr	r0, [r7, #20]
 800adf4:	f7ff fe2c 	bl	800aa50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae02:	2b40      	cmp	r3, #64	@ 0x40
 800ae04:	d109      	bne.n	800ae1a <UART_DMAError+0x62>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b22      	cmp	r3, #34	@ 0x22
 800ae0a:	d106      	bne.n	800ae1a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ae14:	6978      	ldr	r0, [r7, #20]
 800ae16:	f7ff fe5d 	bl	800aad4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae20:	f043 0210 	orr.w	r2, r3, #16
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae2a:	6978      	ldr	r0, [r7, #20]
 800ae2c:	f7fe fc18 	bl	8009660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae30:	bf00      	nop
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7fe fc06 	bl	8009660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	e853 3f00 	ldrex	r3, [r3]
 800ae70:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae78:	61fb      	str	r3, [r7, #28]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	61bb      	str	r3, [r7, #24]
 800ae84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae86:	6979      	ldr	r1, [r7, #20]
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	e841 2300 	strex	r3, r2, [r1]
 800ae8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1e6      	bne.n	800ae64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7fe fbb3 	bl	8009610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeaa:	bf00      	nop
 800aeac:	3720      	adds	r7, #32
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b09c      	sub	sp, #112	@ 0x70
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aec2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aecc:	2b22      	cmp	r3, #34	@ 0x22
 800aece:	f040 80be 	bne.w	800b04e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aedc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aee0:	b2d9      	uxtb	r1, r3
 800aee2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeec:	400a      	ands	r2, r1
 800aeee:	b2d2      	uxtb	r2, r2
 800aef0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af02:	b29b      	uxth	r3, r3
 800af04:	3b01      	subs	r3, #1
 800af06:	b29a      	uxth	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	f040 80a1 	bne.w	800b05e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af30:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e6      	bne.n	800af1c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3308      	adds	r3, #8
 800af54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af60:	f023 0301 	bic.w	r3, r3, #1
 800af64:	667b      	str	r3, [r7, #100]	@ 0x64
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3308      	adds	r3, #8
 800af6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800af6e:	647a      	str	r2, [r7, #68]	@ 0x44
 800af70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e5      	bne.n	800af4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a33      	ldr	r2, [pc, #204]	@ (800b068 <UART_RxISR_8BIT+0x1b4>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d01f      	beq.n	800afe0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d018      	beq.n	800afe0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb6:	e853 3f00 	ldrex	r3, [r3]
 800afba:	623b      	str	r3, [r7, #32]
   return(result);
 800afbc:	6a3b      	ldr	r3, [r7, #32]
 800afbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800afc2:	663b      	str	r3, [r7, #96]	@ 0x60
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	461a      	mov	r2, r3
 800afca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afcc:	633b      	str	r3, [r7, #48]	@ 0x30
 800afce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afd4:	e841 2300 	strex	r3, r2, [r1]
 800afd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1e6      	bne.n	800afae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d12e      	bne.n	800b046 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	e853 3f00 	ldrex	r3, [r3]
 800affa:	60fb      	str	r3, [r7, #12]
   return(result);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f023 0310 	bic.w	r3, r3, #16
 800b002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	461a      	mov	r2, r3
 800b00a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b00c:	61fb      	str	r3, [r7, #28]
 800b00e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	69b9      	ldr	r1, [r7, #24]
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	617b      	str	r3, [r7, #20]
   return(result);
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e6      	bne.n	800afee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	f003 0310 	and.w	r3, r3, #16
 800b02a:	2b10      	cmp	r3, #16
 800b02c:	d103      	bne.n	800b036 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2210      	movs	r2, #16
 800b034:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7f5 ff50 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b044:	e00b      	b.n	800b05e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7fe faf6 	bl	8009638 <HAL_UART_RxCpltCallback>
}
 800b04c:	e007      	b.n	800b05e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	699a      	ldr	r2, [r3, #24]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f042 0208 	orr.w	r2, r2, #8
 800b05c:	619a      	str	r2, [r3, #24]
}
 800b05e:	bf00      	nop
 800b060:	3770      	adds	r7, #112	@ 0x70
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	58000c00 	.word	0x58000c00

0800b06c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b09c      	sub	sp, #112	@ 0x70
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b07a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b084:	2b22      	cmp	r3, #34	@ 0x22
 800b086:	f040 80be 	bne.w	800b206 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b090:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b098:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b09a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b09e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ae:	1c9a      	adds	r2, r3, #2
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f040 80a1 	bne.w	800b216 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b0e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e6      	bne.n	800b0d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	f023 0301 	bic.w	r3, r3, #1
 800b11c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3308      	adds	r3, #8
 800b124:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b126:	643a      	str	r2, [r7, #64]	@ 0x40
 800b128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b12c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e5      	bne.n	800b106 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a33      	ldr	r2, [pc, #204]	@ (800b220 <UART_RxISR_16BIT+0x1b4>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d01f      	beq.n	800b198 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d018      	beq.n	800b198 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	e853 3f00 	ldrex	r3, [r3]
 800b172:	61fb      	str	r3, [r7, #28]
   return(result);
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b17a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b186:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b18a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e6      	bne.n	800b166 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d12e      	bne.n	800b1fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	e853 3f00 	ldrex	r3, [r3]
 800b1b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f023 0310 	bic.w	r3, r3, #16
 800b1ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c8:	6979      	ldr	r1, [r7, #20]
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	e841 2300 	strex	r3, r2, [r1]
 800b1d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e6      	bne.n	800b1a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f003 0310 	and.w	r3, r3, #16
 800b1e2:	2b10      	cmp	r3, #16
 800b1e4:	d103      	bne.n	800b1ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2210      	movs	r2, #16
 800b1ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7f5 fe74 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1fc:	e00b      	b.n	800b216 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7fe fa1a 	bl	8009638 <HAL_UART_RxCpltCallback>
}
 800b204:	e007      	b.n	800b216 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f042 0208 	orr.w	r2, r2, #8
 800b214:	619a      	str	r2, [r3, #24]
}
 800b216:	bf00      	nop
 800b218:	3770      	adds	r7, #112	@ 0x70
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	58000c00 	.word	0x58000c00

0800b224 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b0ac      	sub	sp, #176	@ 0xb0
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b232:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	69db      	ldr	r3, [r3, #28]
 800b23c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b25a:	2b22      	cmp	r3, #34	@ 0x22
 800b25c:	f040 8181 	bne.w	800b562 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b266:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b26a:	e124      	b.n	800b4b6 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b272:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b276:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b27a:	b2d9      	uxtb	r1, r3
 800b27c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b280:	b2da      	uxtb	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b286:	400a      	ands	r2, r1
 800b288:	b2d2      	uxtb	r2, r2
 800b28a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b2b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d053      	beq.n	800b366 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d011      	beq.n	800b2ee <UART_RxISR_8BIT_FIFOEN+0xca>
 800b2ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b2ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e4:	f043 0201 	orr.w	r2, r3, #1
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d011      	beq.n	800b31e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b2fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00b      	beq.n	800b31e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2202      	movs	r2, #2
 800b30c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b314:	f043 0204 	orr.w	r2, r3, #4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b31e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b322:	f003 0304 	and.w	r3, r3, #4
 800b326:	2b00      	cmp	r3, #0
 800b328:	d011      	beq.n	800b34e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b32a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00b      	beq.n	800b34e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2204      	movs	r2, #4
 800b33c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b344:	f043 0202 	orr.w	r2, r3, #2
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b354:	2b00      	cmp	r3, #0
 800b356:	d006      	beq.n	800b366 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7fe f981 	bl	8009660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f040 80a1 	bne.w	800b4b6 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b37c:	e853 3f00 	ldrex	r3, [r3]
 800b380:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	461a      	mov	r2, r3
 800b392:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b396:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b398:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b39c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b3a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e4      	bne.n	800b374 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b3ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3bc:	4b6f      	ldr	r3, [pc, #444]	@ (800b57c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3308      	adds	r3, #8
 800b3ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b3ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b3d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b3d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b3d6:	e841 2300 	strex	r3, r2, [r1]
 800b3da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b3dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1e3      	bne.n	800b3aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a61      	ldr	r2, [pc, #388]	@ (800b580 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d021      	beq.n	800b444 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d01a      	beq.n	800b444 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b416:	e853 3f00 	ldrex	r3, [r3]
 800b41a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b41c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b41e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b430:	657b      	str	r3, [r7, #84]	@ 0x54
 800b432:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b436:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b43e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e4      	bne.n	800b40e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d130      	bne.n	800b4ae <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b45a:	e853 3f00 	ldrex	r3, [r3]
 800b45e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b462:	f023 0310 	bic.w	r3, r3, #16
 800b466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b474:	643b      	str	r3, [r7, #64]	@ 0x40
 800b476:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b47a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e4      	bne.n	800b452 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	f003 0310 	and.w	r3, r3, #16
 800b492:	2b10      	cmp	r3, #16
 800b494:	d103      	bne.n	800b49e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2210      	movs	r2, #16
 800b49c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7f5 fd1c 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b4ac:	e00e      	b.n	800b4cc <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7fe f8c2 	bl	8009638 <HAL_UART_RxCpltCallback>
        break;
 800b4b4:	e00a      	b.n	800b4cc <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b4b6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d006      	beq.n	800b4cc <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800b4be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f47f aed0 	bne.w	800b26c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4d2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b4d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d049      	beq.n	800b572 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b4e4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d242      	bcs.n	800b572 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3308      	adds	r3, #8
 800b50c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e3      	bne.n	800b4ec <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a17      	ldr	r2, [pc, #92]	@ (800b584 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b528:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	60bb      	str	r3, [r7, #8]
   return(result);
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f043 0320 	orr.w	r3, r3, #32
 800b53e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b54c:	61bb      	str	r3, [r7, #24]
 800b54e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6979      	ldr	r1, [r7, #20]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	613b      	str	r3, [r7, #16]
   return(result);
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e4      	bne.n	800b52a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b560:	e007      	b.n	800b572 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	699a      	ldr	r2, [r3, #24]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f042 0208 	orr.w	r2, r2, #8
 800b570:	619a      	str	r2, [r3, #24]
}
 800b572:	bf00      	nop
 800b574:	37b0      	adds	r7, #176	@ 0xb0
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	effffffe 	.word	0xeffffffe
 800b580:	58000c00 	.word	0x58000c00
 800b584:	0800aeb5 	.word	0x0800aeb5

0800b588 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b0ae      	sub	sp, #184	@ 0xb8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b596:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5be:	2b22      	cmp	r3, #34	@ 0x22
 800b5c0:	f040 8185 	bne.w	800b8ce <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b5ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5ce:	e128      	b.n	800b822 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b5e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b5e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5f8:	1c9a      	adds	r2, r3, #2
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b604:	b29b      	uxth	r3, r3
 800b606:	3b01      	subs	r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b61a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	2b00      	cmp	r3, #0
 800b624:	d053      	beq.n	800b6ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d011      	beq.n	800b656 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00b      	beq.n	800b656 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2201      	movs	r2, #1
 800b644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b64c:	f043 0201 	orr.w	r2, r3, #1
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b65a:	f003 0302 	and.w	r3, r3, #2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d011      	beq.n	800b686 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00b      	beq.n	800b686 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2202      	movs	r2, #2
 800b674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b67c:	f043 0204 	orr.w	r2, r3, #4
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b68a:	f003 0304 	and.w	r3, r3, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d011      	beq.n	800b6b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00b      	beq.n	800b6b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2204      	movs	r2, #4
 800b6a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ac:	f043 0202 	orr.w	r2, r3, #2
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7fd ffcd 	bl	8009660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f040 80a3 	bne.w	800b822 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b6ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b702:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b704:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b706:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b70a:	e841 2300 	strex	r3, r2, [r1]
 800b70e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1e2      	bne.n	800b6dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3308      	adds	r3, #8
 800b71c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b726:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b728:	4b6f      	ldr	r3, [pc, #444]	@ (800b8e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b72a:	4013      	ands	r3, r2
 800b72c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3308      	adds	r3, #8
 800b736:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b73a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b73c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b740:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b742:	e841 2300 	strex	r3, r2, [r1]
 800b746:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e3      	bne.n	800b716 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2220      	movs	r2, #32
 800b752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a61      	ldr	r2, [pc, #388]	@ (800b8ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d021      	beq.n	800b7b0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d01a      	beq.n	800b7b0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b782:	e853 3f00 	ldrex	r3, [r3]
 800b786:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b78a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b78e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b79c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b79e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7a4:	e841 2300 	strex	r3, r2, [r1]
 800b7a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1e4      	bne.n	800b77a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d130      	bne.n	800b81a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ce:	f023 0310 	bic.w	r3, r3, #16
 800b7d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e4      	bne.n	800b7be <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	f003 0310 	and.w	r3, r3, #16
 800b7fe:	2b10      	cmp	r3, #16
 800b800:	d103      	bne.n	800b80a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2210      	movs	r2, #16
 800b808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7f5 fb66 	bl	8000ee4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b818:	e00e      	b.n	800b838 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fd ff0c 	bl	8009638 <HAL_UART_RxCpltCallback>
        break;
 800b820:	e00a      	b.n	800b838 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b822:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b826:	2b00      	cmp	r3, #0
 800b828:	d006      	beq.n	800b838 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800b82a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b82e:	f003 0320 	and.w	r3, r3, #32
 800b832:	2b00      	cmp	r3, #0
 800b834:	f47f aecc 	bne.w	800b5d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b83e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b842:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b846:	2b00      	cmp	r3, #0
 800b848:	d049      	beq.n	800b8de <UART_RxISR_16BIT_FIFOEN+0x356>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b850:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b854:	429a      	cmp	r2, r3
 800b856:	d242      	bcs.n	800b8de <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3308      	adds	r3, #8
 800b85e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	623b      	str	r3, [r7, #32]
   return(result);
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b86e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3308      	adds	r3, #8
 800b878:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b87c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e3      	bne.n	800b858 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a17      	ldr	r2, [pc, #92]	@ (800b8f0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b894:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	e853 3f00 	ldrex	r3, [r3]
 800b8a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f043 0320 	orr.w	r3, r3, #32
 800b8aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	69b9      	ldr	r1, [r7, #24]
 800b8be:	69fa      	ldr	r2, [r7, #28]
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e4      	bne.n	800b896 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8cc:	e007      	b.n	800b8de <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	699a      	ldr	r2, [r3, #24]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f042 0208 	orr.w	r2, r2, #8
 800b8dc:	619a      	str	r2, [r3, #24]
}
 800b8de:	bf00      	nop
 800b8e0:	37b8      	adds	r7, #184	@ 0xb8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	effffffe 	.word	0xeffffffe
 800b8ec:	58000c00 	.word	0x58000c00
 800b8f0:	0800b06d 	.word	0x0800b06d

0800b8f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d101      	bne.n	800b946 <HAL_UARTEx_DisableFifoMode+0x16>
 800b942:	2302      	movs	r3, #2
 800b944:	e027      	b.n	800b996 <HAL_UARTEx_DisableFifoMode+0x66>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2224      	movs	r2, #36	@ 0x24
 800b952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b974:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2220      	movs	r2, #32
 800b988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d101      	bne.n	800b9ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9b6:	2302      	movs	r3, #2
 800b9b8:	e02d      	b.n	800ba16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2224      	movs	r2, #36	@ 0x24
 800b9c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0201 	bic.w	r2, r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f8a4 	bl	800bb44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba32:	2302      	movs	r3, #2
 800ba34:	e02d      	b.n	800ba92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2224      	movs	r2, #36	@ 0x24
 800ba42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0201 	bic.w	r2, r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f866 	bl	800bb44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b08c      	sub	sp, #48	@ 0x30
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	4613      	mov	r3, r2
 800baa6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800baae:	2b20      	cmp	r3, #32
 800bab0:	d142      	bne.n	800bb38 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bab8:	88fb      	ldrh	r3, [r7, #6]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e03b      	b.n	800bb3a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bace:	88fb      	ldrh	r3, [r7, #6]
 800bad0:	461a      	mov	r2, r3
 800bad2:	68b9      	ldr	r1, [r7, #8]
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7fe ff15 	bl	800a904 <UART_Start_Receive_DMA>
 800bada:	4603      	mov	r3, r0
 800badc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bae0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d124      	bne.n	800bb32 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baec:	2b01      	cmp	r3, #1
 800baee:	d11d      	bne.n	800bb2c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2210      	movs	r2, #16
 800baf6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	e853 3f00 	ldrex	r3, [r3]
 800bb04:	617b      	str	r3, [r7, #20]
   return(result);
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f043 0310 	orr.w	r3, r3, #16
 800bb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb18:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1a:	6a39      	ldr	r1, [r7, #32]
 800bb1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb1e:	e841 2300 	strex	r3, r2, [r1]
 800bb22:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1e6      	bne.n	800baf8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bb2a:	e002      	b.n	800bb32 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bb32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb36:	e000      	b.n	800bb3a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bb38:	2302      	movs	r3, #2
  }
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3730      	adds	r7, #48	@ 0x30
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
	...

0800bb44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d108      	bne.n	800bb66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb64:	e031      	b.n	800bbca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb66:	2310      	movs	r3, #16
 800bb68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb6a:	2310      	movs	r3, #16
 800bb6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	0e5b      	lsrs	r3, r3, #25
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	f003 0307 	and.w	r3, r3, #7
 800bb7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	0f5b      	lsrs	r3, r3, #29
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	f003 0307 	and.w	r3, r3, #7
 800bb8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
 800bb90:	7b3a      	ldrb	r2, [r7, #12]
 800bb92:	4911      	ldr	r1, [pc, #68]	@ (800bbd8 <UARTEx_SetNbDataToProcess+0x94>)
 800bb94:	5c8a      	ldrb	r2, [r1, r2]
 800bb96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb9a:	7b3a      	ldrb	r2, [r7, #12]
 800bb9c:	490f      	ldr	r1, [pc, #60]	@ (800bbdc <UARTEx_SetNbDataToProcess+0x98>)
 800bb9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bba0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	7b7a      	ldrb	r2, [r7, #13]
 800bbb0:	4909      	ldr	r1, [pc, #36]	@ (800bbd8 <UARTEx_SetNbDataToProcess+0x94>)
 800bbb2:	5c8a      	ldrb	r2, [r1, r2]
 800bbb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbb8:	7b7a      	ldrb	r2, [r7, #13]
 800bbba:	4908      	ldr	r1, [pc, #32]	@ (800bbdc <UARTEx_SetNbDataToProcess+0x98>)
 800bbbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bbca:	bf00      	nop
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	0800f450 	.word	0x0800f450
 800bbdc:	0800f458 	.word	0x0800f458

0800bbe0 <Sensor_GNSS_Init>:

//------------------------------------------------------------------------------
// Call this once at startup to wire up the GNSS inside your SmartWatchData
//------------------------------------------------------------------------------
void Sensor_GNSS_Init(SmartWatchData_t *sw, UART_HandleTypeDef *huart)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
    // 1) initialize the GNSS handle inside sw
    GNSS_Init(&sw->gps_data, huart);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 f9ce 	bl	800bf94 <GNSS_Init>

    // 2) load your base configuration (turns off NMEA, enables UBX + Galileo)
    GNSS_LoadConfig(&sw->gps_data);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 fd96 	bl	800c730 <GNSS_LoadConfig>
    HAL_Delay(200);
 800bc04:	20c8      	movs	r0, #200	@ 0xc8
 800bc06:	f7f6 f92d 	bl	8001e64 <HAL_Delay>

    // 3) apply the “stationary” dynamic model for best static accuracy
    GNSS_SetMode(&sw->gps_data, Stationary);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bc10:	2101      	movs	r1, #1
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 faa8 	bl	800c168 <GNSS_SetMode>
    HAL_Delay(100);
 800bc18:	2064      	movs	r0, #100	@ 0x64
 800bc1a:	f7f6 f923 	bl	8001e64 <HAL_Delay>

    // 4) seed your 1 Hz timer
    sw->GNSS_Timer = HAL_GetTick();
 800bc1e:	f7f6 f915 	bl	8001e4c <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

    // mark invalid until we get a fix
    sw->gps_data.fixType = 0;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 22bf 	strb.w	r2, [r3, #703]	@ 0x2bf
}
 800bc32:	bf00      	nop
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
	...

0800bc3c <Sensor_GNSS_Update>:

//------------------------------------------------------------------------------
// Call this from your main loop (or a scheduler) to refresh GPS data at ~1 Hz
//------------------------------------------------------------------------------
void Sensor_GNSS_Update(SmartWatchData_t *sw)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800bc44:	f7f6 f902 	bl	8001e4c <HAL_GetTick>
 800bc48:	60f8      	str	r0, [r7, #12]

    switch (sw->gnss_state) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <Sensor_GNSS_Update+0x1e>
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d017      	beq.n	800bc88 <Sensor_GNSS_Update+0x4c>
                sw->gnss_state           = 0;
                sw->gnss_nextRequestTick = now + 1000;
            }
            break;
    }
}
 800bc58:	e07e      	b.n	800bd58 <Sensor_GNSS_Update+0x11c>
            if (now >= sw->gnss_nextRequestTick) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d375      	bcc.n	800bd52 <Sensor_GNSS_Update+0x116>
                GNSS_GetPVTData(&sw->gps_data);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 fa41 	bl	800c0f4 <GNSS_GetPVTData>
                sw->gnss_state             = 1;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
                sw->gnss_nextRequestTick   = now + 100;   // parse in 100 ms
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
            break;
 800bc86:	e064      	b.n	800bd52 <Sensor_GNSS_Update+0x116>
            if (now >= sw->gnss_nextRequestTick) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d360      	bcc.n	800bd56 <Sensor_GNSS_Update+0x11a>
                GNSS_ParseBuffer(&sw->gps_data);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 f9c3 	bl	800c026 <GNSS_ParseBuffer>
                if (sw->gps_data.fixType >= 3) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 32bf 	ldrb.w	r3, [r3, #703]	@ 0x2bf
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d944      	bls.n	800bd34 <Sensor_GNSS_Update+0xf8>
                    sw->latitude      = sw->gps_data.fLat;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
                    sw->longitude     = sw->gps_data.fLon;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
                    sw->altitude      = sw->gps_data.hMSL / 1000.0f;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800bcc8:	ee07 3a90 	vmov	s15, r3
 800bccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bcd0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800bd60 <Sensor_GNSS_Update+0x124>
 800bcd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	edc3 7ac1 	vstr	s15, [r3, #772]	@ 0x304
                    sw->year          = sw->gps_data.year;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8b3 22b6 	ldrh.w	r2, [r3, #694]	@ 0x2b6
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8a3 2308 	strh.w	r2, [r3, #776]	@ 0x308
                    sw->month         = sw->gps_data.month;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 32ba 	ldrb.w	r3, [r3, #698]	@ 0x2ba
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8a3 230a 	strh.w	r2, [r3, #778]	@ 0x30a
                    sw->day           = sw->gps_data.day;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 32bb 	ldrb.w	r3, [r3, #699]	@ 0x2bb
 800bcfe:	461a      	mov	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8a3 230c 	strh.w	r2, [r3, #780]	@ 0x30c
                    sw->hour          = sw->gps_data.hour;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 22bc 	ldrb.w	r2, [r3, #700]	@ 0x2bc
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f883 230e 	strb.w	r2, [r3, #782]	@ 0x30e
                    sw->minute        = sw->gps_data.min;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 22bd 	ldrb.w	r2, [r3, #701]	@ 0x2bd
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f883 230f 	strb.w	r2, [r3, #783]	@ 0x30f
                    sw->second        = sw->gps_data.sec;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 22be 	ldrb.w	r2, [r3, #702]	@ 0x2be
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
                    sw->gps_fix_valid = 1;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
 800bd32:	e003      	b.n	800bd3c <Sensor_GNSS_Update+0x100>
                    sw->gps_fix_valid = 0;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
                sw->gnss_state           = 0;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
                sw->gnss_nextRequestTick = now + 1000;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
            break;
 800bd50:	e001      	b.n	800bd56 <Sensor_GNSS_Update+0x11a>
            break;
 800bd52:	bf00      	nop
 800bd54:	e000      	b.n	800bd58 <Sensor_GNSS_Update+0x11c>
            break;
 800bd56:	bf00      	nop
}
 800bd58:	bf00      	nop
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	447a0000 	.word	0x447a0000

0800bd64 <SendSmartWatchData>:


// Transmit all key fields of your SmartWatchData_t as a single CSV line.
// You can adjust which fields you include or change formatting as needed.
void SendSmartWatchData(UART_HandleTypeDef *huart, const SmartWatchData_t *sw)
{
 800bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd66:	ed2d 8b0a 	vpush	{d8-d12}
 800bd6a:	b0eb      	sub	sp, #428	@ 0x1ac
 800bd6c:	af24      	add	r7, sp, #144	@ 0x90
 800bd6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bd72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bd76:	6018      	str	r0, [r3, #0]
 800bd78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bd7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bd80:	6019      	str	r1, [r3, #0]
        "Ax=%.3f, Ay=%.3f, Az=%.3f, "
        "Gx=%.3f, Gy=%.3f, Gz=%.3f, "
        "HR=%d, SpO2=%.1f, "
        "Lat=%.6f, Lon=%.6f, Alt=%.2f, "
        "Date=%04u-%02u-%02u, Time=%02u:%02u:%02u, Fix=%u\r\n",
        sw->temperature,
 800bd82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bd86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
    int len = snprintf(buf, sizeof(buf),
 800bd90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        sw->pressure,
 800bd94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bd98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
    int len = snprintf(buf, sizeof(buf),
 800bda2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        sw->humidity,
 800bda6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bdaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	edd3 5a0f 	vldr	s11, [r3, #60]	@ 0x3c
    int len = snprintf(buf, sizeof(buf),
 800bdb4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
        sw->accel_g[0][0],
 800bdb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bdbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	edd3 4a11 	vldr	s9, [r3, #68]	@ 0x44
    int len = snprintf(buf, sizeof(buf),
 800bdc6:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
        sw->accel_g[0][1],
 800bdca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bdce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	edd3 3a12 	vldr	s7, [r3, #72]	@ 0x48
    int len = snprintf(buf, sizeof(buf),
 800bdd8:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
        sw->accel_g[0][2],
 800bddc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bde0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	edd3 2a13 	vldr	s5, [r3, #76]	@ 0x4c
    int len = snprintf(buf, sizeof(buf),
 800bdea:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
        sw->gyro_dps[0][0],
 800bdee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bdf2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	edd3 1a2f 	vldr	s3, [r3, #188]	@ 0xbc
    int len = snprintf(buf, sizeof(buf),
 800bdfc:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
        sw->gyro_dps[0][1],
 800be00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	edd3 0a30 	vldr	s1, [r3, #192]	@ 0xc0
    int len = snprintf(buf, sizeof(buf),
 800be0e:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
        sw->gyro_dps[0][2],
 800be12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be16:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	ed93 8a31 	vldr	s16, [r3, #196]	@ 0xc4
    int len = snprintf(buf, sizeof(buf),
 800be20:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
        sw->heart_rate,
 800be24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f9b3 3240 	ldrsh.w	r3, [r3, #576]	@ 0x240
    int len = snprintf(buf, sizeof(buf),
 800be32:	607b      	str	r3, [r7, #4]
        sw->spo2,
 800be34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	ed93 9a91 	vldr	s18, [r3, #580]	@ 0x244
    int len = snprintf(buf, sizeof(buf),
 800be42:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
        sw->latitude,
 800be46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	ed93 aabf 	vldr	s20, [r3, #764]	@ 0x2fc
    int len = snprintf(buf, sizeof(buf),
 800be54:	eeb7 aaca 	vcvt.f64.f32	d10, s20
        sw->longitude,
 800be58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	ed93 bac0 	vldr	s22, [r3, #768]	@ 0x300
    int len = snprintf(buf, sizeof(buf),
 800be66:	eeb7 bacb 	vcvt.f64.f32	d11, s22
        sw->altitude,
 800be6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	ed93 cac1 	vldr	s24, [r3, #772]	@ 0x304
    int len = snprintf(buf, sizeof(buf),
 800be78:	eeb7 cacc 	vcvt.f64.f32	d12, s24
        sw->year,
 800be7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f8b3 3308 	ldrh.w	r3, [r3, #776]	@ 0x308
    int len = snprintf(buf, sizeof(buf),
 800be8a:	4619      	mov	r1, r3
        sw->month,
 800be8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f8b3 330a 	ldrh.w	r3, [r3, #778]	@ 0x30a
    int len = snprintf(buf, sizeof(buf),
 800be9a:	4618      	mov	r0, r3
        sw->day,
 800be9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bea0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f8b3 330c 	ldrh.w	r3, [r3, #780]	@ 0x30c
    int len = snprintf(buf, sizeof(buf),
 800beaa:	461c      	mov	r4, r3
        sw->hour,
 800beac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800beb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f893 330e 	ldrb.w	r3, [r3, #782]	@ 0x30e
    int len = snprintf(buf, sizeof(buf),
 800beba:	461d      	mov	r5, r3
        sw->minute,
 800bebc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bec0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f893 330f 	ldrb.w	r3, [r3, #783]	@ 0x30f
    int len = snprintf(buf, sizeof(buf),
 800beca:	461e      	mov	r6, r3
        sw->second,
 800becc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bed0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
    int len = snprintf(buf, sizeof(buf),
 800beda:	603b      	str	r3, [r7, #0]
        sw->gps_fix_valid
 800bedc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bee0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f893 3311 	ldrb.w	r3, [r3, #785]	@ 0x311
    int len = snprintf(buf, sizeof(buf),
 800beea:	461a      	mov	r2, r3
 800beec:	f107 0314 	add.w	r3, r7, #20
 800bef0:	9222      	str	r2, [sp, #136]	@ 0x88
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	9221      	str	r2, [sp, #132]	@ 0x84
 800bef6:	9620      	str	r6, [sp, #128]	@ 0x80
 800bef8:	951f      	str	r5, [sp, #124]	@ 0x7c
 800befa:	941e      	str	r4, [sp, #120]	@ 0x78
 800befc:	901d      	str	r0, [sp, #116]	@ 0x74
 800befe:	911c      	str	r1, [sp, #112]	@ 0x70
 800bf00:	ed8d cb1a 	vstr	d12, [sp, #104]	@ 0x68
 800bf04:	ed8d bb18 	vstr	d11, [sp, #96]	@ 0x60
 800bf08:	ed8d ab16 	vstr	d10, [sp, #88]	@ 0x58
 800bf0c:	ed8d 9b14 	vstr	d9, [sp, #80]	@ 0x50
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	9212      	str	r2, [sp, #72]	@ 0x48
 800bf14:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
 800bf18:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 800bf1c:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 800bf20:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 800bf24:	ed8d 3b08 	vstr	d3, [sp, #32]
 800bf28:	ed8d 4b06 	vstr	d4, [sp, #24]
 800bf2c:	ed8d 5b04 	vstr	d5, [sp, #16]
 800bf30:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bf34:	ed8d 7b00 	vstr	d7, [sp]
 800bf38:	4a0e      	ldr	r2, [pc, #56]	@ (800bf74 <SendSmartWatchData+0x210>)
 800bf3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f001 f9de 	bl	800d300 <sniprintf>
 800bf44:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    );

    // Transmit (blocking here; you can switch to DMA if you like)
    HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800bf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	f107 0114 	add.w	r1, r7, #20
 800bf52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800bf56:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5e:	6800      	ldr	r0, [r0, #0]
 800bf60:	f7fc fd6f 	bl	8008a42 <HAL_UART_Transmit>
}
 800bf64:	bf00      	nop
 800bf66:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	ecbd 8b0a 	vpop	{d8-d12}
 800bf70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf72:	bf00      	nop
 800bf74:	0800f358 	.word	0x0800f358

0800bf78 <Sensor_SmartWatch_log>:

//------------------------------------------------------------------------------
// Example: call SendSmartWatchData() periodically in your main loop or scheduler
//------------------------------------------------------------------------------
void Sensor_SmartWatch_log(const SmartWatchData_t *sw)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
    SendSmartWatchData(&STLINK_UART, sw);
 800bf80:	6879      	ldr	r1, [r7, #4]
 800bf82:	4803      	ldr	r0, [pc, #12]	@ (800bf90 <Sensor_SmartWatch_log+0x18>)
 800bf84:	f7ff feee 	bl	800bd64 <SendSmartWatchData>
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	24000620 	.word	0x24000620

0800bf94 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = 0;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = 0;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = 0;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = 0;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = 0;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = 0;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->lon = 0;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->lat = 0;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->height = 0;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	GNSS->hMSL = 0;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->hAcc = 0;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->vAcc = 0;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	GNSS->gSpeed = 0;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	GNSS->headMot = 0;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 800c01a:	bf00      	nop
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	e057      	b.n	800c0e4 <GNSS_ParseBuffer+0xbe>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	4413      	add	r3, r2
 800c03a:	3308      	adds	r3, #8
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	2bb5      	cmp	r3, #181	@ 0xb5
 800c040:	d14d      	bne.n	800c0de <GNSS_ParseBuffer+0xb8>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3301      	adds	r3, #1
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	4413      	add	r3, r2
 800c04a:	7a1b      	ldrb	r3, [r3, #8]
 800c04c:	2b62      	cmp	r3, #98	@ 0x62
 800c04e:	d146      	bne.n	800c0de <GNSS_ParseBuffer+0xb8>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	3302      	adds	r3, #2
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	4413      	add	r3, r2
 800c058:	7a1b      	ldrb	r3, [r3, #8]
 800c05a:	2b27      	cmp	r3, #39	@ 0x27
 800c05c:	d10a      	bne.n	800c074 <GNSS_ParseBuffer+0x4e>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3303      	adds	r3, #3
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	4413      	add	r3, r2
 800c066:	7a1b      	ldrb	r3, [r3, #8]
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d103      	bne.n	800c074 <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f85b 	bl	800c128 <GNSS_ParseUniqID>
 800c072:	e034      	b.n	800c0de <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3302      	adds	r3, #2
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	7a1b      	ldrb	r3, [r3, #8]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d10a      	bne.n	800c098 <GNSS_ParseBuffer+0x72>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3303      	adds	r3, #3
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4413      	add	r3, r2
 800c08a:	7a1b      	ldrb	r3, [r3, #8]
 800c08c:	2b21      	cmp	r3, #33	@ 0x21
 800c08e:	d103      	bne.n	800c098 <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fa5f 	bl	800c554 <GNSS_ParseNavigatorData>
 800c096:	e022      	b.n	800c0de <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3302      	adds	r3, #2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	4413      	add	r3, r2
 800c0a0:	7a1b      	ldrb	r3, [r3, #8]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d10a      	bne.n	800c0bc <GNSS_ParseBuffer+0x96>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3303      	adds	r3, #3
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	7a1b      	ldrb	r3, [r3, #8]
 800c0b0:	2b07      	cmp	r3, #7
 800c0b2:	d103      	bne.n	800c0bc <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f8eb 	bl	800c290 <GNSS_ParsePVTData>
 800c0ba:	e010      	b.n	800c0de <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	3302      	adds	r3, #2
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	7a1b      	ldrb	r3, [r3, #8]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d109      	bne.n	800c0de <GNSS_ParseBuffer+0xb8>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3303      	adds	r3, #3
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	7a1b      	ldrb	r3, [r3, #8]
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d102      	bne.n	800c0de <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fa6f 	bl	800c5bc <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b64      	cmp	r3, #100	@ 0x64
 800c0e8:	dda4      	ble.n	800c034 <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2208      	movs	r2, #8
 800c102:	4908      	ldr	r1, [pc, #32]	@ (800c124 <GNSS_GetPVTData+0x30>)
 800c104:	4618      	mov	r0, r3
 800c106:	f7fc fd77 	bl	8008bf8 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS->uartWorkingBuffer, 100);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	3308      	adds	r3, #8
 800c112:	2264      	movs	r2, #100	@ 0x64
 800c114:	4619      	mov	r1, r3
 800c116:	f7fc fd23 	bl	8008b60 <HAL_UART_Receive_IT>
}
 800c11a:	bf00      	nop
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	0800f4c4 	.word	0x0800f4c4

0800c128 <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 800c130:	2300      	movs	r3, #0
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e00d      	b.n	800c152 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS->uartWorkingBuffer[10 + var];
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	330a      	adds	r3, #10
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	7a19      	ldrb	r1, [r3, #8]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4413      	add	r3, r2
 800c146:	3304      	adds	r3, #4
 800c148:	460a      	mov	r2, r1
 800c14a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3301      	adds	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2b04      	cmp	r3, #4
 800c156:	ddee      	ble.n	800c136 <GNSS_ParseUniqID+0xe>
	}
}
 800c158:	bf00      	nop
 800c15a:	bf00      	nop
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
	...

0800c168 <GNSS_SetMode>:

/*!
 * Changing the GNSS mode.
 * Look at: 32.10.19 u-blox 8 Receiver description
 */
void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	807b      	strh	r3, [r7, #2]
	if (gnssMode == 0) {
 800c174:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d107      	bne.n	800c18c <GNSS_SetMode+0x24>
		HAL_UART_Transmit_DMA(GNSS->huart, setPortableMode,sizeof(setPortableMode) / sizeof(uint8_t));
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	222c      	movs	r2, #44	@ 0x2c
 800c182:	493a      	ldr	r1, [pc, #232]	@ (800c26c <GNSS_SetMode+0x104>)
 800c184:	4618      	mov	r0, r3
 800c186:	f7fc fd37 	bl	8008bf8 <HAL_UART_Transmit_DMA>
	} else if (gnssMode == 8) {
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
	} else if (gnssMode == 9) {
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
	}
}
 800c18a:	e06a      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 1) {
 800c18c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d107      	bne.n	800c1a4 <GNSS_SetMode+0x3c>
		HAL_UART_Transmit_DMA(GNSS->huart, setStationaryMode,sizeof(setStationaryMode) / sizeof(uint8_t));
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	222c      	movs	r2, #44	@ 0x2c
 800c19a:	4935      	ldr	r1, [pc, #212]	@ (800c270 <GNSS_SetMode+0x108>)
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fc fd2b 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c1a2:	e05e      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 2) {
 800c1a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d107      	bne.n	800c1bc <GNSS_SetMode+0x54>
		HAL_UART_Transmit_DMA(GNSS->huart, setPedestrianMode,sizeof(setPedestrianMode) / sizeof(uint8_t));
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	222c      	movs	r2, #44	@ 0x2c
 800c1b2:	4930      	ldr	r1, [pc, #192]	@ (800c274 <GNSS_SetMode+0x10c>)
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fc fd1f 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c1ba:	e052      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 3) {
 800c1bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d107      	bne.n	800c1d4 <GNSS_SetMode+0x6c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	222c      	movs	r2, #44	@ 0x2c
 800c1ca:	492b      	ldr	r1, [pc, #172]	@ (800c278 <GNSS_SetMode+0x110>)
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fc fd13 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c1d2:	e046      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 4) {
 800c1d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1d8:	2b04      	cmp	r3, #4
 800c1da:	d107      	bne.n	800c1ec <GNSS_SetMode+0x84>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	222c      	movs	r2, #44	@ 0x2c
 800c1e2:	4925      	ldr	r1, [pc, #148]	@ (800c278 <GNSS_SetMode+0x110>)
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fc fd07 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c1ea:	e03a      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 5) {
 800c1ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1f0:	2b05      	cmp	r3, #5
 800c1f2:	d107      	bne.n	800c204 <GNSS_SetMode+0x9c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone1GMode,sizeof(setAirbone1GMode) / sizeof(uint8_t));
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	222c      	movs	r2, #44	@ 0x2c
 800c1fa:	4920      	ldr	r1, [pc, #128]	@ (800c27c <GNSS_SetMode+0x114>)
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fc fcfb 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c202:	e02e      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 6) {
 800c204:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c208:	2b06      	cmp	r3, #6
 800c20a:	d107      	bne.n	800c21c <GNSS_SetMode+0xb4>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone2GMode,sizeof(setAirbone2GMode) / sizeof(uint8_t));
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	222c      	movs	r2, #44	@ 0x2c
 800c212:	491b      	ldr	r1, [pc, #108]	@ (800c280 <GNSS_SetMode+0x118>)
 800c214:	4618      	mov	r0, r3
 800c216:	f7fc fcef 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c21a:	e022      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 7) {
 800c21c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c220:	2b07      	cmp	r3, #7
 800c222:	d107      	bne.n	800c234 <GNSS_SetMode+0xcc>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone4GMode,sizeof(setAirbone4GMode) / sizeof(uint8_t));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	222c      	movs	r2, #44	@ 0x2c
 800c22a:	4916      	ldr	r1, [pc, #88]	@ (800c284 <GNSS_SetMode+0x11c>)
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fc fce3 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c232:	e016      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 8) {
 800c234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d107      	bne.n	800c24c <GNSS_SetMode+0xe4>
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	222c      	movs	r2, #44	@ 0x2c
 800c242:	4911      	ldr	r1, [pc, #68]	@ (800c288 <GNSS_SetMode+0x120>)
 800c244:	4618      	mov	r0, r3
 800c246:	f7fc fcd7 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c24a:	e00a      	b.n	800c262 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 9) {
 800c24c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c250:	2b09      	cmp	r3, #9
 800c252:	d106      	bne.n	800c262 <GNSS_SetMode+0xfa>
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	222c      	movs	r2, #44	@ 0x2c
 800c25a:	490c      	ldr	r1, [pc, #48]	@ (800c28c <GNSS_SetMode+0x124>)
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fc fccb 	bl	8008bf8 <HAL_UART_Transmit_DMA>
}
 800c262:	bf00      	nop
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	0800f4cc 	.word	0x0800f4cc
 800c270:	0800f4f8 	.word	0x0800f4f8
 800c274:	0800f524 	.word	0x0800f524
 800c278:	0800f550 	.word	0x0800f550
 800c27c:	0800f57c 	.word	0x0800f57c
 800c280:	0800f5a8 	.word	0x0800f5a8
 800c284:	0800f5d4 	.word	0x0800f5d4
 800c288:	0800f600 	.word	0x0800f600
 800c28c:	0800f62c 	.word	0x0800f62c

0800c290 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 800c290:	b480      	push	{r7}
 800c292:	b08b      	sub	sp, #44	@ 0x2c
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	7c9a      	ldrb	r2, [r3, #18]
 800c29c:	4b91      	ldr	r3, [pc, #580]	@ (800c4e4 <GNSS_ParsePVTData+0x254>)
 800c29e:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	7c9a      	ldrb	r2, [r3, #18]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	7cda      	ldrb	r2, [r3, #19]
 800c2ae:	4b8d      	ldr	r3, [pc, #564]	@ (800c4e4 <GNSS_ParsePVTData+0x254>)
 800c2b0:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	7cda      	ldrb	r2, [r3, #19]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 800c2bc:	4b89      	ldr	r3, [pc, #548]	@ (800c4e4 <GNSS_ParsePVTData+0x254>)
 800c2be:	881a      	ldrh	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7d1a      	ldrb	r2, [r3, #20]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7d5a      	ldrb	r2, [r3, #21]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	7d9a      	ldrb	r2, [r3, #22]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	7dda      	ldrb	r2, [r3, #23]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	7e1a      	ldrb	r2, [r3, #24]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77

	for (int var = 0; var < 4; ++var) {
 800c304:	2300      	movs	r3, #0
 800c306:	627b      	str	r3, [r7, #36]	@ 0x24
 800c308:	e017      	b.n	800c33a <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800c30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30c:	331e      	adds	r3, #30
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	4413      	add	r3, r2
 800c312:	7a19      	ldrb	r1, [r3, #8]
 800c314:	4a74      	ldr	r2, [pc, #464]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	4413      	add	r3, r2
 800c31a:	460a      	mov	r2, r1
 800c31c:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 800c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c320:	331e      	adds	r3, #30
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	4413      	add	r3, r2
 800c326:	7a19      	ldrb	r1, [r3, #8]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	4413      	add	r3, r2
 800c32e:	337c      	adds	r3, #124	@ 0x7c
 800c330:	460a      	mov	r2, r1
 800c332:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	3301      	adds	r3, #1
 800c338:	627b      	str	r3, [r7, #36]	@ 0x24
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	dde4      	ble.n	800c30a <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 800c340:	4b69      	ldr	r3, [pc, #420]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800c348:	4b67      	ldr	r3, [pc, #412]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	ee07 3a90 	vmov	s15, r3
 800c350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c354:	eddf 6a65 	vldr	s13, [pc, #404]	@ 800c4ec <GNSS_ParsePVTData+0x25c>
 800c358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	for (int var = 0; var < 4; ++var) {
 800c362:	2300      	movs	r3, #0
 800c364:	623b      	str	r3, [r7, #32]
 800c366:	e017      	b.n	800c398 <GNSS_ParsePVTData+0x108>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 800c368:	6a3b      	ldr	r3, [r7, #32]
 800c36a:	3322      	adds	r3, #34	@ 0x22
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	4413      	add	r3, r2
 800c370:	7a19      	ldrb	r1, [r3, #8]
 800c372:	4a5d      	ldr	r2, [pc, #372]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	4413      	add	r3, r2
 800c378:	460a      	mov	r2, r1
 800c37a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	3322      	adds	r3, #34	@ 0x22
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	4413      	add	r3, r2
 800c384:	7a19      	ldrb	r1, [r3, #8]
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	4413      	add	r3, r2
 800c38c:	3384      	adds	r3, #132	@ 0x84
 800c38e:	460a      	mov	r2, r1
 800c390:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	3301      	adds	r3, #1
 800c396:	623b      	str	r3, [r7, #32]
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	dde4      	ble.n	800c368 <GNSS_ParsePVTData+0xd8>
	}
	GNSS->lat = iLong.iLong;
 800c39e:	4b52      	ldr	r3, [pc, #328]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 800c3a8:	4b4f      	ldr	r3, [pc, #316]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	ee07 3a90 	vmov	s15, r3
 800c3b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c3b4:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800c4ec <GNSS_ParsePVTData+0x25c>
 800c3b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	for (int var = 0; var < 4; ++var) {
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	61fb      	str	r3, [r7, #28]
 800c3c6:	e00c      	b.n	800c3e2 <GNSS_ParsePVTData+0x152>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	3326      	adds	r3, #38	@ 0x26
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	7a19      	ldrb	r1, [r3, #8]
 800c3d2:	4a45      	ldr	r2, [pc, #276]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	460a      	mov	r2, r1
 800c3da:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	61fb      	str	r3, [r7, #28]
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	ddef      	ble.n	800c3c8 <GNSS_ParsePVTData+0x138>
	}
	GNSS->height = iLong.iLong;
 800c3e8:	4b3f      	ldr	r3, [pc, #252]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	61bb      	str	r3, [r7, #24]
 800c3f6:	e017      	b.n	800c428 <GNSS_ParsePVTData+0x198>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	332a      	adds	r3, #42	@ 0x2a
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	4413      	add	r3, r2
 800c400:	7a19      	ldrb	r1, [r3, #8]
 800c402:	4a39      	ldr	r2, [pc, #228]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	4413      	add	r3, r2
 800c408:	460a      	mov	r2, r1
 800c40a:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	332a      	adds	r3, #42	@ 0x2a
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	4413      	add	r3, r2
 800c414:	7a19      	ldrb	r1, [r3, #8]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	4413      	add	r3, r2
 800c41c:	3398      	adds	r3, #152	@ 0x98
 800c41e:	460a      	mov	r2, r1
 800c420:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	3301      	adds	r3, #1
 800c426:	61bb      	str	r3, [r7, #24]
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	2b03      	cmp	r3, #3
 800c42c:	dde4      	ble.n	800c3f8 <GNSS_ParsePVTData+0x168>
	}
	GNSS->hMSL = iLong.iLong;
 800c42e:	4b2e      	ldr	r3, [pc, #184]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 800c438:	2300      	movs	r3, #0
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	e00c      	b.n	800c458 <GNSS_ParsePVTData+0x1c8>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	332e      	adds	r3, #46	@ 0x2e
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4413      	add	r3, r2
 800c446:	7a19      	ldrb	r1, [r3, #8]
 800c448:	4a29      	ldr	r2, [pc, #164]	@ (800c4f0 <GNSS_ParsePVTData+0x260>)
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	4413      	add	r3, r2
 800c44e:	460a      	mov	r2, r1
 800c450:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	3301      	adds	r3, #1
 800c456:	617b      	str	r3, [r7, #20]
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	ddef      	ble.n	800c43e <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->hAcc = uLong.uLong;
 800c45e:	4b24      	ldr	r3, [pc, #144]	@ (800c4f0 <GNSS_ParsePVTData+0x260>)
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 800c468:	2300      	movs	r3, #0
 800c46a:	613b      	str	r3, [r7, #16]
 800c46c:	e00c      	b.n	800c488 <GNSS_ParsePVTData+0x1f8>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	3332      	adds	r3, #50	@ 0x32
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	4413      	add	r3, r2
 800c476:	7a19      	ldrb	r1, [r3, #8]
 800c478:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f0 <GNSS_ParsePVTData+0x260>)
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	4413      	add	r3, r2
 800c47e:	460a      	mov	r2, r1
 800c480:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	3301      	adds	r3, #1
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	ddef      	ble.n	800c46e <GNSS_ParsePVTData+0x1de>
	}
	GNSS->vAcc = uLong.uLong;
 800c48e:	4b18      	ldr	r3, [pc, #96]	@ (800c4f0 <GNSS_ParsePVTData+0x260>)
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (int var = 0; var < 4; ++var) {
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	e017      	b.n	800c4ce <GNSS_ParsePVTData+0x23e>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3342      	adds	r3, #66	@ 0x42
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	7a19      	ldrb	r1, [r3, #8]
 800c4a8:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	460a      	mov	r2, r1
 800c4b0:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3342      	adds	r3, #66	@ 0x42
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	7a19      	ldrb	r1, [r3, #8]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	33a8      	adds	r3, #168	@ 0xa8
 800c4c4:	460a      	mov	r2, r1
 800c4c6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	60fb      	str	r3, [r7, #12]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	dde4      	ble.n	800c49e <GNSS_ParsePVTData+0x20e>
	}
	GNSS->gSpeed = iLong.iLong;
 800c4d4:	4b04      	ldr	r3, [pc, #16]	@ (800c4e8 <GNSS_ParsePVTData+0x258>)
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 800c4de:	2300      	movs	r3, #0
 800c4e0:	60bb      	str	r3, [r7, #8]
 800c4e2:	e014      	b.n	800c50e <GNSS_ParsePVTData+0x27e>
 800c4e4:	24000cb4 	.word	0x24000cb4
 800c4e8:	24000cbc 	.word	0x24000cbc
 800c4ec:	4b189680 	.word	0x4b189680
 800c4f0:	24000cb8 	.word	0x24000cb8
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	3346      	adds	r3, #70	@ 0x46
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	7a19      	ldrb	r1, [r3, #8]
 800c4fe:	4a14      	ldr	r2, [pc, #80]	@ (800c550 <GNSS_ParsePVTData+0x2c0>)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	4413      	add	r3, r2
 800c504:	460a      	mov	r2, r1
 800c506:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	3301      	adds	r3, #1
 800c50c:	60bb      	str	r3, [r7, #8]
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2b03      	cmp	r3, #3
 800c512:	ddef      	ble.n	800c4f4 <GNSS_ParsePVTData+0x264>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 800c514:	4b0e      	ldr	r3, [pc, #56]	@ (800c550 <GNSS_ParsePVTData+0x2c0>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	ee07 3a90 	vmov	s15, r3
 800c51c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c520:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 800c548 <GNSS_ParsePVTData+0x2b8>
 800c524:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c528:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c52c:	ee17 2a90 	vmov	r2, s15
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 800c536:	bf00      	nop
 800c538:	372c      	adds	r7, #44	@ 0x2c
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	f3af 8000 	nop.w
 800c548:	88e368f1 	.word	0x88e368f1
 800c54c:	3ee4f8b5 	.word	0x3ee4f8b5
 800c550:	24000cbc 	.word	0x24000cbc

0800c554 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[18];
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	7e9a      	ldrb	r2, [r3, #26]
 800c560:	4b15      	ldr	r3, [pc, #84]	@ (800c5b8 <GNSS_ParseNavigatorData+0x64>)
 800c562:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS->uartWorkingBuffer[19];
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	7eda      	ldrb	r2, [r3, #27]
 800c568:	4b13      	ldr	r3, [pc, #76]	@ (800c5b8 <GNSS_ParseNavigatorData+0x64>)
 800c56a:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 800c56c:	4b12      	ldr	r3, [pc, #72]	@ (800c5b8 <GNSS_ParseNavigatorData+0x64>)
 800c56e:	881a      	ldrh	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[20];
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7f1a      	ldrb	r2, [r3, #28]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[21];
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	7f5a      	ldrb	r2, [r3, #29]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[22];
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7f9a      	ldrb	r2, [r3, #30]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[23];
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7fda      	ldrb	r2, [r3, #31]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[24];
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
}
 800c5aa:	bf00      	nop
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	24000cb4 	.word	0x24000cb4

0800c5bc <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 800c5bc:	b480      	push	{r7}
 800c5be:	b089      	sub	sp, #36	@ 0x24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	e00c      	b.n	800c5e4 <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 10];
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	330a      	adds	r3, #10
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	7a19      	ldrb	r1, [r3, #8]
 800c5d4:	4a53      	ldr	r2, [pc, #332]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	460a      	mov	r2, r1
 800c5dc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	61fb      	str	r3, [r7, #28]
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	ddef      	ble.n	800c5ca <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 800c5ea:	4b4e      	ldr	r3, [pc, #312]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800c5f2:	4b4c      	ldr	r3, [pc, #304]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5fe:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800c728 <GNSS_ParsePOSLLHData+0x16c>
 800c602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

	for (int var = 0; var < 4; ++var) {
 800c60c:	2300      	movs	r3, #0
 800c60e:	61bb      	str	r3, [r7, #24]
 800c610:	e00c      	b.n	800c62c <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 14];
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	330e      	adds	r3, #14
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	4413      	add	r3, r2
 800c61a:	7a19      	ldrb	r1, [r3, #8]
 800c61c:	4a41      	ldr	r2, [pc, #260]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	4413      	add	r3, r2
 800c622:	460a      	mov	r2, r1
 800c624:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	3301      	adds	r3, #1
 800c62a:	61bb      	str	r3, [r7, #24]
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	2b03      	cmp	r3, #3
 800c630:	ddef      	ble.n	800c612 <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 800c632:	4b3c      	ldr	r3, [pc, #240]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 800c63c:	4b39      	ldr	r3, [pc, #228]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	ee07 3a90 	vmov	s15, r3
 800c644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c648:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c728 <GNSS_ParsePOSLLHData+0x16c>
 800c64c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 800c656:	2300      	movs	r3, #0
 800c658:	617b      	str	r3, [r7, #20]
 800c65a:	e00c      	b.n	800c676 <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 18];
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	3312      	adds	r3, #18
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	4413      	add	r3, r2
 800c664:	7a19      	ldrb	r1, [r3, #8]
 800c666:	4a2f      	ldr	r2, [pc, #188]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	4413      	add	r3, r2
 800c66c:	460a      	mov	r2, r1
 800c66e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	3301      	adds	r3, #1
 800c674:	617b      	str	r3, [r7, #20]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2b03      	cmp	r3, #3
 800c67a:	ddef      	ble.n	800c65c <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 800c67c:	4b29      	ldr	r3, [pc, #164]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800c686:	2300      	movs	r3, #0
 800c688:	613b      	str	r3, [r7, #16]
 800c68a:	e00c      	b.n	800c6a6 <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 22];
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	3316      	adds	r3, #22
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	4413      	add	r3, r2
 800c694:	7a19      	ldrb	r1, [r3, #8]
 800c696:	4a23      	ldr	r2, [pc, #140]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	4413      	add	r3, r2
 800c69c:	460a      	mov	r2, r1
 800c69e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	613b      	str	r3, [r7, #16]
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	ddef      	ble.n	800c68c <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 800c6ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c724 <GNSS_ParsePOSLLHData+0x168>)
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
 800c6ba:	e00c      	b.n	800c6d6 <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 26];
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	331a      	adds	r3, #26
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	7a19      	ldrb	r1, [r3, #8]
 800c6c6:	4a19      	ldr	r2, [pc, #100]	@ (800c72c <GNSS_ParsePOSLLHData+0x170>)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	460a      	mov	r2, r1
 800c6ce:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	ddef      	ble.n	800c6bc <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 800c6dc:	4b13      	ldr	r3, [pc, #76]	@ (800c72c <GNSS_ParsePOSLLHData+0x170>)
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60bb      	str	r3, [r7, #8]
 800c6ea:	e00c      	b.n	800c706 <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	331e      	adds	r3, #30
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	7a19      	ldrb	r1, [r3, #8]
 800c6f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c72c <GNSS_ParsePOSLLHData+0x170>)
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	460a      	mov	r2, r1
 800c6fe:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	3301      	adds	r3, #1
 800c704:	60bb      	str	r3, [r7, #8]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2b03      	cmp	r3, #3
 800c70a:	ddef      	ble.n	800c6ec <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 800c70c:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <GNSS_ParsePOSLLHData+0x170>)
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 800c716:	bf00      	nop
 800c718:	3724      	adds	r7, #36	@ 0x24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	24000cbc 	.word	0x24000cbc
 800c728:	4b189680 	.word	0x4b189680
 800c72c:	24000cb8 	.word	0x24000cb8

0800c730 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	221c      	movs	r2, #28
 800c73e:	490f      	ldr	r1, [pc, #60]	@ (800c77c <GNSS_LoadConfig+0x4c>)
 800c740:	4618      	mov	r0, r3
 800c742:	f7fc fa59 	bl	8008bf8 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 800c746:	20fa      	movs	r0, #250	@ 0xfa
 800c748:	f7f5 fb8c 	bl	8001e64 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	221c      	movs	r2, #28
 800c752:	490b      	ldr	r1, [pc, #44]	@ (800c780 <GNSS_LoadConfig+0x50>)
 800c754:	4618      	mov	r0, r3
 800c756:	f7fc fa4f 	bl	8008bf8 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 800c75a:	20fa      	movs	r0, #250	@ 0xfa
 800c75c:	f7f5 fb82 	bl	8001e64 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	222c      	movs	r2, #44	@ 0x2c
 800c766:	4907      	ldr	r1, [pc, #28]	@ (800c784 <GNSS_LoadConfig+0x54>)
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fc fa45 	bl	8008bf8 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 800c76e:	20fa      	movs	r0, #250	@ 0xfa
 800c770:	f7f5 fb78 	bl	8001e64 <HAL_Delay>
}
 800c774:	bf00      	nop
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	0800f460 	.word	0x0800f460
 800c780:	0800f47c 	.word	0x0800f47c
 800c784:	0800f498 	.word	0x0800f498

0800c788 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <malloc>:
 800c7a4:	4b02      	ldr	r3, [pc, #8]	@ (800c7b0 <malloc+0xc>)
 800c7a6:	4601      	mov	r1, r0
 800c7a8:	6818      	ldr	r0, [r3, #0]
 800c7aa:	f000 b825 	b.w	800c7f8 <_malloc_r>
 800c7ae:	bf00      	nop
 800c7b0:	2400001c 	.word	0x2400001c

0800c7b4 <sbrk_aligned>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c7f4 <sbrk_aligned+0x40>)
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	6831      	ldr	r1, [r6, #0]
 800c7bc:	4605      	mov	r5, r0
 800c7be:	b911      	cbnz	r1, 800c7c6 <sbrk_aligned+0x12>
 800c7c0:	f000 fe58 	bl	800d474 <_sbrk_r>
 800c7c4:	6030      	str	r0, [r6, #0]
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f000 fe53 	bl	800d474 <_sbrk_r>
 800c7ce:	1c43      	adds	r3, r0, #1
 800c7d0:	d103      	bne.n	800c7da <sbrk_aligned+0x26>
 800c7d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
 800c7da:	1cc4      	adds	r4, r0, #3
 800c7dc:	f024 0403 	bic.w	r4, r4, #3
 800c7e0:	42a0      	cmp	r0, r4
 800c7e2:	d0f8      	beq.n	800c7d6 <sbrk_aligned+0x22>
 800c7e4:	1a21      	subs	r1, r4, r0
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f000 fe44 	bl	800d474 <_sbrk_r>
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d1f2      	bne.n	800c7d6 <sbrk_aligned+0x22>
 800c7f0:	e7ef      	b.n	800c7d2 <sbrk_aligned+0x1e>
 800c7f2:	bf00      	nop
 800c7f4:	24000cc0 	.word	0x24000cc0

0800c7f8 <_malloc_r>:
 800c7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7fc:	1ccd      	adds	r5, r1, #3
 800c7fe:	f025 0503 	bic.w	r5, r5, #3
 800c802:	3508      	adds	r5, #8
 800c804:	2d0c      	cmp	r5, #12
 800c806:	bf38      	it	cc
 800c808:	250c      	movcc	r5, #12
 800c80a:	2d00      	cmp	r5, #0
 800c80c:	4606      	mov	r6, r0
 800c80e:	db01      	blt.n	800c814 <_malloc_r+0x1c>
 800c810:	42a9      	cmp	r1, r5
 800c812:	d904      	bls.n	800c81e <_malloc_r+0x26>
 800c814:	230c      	movs	r3, #12
 800c816:	6033      	str	r3, [r6, #0]
 800c818:	2000      	movs	r0, #0
 800c81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c81e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8f4 <_malloc_r+0xfc>
 800c822:	f000 f869 	bl	800c8f8 <__malloc_lock>
 800c826:	f8d8 3000 	ldr.w	r3, [r8]
 800c82a:	461c      	mov	r4, r3
 800c82c:	bb44      	cbnz	r4, 800c880 <_malloc_r+0x88>
 800c82e:	4629      	mov	r1, r5
 800c830:	4630      	mov	r0, r6
 800c832:	f7ff ffbf 	bl	800c7b4 <sbrk_aligned>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	4604      	mov	r4, r0
 800c83a:	d158      	bne.n	800c8ee <_malloc_r+0xf6>
 800c83c:	f8d8 4000 	ldr.w	r4, [r8]
 800c840:	4627      	mov	r7, r4
 800c842:	2f00      	cmp	r7, #0
 800c844:	d143      	bne.n	800c8ce <_malloc_r+0xd6>
 800c846:	2c00      	cmp	r4, #0
 800c848:	d04b      	beq.n	800c8e2 <_malloc_r+0xea>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	4639      	mov	r1, r7
 800c84e:	4630      	mov	r0, r6
 800c850:	eb04 0903 	add.w	r9, r4, r3
 800c854:	f000 fe0e 	bl	800d474 <_sbrk_r>
 800c858:	4581      	cmp	r9, r0
 800c85a:	d142      	bne.n	800c8e2 <_malloc_r+0xea>
 800c85c:	6821      	ldr	r1, [r4, #0]
 800c85e:	1a6d      	subs	r5, r5, r1
 800c860:	4629      	mov	r1, r5
 800c862:	4630      	mov	r0, r6
 800c864:	f7ff ffa6 	bl	800c7b4 <sbrk_aligned>
 800c868:	3001      	adds	r0, #1
 800c86a:	d03a      	beq.n	800c8e2 <_malloc_r+0xea>
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	442b      	add	r3, r5
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	f8d8 3000 	ldr.w	r3, [r8]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	bb62      	cbnz	r2, 800c8d4 <_malloc_r+0xdc>
 800c87a:	f8c8 7000 	str.w	r7, [r8]
 800c87e:	e00f      	b.n	800c8a0 <_malloc_r+0xa8>
 800c880:	6822      	ldr	r2, [r4, #0]
 800c882:	1b52      	subs	r2, r2, r5
 800c884:	d420      	bmi.n	800c8c8 <_malloc_r+0xd0>
 800c886:	2a0b      	cmp	r2, #11
 800c888:	d917      	bls.n	800c8ba <_malloc_r+0xc2>
 800c88a:	1961      	adds	r1, r4, r5
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	6025      	str	r5, [r4, #0]
 800c890:	bf18      	it	ne
 800c892:	6059      	strne	r1, [r3, #4]
 800c894:	6863      	ldr	r3, [r4, #4]
 800c896:	bf08      	it	eq
 800c898:	f8c8 1000 	streq.w	r1, [r8]
 800c89c:	5162      	str	r2, [r4, r5]
 800c89e:	604b      	str	r3, [r1, #4]
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f000 f82f 	bl	800c904 <__malloc_unlock>
 800c8a6:	f104 000b 	add.w	r0, r4, #11
 800c8aa:	1d23      	adds	r3, r4, #4
 800c8ac:	f020 0007 	bic.w	r0, r0, #7
 800c8b0:	1ac2      	subs	r2, r0, r3
 800c8b2:	bf1c      	itt	ne
 800c8b4:	1a1b      	subne	r3, r3, r0
 800c8b6:	50a3      	strne	r3, [r4, r2]
 800c8b8:	e7af      	b.n	800c81a <_malloc_r+0x22>
 800c8ba:	6862      	ldr	r2, [r4, #4]
 800c8bc:	42a3      	cmp	r3, r4
 800c8be:	bf0c      	ite	eq
 800c8c0:	f8c8 2000 	streq.w	r2, [r8]
 800c8c4:	605a      	strne	r2, [r3, #4]
 800c8c6:	e7eb      	b.n	800c8a0 <_malloc_r+0xa8>
 800c8c8:	4623      	mov	r3, r4
 800c8ca:	6864      	ldr	r4, [r4, #4]
 800c8cc:	e7ae      	b.n	800c82c <_malloc_r+0x34>
 800c8ce:	463c      	mov	r4, r7
 800c8d0:	687f      	ldr	r7, [r7, #4]
 800c8d2:	e7b6      	b.n	800c842 <_malloc_r+0x4a>
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	42a3      	cmp	r3, r4
 800c8da:	d1fb      	bne.n	800c8d4 <_malloc_r+0xdc>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	6053      	str	r3, [r2, #4]
 800c8e0:	e7de      	b.n	800c8a0 <_malloc_r+0xa8>
 800c8e2:	230c      	movs	r3, #12
 800c8e4:	6033      	str	r3, [r6, #0]
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f000 f80c 	bl	800c904 <__malloc_unlock>
 800c8ec:	e794      	b.n	800c818 <_malloc_r+0x20>
 800c8ee:	6005      	str	r5, [r0, #0]
 800c8f0:	e7d6      	b.n	800c8a0 <_malloc_r+0xa8>
 800c8f2:	bf00      	nop
 800c8f4:	24000cc4 	.word	0x24000cc4

0800c8f8 <__malloc_lock>:
 800c8f8:	4801      	ldr	r0, [pc, #4]	@ (800c900 <__malloc_lock+0x8>)
 800c8fa:	f000 be08 	b.w	800d50e <__retarget_lock_acquire_recursive>
 800c8fe:	bf00      	nop
 800c900:	24000e08 	.word	0x24000e08

0800c904 <__malloc_unlock>:
 800c904:	4801      	ldr	r0, [pc, #4]	@ (800c90c <__malloc_unlock+0x8>)
 800c906:	f000 be03 	b.w	800d510 <__retarget_lock_release_recursive>
 800c90a:	bf00      	nop
 800c90c:	24000e08 	.word	0x24000e08

0800c910 <__cvt>:
 800c910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c912:	ed2d 8b02 	vpush	{d8}
 800c916:	eeb0 8b40 	vmov.f64	d8, d0
 800c91a:	b085      	sub	sp, #20
 800c91c:	4617      	mov	r7, r2
 800c91e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c920:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c922:	ee18 2a90 	vmov	r2, s17
 800c926:	f025 0520 	bic.w	r5, r5, #32
 800c92a:	2a00      	cmp	r2, #0
 800c92c:	bfb6      	itet	lt
 800c92e:	222d      	movlt	r2, #45	@ 0x2d
 800c930:	2200      	movge	r2, #0
 800c932:	eeb1 8b40 	vneglt.f64	d8, d0
 800c936:	2d46      	cmp	r5, #70	@ 0x46
 800c938:	460c      	mov	r4, r1
 800c93a:	701a      	strb	r2, [r3, #0]
 800c93c:	d004      	beq.n	800c948 <__cvt+0x38>
 800c93e:	2d45      	cmp	r5, #69	@ 0x45
 800c940:	d100      	bne.n	800c944 <__cvt+0x34>
 800c942:	3401      	adds	r4, #1
 800c944:	2102      	movs	r1, #2
 800c946:	e000      	b.n	800c94a <__cvt+0x3a>
 800c948:	2103      	movs	r1, #3
 800c94a:	ab03      	add	r3, sp, #12
 800c94c:	9301      	str	r3, [sp, #4]
 800c94e:	ab02      	add	r3, sp, #8
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	4622      	mov	r2, r4
 800c954:	4633      	mov	r3, r6
 800c956:	eeb0 0b48 	vmov.f64	d0, d8
 800c95a:	f000 fe71 	bl	800d640 <_dtoa_r>
 800c95e:	2d47      	cmp	r5, #71	@ 0x47
 800c960:	d114      	bne.n	800c98c <__cvt+0x7c>
 800c962:	07fb      	lsls	r3, r7, #31
 800c964:	d50a      	bpl.n	800c97c <__cvt+0x6c>
 800c966:	1902      	adds	r2, r0, r4
 800c968:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c970:	bf08      	it	eq
 800c972:	9203      	streq	r2, [sp, #12]
 800c974:	2130      	movs	r1, #48	@ 0x30
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	4293      	cmp	r3, r2
 800c97a:	d319      	bcc.n	800c9b0 <__cvt+0xa0>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c980:	1a1b      	subs	r3, r3, r0
 800c982:	6013      	str	r3, [r2, #0]
 800c984:	b005      	add	sp, #20
 800c986:	ecbd 8b02 	vpop	{d8}
 800c98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c98c:	2d46      	cmp	r5, #70	@ 0x46
 800c98e:	eb00 0204 	add.w	r2, r0, r4
 800c992:	d1e9      	bne.n	800c968 <__cvt+0x58>
 800c994:	7803      	ldrb	r3, [r0, #0]
 800c996:	2b30      	cmp	r3, #48	@ 0x30
 800c998:	d107      	bne.n	800c9aa <__cvt+0x9a>
 800c99a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a2:	bf1c      	itt	ne
 800c9a4:	f1c4 0401 	rsbne	r4, r4, #1
 800c9a8:	6034      	strne	r4, [r6, #0]
 800c9aa:	6833      	ldr	r3, [r6, #0]
 800c9ac:	441a      	add	r2, r3
 800c9ae:	e7db      	b.n	800c968 <__cvt+0x58>
 800c9b0:	1c5c      	adds	r4, r3, #1
 800c9b2:	9403      	str	r4, [sp, #12]
 800c9b4:	7019      	strb	r1, [r3, #0]
 800c9b6:	e7de      	b.n	800c976 <__cvt+0x66>

0800c9b8 <__exponent>:
 800c9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ba:	2900      	cmp	r1, #0
 800c9bc:	bfba      	itte	lt
 800c9be:	4249      	neglt	r1, r1
 800c9c0:	232d      	movlt	r3, #45	@ 0x2d
 800c9c2:	232b      	movge	r3, #43	@ 0x2b
 800c9c4:	2909      	cmp	r1, #9
 800c9c6:	7002      	strb	r2, [r0, #0]
 800c9c8:	7043      	strb	r3, [r0, #1]
 800c9ca:	dd29      	ble.n	800ca20 <__exponent+0x68>
 800c9cc:	f10d 0307 	add.w	r3, sp, #7
 800c9d0:	461d      	mov	r5, r3
 800c9d2:	270a      	movs	r7, #10
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	fbb1 f6f7 	udiv	r6, r1, r7
 800c9da:	fb07 1416 	mls	r4, r7, r6, r1
 800c9de:	3430      	adds	r4, #48	@ 0x30
 800c9e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	2c63      	cmp	r4, #99	@ 0x63
 800c9e8:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	dcf1      	bgt.n	800c9d4 <__exponent+0x1c>
 800c9f0:	3130      	adds	r1, #48	@ 0x30
 800c9f2:	1e94      	subs	r4, r2, #2
 800c9f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c9f8:	1c41      	adds	r1, r0, #1
 800c9fa:	4623      	mov	r3, r4
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	d30a      	bcc.n	800ca16 <__exponent+0x5e>
 800ca00:	f10d 0309 	add.w	r3, sp, #9
 800ca04:	1a9b      	subs	r3, r3, r2
 800ca06:	42ac      	cmp	r4, r5
 800ca08:	bf88      	it	hi
 800ca0a:	2300      	movhi	r3, #0
 800ca0c:	3302      	adds	r3, #2
 800ca0e:	4403      	add	r3, r0
 800ca10:	1a18      	subs	r0, r3, r0
 800ca12:	b003      	add	sp, #12
 800ca14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca16:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca1e:	e7ed      	b.n	800c9fc <__exponent+0x44>
 800ca20:	2330      	movs	r3, #48	@ 0x30
 800ca22:	3130      	adds	r1, #48	@ 0x30
 800ca24:	7083      	strb	r3, [r0, #2]
 800ca26:	70c1      	strb	r1, [r0, #3]
 800ca28:	1d03      	adds	r3, r0, #4
 800ca2a:	e7f1      	b.n	800ca10 <__exponent+0x58>
 800ca2c:	0000      	movs	r0, r0
	...

0800ca30 <_printf_float>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	b08d      	sub	sp, #52	@ 0x34
 800ca36:	460c      	mov	r4, r1
 800ca38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ca3c:	4616      	mov	r6, r2
 800ca3e:	461f      	mov	r7, r3
 800ca40:	4605      	mov	r5, r0
 800ca42:	f000 fcdf 	bl	800d404 <_localeconv_r>
 800ca46:	f8d0 b000 	ldr.w	fp, [r0]
 800ca4a:	4658      	mov	r0, fp
 800ca4c:	f7f3 fca0 	bl	8000390 <strlen>
 800ca50:	2300      	movs	r3, #0
 800ca52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca54:	f8d8 3000 	ldr.w	r3, [r8]
 800ca58:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ca5c:	6822      	ldr	r2, [r4, #0]
 800ca5e:	9005      	str	r0, [sp, #20]
 800ca60:	3307      	adds	r3, #7
 800ca62:	f023 0307 	bic.w	r3, r3, #7
 800ca66:	f103 0108 	add.w	r1, r3, #8
 800ca6a:	f8c8 1000 	str.w	r1, [r8]
 800ca6e:	ed93 0b00 	vldr	d0, [r3]
 800ca72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ccd0 <_printf_float+0x2a0>
 800ca76:	eeb0 7bc0 	vabs.f64	d7, d0
 800ca7a:	eeb4 7b46 	vcmp.f64	d7, d6
 800ca7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ca86:	dd24      	ble.n	800cad2 <_printf_float+0xa2>
 800ca88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ca8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca90:	d502      	bpl.n	800ca98 <_printf_float+0x68>
 800ca92:	232d      	movs	r3, #45	@ 0x2d
 800ca94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca98:	498f      	ldr	r1, [pc, #572]	@ (800ccd8 <_printf_float+0x2a8>)
 800ca9a:	4b90      	ldr	r3, [pc, #576]	@ (800ccdc <_printf_float+0x2ac>)
 800ca9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800caa0:	bf8c      	ite	hi
 800caa2:	4688      	movhi	r8, r1
 800caa4:	4698      	movls	r8, r3
 800caa6:	f022 0204 	bic.w	r2, r2, #4
 800caaa:	2303      	movs	r3, #3
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	6022      	str	r2, [r4, #0]
 800cab0:	f04f 0a00 	mov.w	sl, #0
 800cab4:	9700      	str	r7, [sp, #0]
 800cab6:	4633      	mov	r3, r6
 800cab8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800caba:	4621      	mov	r1, r4
 800cabc:	4628      	mov	r0, r5
 800cabe:	f000 f9d1 	bl	800ce64 <_printf_common>
 800cac2:	3001      	adds	r0, #1
 800cac4:	f040 8089 	bne.w	800cbda <_printf_float+0x1aa>
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295
 800cacc:	b00d      	add	sp, #52	@ 0x34
 800cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad2:	eeb4 0b40 	vcmp.f64	d0, d0
 800cad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cada:	d709      	bvc.n	800caf0 <_printf_float+0xc0>
 800cadc:	ee10 3a90 	vmov	r3, s1
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	bfbc      	itt	lt
 800cae4:	232d      	movlt	r3, #45	@ 0x2d
 800cae6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800caea:	497d      	ldr	r1, [pc, #500]	@ (800cce0 <_printf_float+0x2b0>)
 800caec:	4b7d      	ldr	r3, [pc, #500]	@ (800cce4 <_printf_float+0x2b4>)
 800caee:	e7d5      	b.n	800ca9c <_printf_float+0x6c>
 800caf0:	6863      	ldr	r3, [r4, #4]
 800caf2:	1c59      	adds	r1, r3, #1
 800caf4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800caf8:	d139      	bne.n	800cb6e <_printf_float+0x13e>
 800cafa:	2306      	movs	r3, #6
 800cafc:	6063      	str	r3, [r4, #4]
 800cafe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cb02:	2300      	movs	r3, #0
 800cb04:	6022      	str	r2, [r4, #0]
 800cb06:	9303      	str	r3, [sp, #12]
 800cb08:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cb0e:	ab09      	add	r3, sp, #36	@ 0x24
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	6861      	ldr	r1, [r4, #4]
 800cb14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f7ff fef9 	bl	800c910 <__cvt>
 800cb1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb24:	4680      	mov	r8, r0
 800cb26:	d129      	bne.n	800cb7c <_printf_float+0x14c>
 800cb28:	1cc8      	adds	r0, r1, #3
 800cb2a:	db02      	blt.n	800cb32 <_printf_float+0x102>
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	4299      	cmp	r1, r3
 800cb30:	dd41      	ble.n	800cbb6 <_printf_float+0x186>
 800cb32:	f1a9 0902 	sub.w	r9, r9, #2
 800cb36:	fa5f f989 	uxtb.w	r9, r9
 800cb3a:	3901      	subs	r1, #1
 800cb3c:	464a      	mov	r2, r9
 800cb3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cb42:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb44:	f7ff ff38 	bl	800c9b8 <__exponent>
 800cb48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb4a:	1813      	adds	r3, r2, r0
 800cb4c:	2a01      	cmp	r2, #1
 800cb4e:	4682      	mov	sl, r0
 800cb50:	6123      	str	r3, [r4, #16]
 800cb52:	dc02      	bgt.n	800cb5a <_printf_float+0x12a>
 800cb54:	6822      	ldr	r2, [r4, #0]
 800cb56:	07d2      	lsls	r2, r2, #31
 800cb58:	d501      	bpl.n	800cb5e <_printf_float+0x12e>
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	6123      	str	r3, [r4, #16]
 800cb5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d0a6      	beq.n	800cab4 <_printf_float+0x84>
 800cb66:	232d      	movs	r3, #45	@ 0x2d
 800cb68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb6c:	e7a2      	b.n	800cab4 <_printf_float+0x84>
 800cb6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb72:	d1c4      	bne.n	800cafe <_printf_float+0xce>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1c2      	bne.n	800cafe <_printf_float+0xce>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e7bf      	b.n	800cafc <_printf_float+0xcc>
 800cb7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cb80:	d9db      	bls.n	800cb3a <_printf_float+0x10a>
 800cb82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800cb86:	d118      	bne.n	800cbba <_printf_float+0x18a>
 800cb88:	2900      	cmp	r1, #0
 800cb8a:	6863      	ldr	r3, [r4, #4]
 800cb8c:	dd0b      	ble.n	800cba6 <_printf_float+0x176>
 800cb8e:	6121      	str	r1, [r4, #16]
 800cb90:	b913      	cbnz	r3, 800cb98 <_printf_float+0x168>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	07d0      	lsls	r0, r2, #31
 800cb96:	d502      	bpl.n	800cb9e <_printf_float+0x16e>
 800cb98:	3301      	adds	r3, #1
 800cb9a:	440b      	add	r3, r1
 800cb9c:	6123      	str	r3, [r4, #16]
 800cb9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cba0:	f04f 0a00 	mov.w	sl, #0
 800cba4:	e7db      	b.n	800cb5e <_printf_float+0x12e>
 800cba6:	b913      	cbnz	r3, 800cbae <_printf_float+0x17e>
 800cba8:	6822      	ldr	r2, [r4, #0]
 800cbaa:	07d2      	lsls	r2, r2, #31
 800cbac:	d501      	bpl.n	800cbb2 <_printf_float+0x182>
 800cbae:	3302      	adds	r3, #2
 800cbb0:	e7f4      	b.n	800cb9c <_printf_float+0x16c>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e7f2      	b.n	800cb9c <_printf_float+0x16c>
 800cbb6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800cbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbbc:	4299      	cmp	r1, r3
 800cbbe:	db05      	blt.n	800cbcc <_printf_float+0x19c>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	6121      	str	r1, [r4, #16]
 800cbc4:	07d8      	lsls	r0, r3, #31
 800cbc6:	d5ea      	bpl.n	800cb9e <_printf_float+0x16e>
 800cbc8:	1c4b      	adds	r3, r1, #1
 800cbca:	e7e7      	b.n	800cb9c <_printf_float+0x16c>
 800cbcc:	2900      	cmp	r1, #0
 800cbce:	bfd4      	ite	le
 800cbd0:	f1c1 0202 	rsble	r2, r1, #2
 800cbd4:	2201      	movgt	r2, #1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	e7e0      	b.n	800cb9c <_printf_float+0x16c>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	055a      	lsls	r2, r3, #21
 800cbde:	d407      	bmi.n	800cbf0 <_printf_float+0x1c0>
 800cbe0:	6923      	ldr	r3, [r4, #16]
 800cbe2:	4642      	mov	r2, r8
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	47b8      	blx	r7
 800cbea:	3001      	adds	r0, #1
 800cbec:	d12a      	bne.n	800cc44 <_printf_float+0x214>
 800cbee:	e76b      	b.n	800cac8 <_printf_float+0x98>
 800cbf0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cbf4:	f240 80e0 	bls.w	800cdb8 <_printf_float+0x388>
 800cbf8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cbfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc04:	d133      	bne.n	800cc6e <_printf_float+0x23e>
 800cc06:	4a38      	ldr	r2, [pc, #224]	@ (800cce8 <_printf_float+0x2b8>)
 800cc08:	2301      	movs	r3, #1
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	47b8      	blx	r7
 800cc10:	3001      	adds	r0, #1
 800cc12:	f43f af59 	beq.w	800cac8 <_printf_float+0x98>
 800cc16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cc1a:	4543      	cmp	r3, r8
 800cc1c:	db02      	blt.n	800cc24 <_printf_float+0x1f4>
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	07d8      	lsls	r0, r3, #31
 800cc22:	d50f      	bpl.n	800cc44 <_printf_float+0x214>
 800cc24:	9b05      	ldr	r3, [sp, #20]
 800cc26:	465a      	mov	r2, fp
 800cc28:	4631      	mov	r1, r6
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	47b8      	blx	r7
 800cc2e:	3001      	adds	r0, #1
 800cc30:	f43f af4a 	beq.w	800cac8 <_printf_float+0x98>
 800cc34:	f04f 0900 	mov.w	r9, #0
 800cc38:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc3c:	f104 0a1a 	add.w	sl, r4, #26
 800cc40:	45c8      	cmp	r8, r9
 800cc42:	dc09      	bgt.n	800cc58 <_printf_float+0x228>
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	079b      	lsls	r3, r3, #30
 800cc48:	f100 8107 	bmi.w	800ce5a <_printf_float+0x42a>
 800cc4c:	68e0      	ldr	r0, [r4, #12]
 800cc4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc50:	4298      	cmp	r0, r3
 800cc52:	bfb8      	it	lt
 800cc54:	4618      	movlt	r0, r3
 800cc56:	e739      	b.n	800cacc <_printf_float+0x9c>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	4652      	mov	r2, sl
 800cc5c:	4631      	mov	r1, r6
 800cc5e:	4628      	mov	r0, r5
 800cc60:	47b8      	blx	r7
 800cc62:	3001      	adds	r0, #1
 800cc64:	f43f af30 	beq.w	800cac8 <_printf_float+0x98>
 800cc68:	f109 0901 	add.w	r9, r9, #1
 800cc6c:	e7e8      	b.n	800cc40 <_printf_float+0x210>
 800cc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	dc3b      	bgt.n	800ccec <_printf_float+0x2bc>
 800cc74:	4a1c      	ldr	r2, [pc, #112]	@ (800cce8 <_printf_float+0x2b8>)
 800cc76:	2301      	movs	r3, #1
 800cc78:	4631      	mov	r1, r6
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	47b8      	blx	r7
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f43f af22 	beq.w	800cac8 <_printf_float+0x98>
 800cc84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cc88:	ea59 0303 	orrs.w	r3, r9, r3
 800cc8c:	d102      	bne.n	800cc94 <_printf_float+0x264>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	07d9      	lsls	r1, r3, #31
 800cc92:	d5d7      	bpl.n	800cc44 <_printf_float+0x214>
 800cc94:	9b05      	ldr	r3, [sp, #20]
 800cc96:	465a      	mov	r2, fp
 800cc98:	4631      	mov	r1, r6
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	47b8      	blx	r7
 800cc9e:	3001      	adds	r0, #1
 800cca0:	f43f af12 	beq.w	800cac8 <_printf_float+0x98>
 800cca4:	f04f 0a00 	mov.w	sl, #0
 800cca8:	f104 0b1a 	add.w	fp, r4, #26
 800ccac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccae:	425b      	negs	r3, r3
 800ccb0:	4553      	cmp	r3, sl
 800ccb2:	dc01      	bgt.n	800ccb8 <_printf_float+0x288>
 800ccb4:	464b      	mov	r3, r9
 800ccb6:	e794      	b.n	800cbe2 <_printf_float+0x1b2>
 800ccb8:	2301      	movs	r3, #1
 800ccba:	465a      	mov	r2, fp
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	47b8      	blx	r7
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	f43f af00 	beq.w	800cac8 <_printf_float+0x98>
 800ccc8:	f10a 0a01 	add.w	sl, sl, #1
 800cccc:	e7ee      	b.n	800ccac <_printf_float+0x27c>
 800ccce:	bf00      	nop
 800ccd0:	ffffffff 	.word	0xffffffff
 800ccd4:	7fefffff 	.word	0x7fefffff
 800ccd8:	0800f65c 	.word	0x0800f65c
 800ccdc:	0800f658 	.word	0x0800f658
 800cce0:	0800f664 	.word	0x0800f664
 800cce4:	0800f660 	.word	0x0800f660
 800cce8:	0800f668 	.word	0x0800f668
 800ccec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ccee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ccf2:	4553      	cmp	r3, sl
 800ccf4:	bfa8      	it	ge
 800ccf6:	4653      	movge	r3, sl
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	4699      	mov	r9, r3
 800ccfc:	dc37      	bgt.n	800cd6e <_printf_float+0x33e>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	9307      	str	r3, [sp, #28]
 800cd02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd06:	f104 021a 	add.w	r2, r4, #26
 800cd0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd0c:	9907      	ldr	r1, [sp, #28]
 800cd0e:	9306      	str	r3, [sp, #24]
 800cd10:	eba3 0309 	sub.w	r3, r3, r9
 800cd14:	428b      	cmp	r3, r1
 800cd16:	dc31      	bgt.n	800cd7c <_printf_float+0x34c>
 800cd18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd1a:	459a      	cmp	sl, r3
 800cd1c:	dc3b      	bgt.n	800cd96 <_printf_float+0x366>
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	07da      	lsls	r2, r3, #31
 800cd22:	d438      	bmi.n	800cd96 <_printf_float+0x366>
 800cd24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd26:	ebaa 0903 	sub.w	r9, sl, r3
 800cd2a:	9b06      	ldr	r3, [sp, #24]
 800cd2c:	ebaa 0303 	sub.w	r3, sl, r3
 800cd30:	4599      	cmp	r9, r3
 800cd32:	bfa8      	it	ge
 800cd34:	4699      	movge	r9, r3
 800cd36:	f1b9 0f00 	cmp.w	r9, #0
 800cd3a:	dc34      	bgt.n	800cda6 <_printf_float+0x376>
 800cd3c:	f04f 0800 	mov.w	r8, #0
 800cd40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd44:	f104 0b1a 	add.w	fp, r4, #26
 800cd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd4a:	ebaa 0303 	sub.w	r3, sl, r3
 800cd4e:	eba3 0309 	sub.w	r3, r3, r9
 800cd52:	4543      	cmp	r3, r8
 800cd54:	f77f af76 	ble.w	800cc44 <_printf_float+0x214>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	465a      	mov	r2, fp
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	4628      	mov	r0, r5
 800cd60:	47b8      	blx	r7
 800cd62:	3001      	adds	r0, #1
 800cd64:	f43f aeb0 	beq.w	800cac8 <_printf_float+0x98>
 800cd68:	f108 0801 	add.w	r8, r8, #1
 800cd6c:	e7ec      	b.n	800cd48 <_printf_float+0x318>
 800cd6e:	4642      	mov	r2, r8
 800cd70:	4631      	mov	r1, r6
 800cd72:	4628      	mov	r0, r5
 800cd74:	47b8      	blx	r7
 800cd76:	3001      	adds	r0, #1
 800cd78:	d1c1      	bne.n	800ccfe <_printf_float+0x2ce>
 800cd7a:	e6a5      	b.n	800cac8 <_printf_float+0x98>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4628      	mov	r0, r5
 800cd82:	9206      	str	r2, [sp, #24]
 800cd84:	47b8      	blx	r7
 800cd86:	3001      	adds	r0, #1
 800cd88:	f43f ae9e 	beq.w	800cac8 <_printf_float+0x98>
 800cd8c:	9b07      	ldr	r3, [sp, #28]
 800cd8e:	9a06      	ldr	r2, [sp, #24]
 800cd90:	3301      	adds	r3, #1
 800cd92:	9307      	str	r3, [sp, #28]
 800cd94:	e7b9      	b.n	800cd0a <_printf_float+0x2da>
 800cd96:	9b05      	ldr	r3, [sp, #20]
 800cd98:	465a      	mov	r2, fp
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	47b8      	blx	r7
 800cda0:	3001      	adds	r0, #1
 800cda2:	d1bf      	bne.n	800cd24 <_printf_float+0x2f4>
 800cda4:	e690      	b.n	800cac8 <_printf_float+0x98>
 800cda6:	9a06      	ldr	r2, [sp, #24]
 800cda8:	464b      	mov	r3, r9
 800cdaa:	4442      	add	r2, r8
 800cdac:	4631      	mov	r1, r6
 800cdae:	4628      	mov	r0, r5
 800cdb0:	47b8      	blx	r7
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d1c2      	bne.n	800cd3c <_printf_float+0x30c>
 800cdb6:	e687      	b.n	800cac8 <_printf_float+0x98>
 800cdb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800cdbc:	f1b9 0f01 	cmp.w	r9, #1
 800cdc0:	dc01      	bgt.n	800cdc6 <_printf_float+0x396>
 800cdc2:	07db      	lsls	r3, r3, #31
 800cdc4:	d536      	bpl.n	800ce34 <_printf_float+0x404>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	4642      	mov	r2, r8
 800cdca:	4631      	mov	r1, r6
 800cdcc:	4628      	mov	r0, r5
 800cdce:	47b8      	blx	r7
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	f43f ae79 	beq.w	800cac8 <_printf_float+0x98>
 800cdd6:	9b05      	ldr	r3, [sp, #20]
 800cdd8:	465a      	mov	r2, fp
 800cdda:	4631      	mov	r1, r6
 800cddc:	4628      	mov	r0, r5
 800cdde:	47b8      	blx	r7
 800cde0:	3001      	adds	r0, #1
 800cde2:	f43f ae71 	beq.w	800cac8 <_printf_float+0x98>
 800cde6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cdea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf2:	f109 39ff 	add.w	r9, r9, #4294967295
 800cdf6:	d018      	beq.n	800ce2a <_printf_float+0x3fa>
 800cdf8:	464b      	mov	r3, r9
 800cdfa:	f108 0201 	add.w	r2, r8, #1
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4628      	mov	r0, r5
 800ce02:	47b8      	blx	r7
 800ce04:	3001      	adds	r0, #1
 800ce06:	d10c      	bne.n	800ce22 <_printf_float+0x3f2>
 800ce08:	e65e      	b.n	800cac8 <_printf_float+0x98>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	465a      	mov	r2, fp
 800ce0e:	4631      	mov	r1, r6
 800ce10:	4628      	mov	r0, r5
 800ce12:	47b8      	blx	r7
 800ce14:	3001      	adds	r0, #1
 800ce16:	f43f ae57 	beq.w	800cac8 <_printf_float+0x98>
 800ce1a:	f108 0801 	add.w	r8, r8, #1
 800ce1e:	45c8      	cmp	r8, r9
 800ce20:	dbf3      	blt.n	800ce0a <_printf_float+0x3da>
 800ce22:	4653      	mov	r3, sl
 800ce24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ce28:	e6dc      	b.n	800cbe4 <_printf_float+0x1b4>
 800ce2a:	f04f 0800 	mov.w	r8, #0
 800ce2e:	f104 0b1a 	add.w	fp, r4, #26
 800ce32:	e7f4      	b.n	800ce1e <_printf_float+0x3ee>
 800ce34:	2301      	movs	r3, #1
 800ce36:	4642      	mov	r2, r8
 800ce38:	e7e1      	b.n	800cdfe <_printf_float+0x3ce>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	464a      	mov	r2, r9
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	f43f ae3f 	beq.w	800cac8 <_printf_float+0x98>
 800ce4a:	f108 0801 	add.w	r8, r8, #1
 800ce4e:	68e3      	ldr	r3, [r4, #12]
 800ce50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce52:	1a5b      	subs	r3, r3, r1
 800ce54:	4543      	cmp	r3, r8
 800ce56:	dcf0      	bgt.n	800ce3a <_printf_float+0x40a>
 800ce58:	e6f8      	b.n	800cc4c <_printf_float+0x21c>
 800ce5a:	f04f 0800 	mov.w	r8, #0
 800ce5e:	f104 0919 	add.w	r9, r4, #25
 800ce62:	e7f4      	b.n	800ce4e <_printf_float+0x41e>

0800ce64 <_printf_common>:
 800ce64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce68:	4616      	mov	r6, r2
 800ce6a:	4698      	mov	r8, r3
 800ce6c:	688a      	ldr	r2, [r1, #8]
 800ce6e:	690b      	ldr	r3, [r1, #16]
 800ce70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce74:	4293      	cmp	r3, r2
 800ce76:	bfb8      	it	lt
 800ce78:	4613      	movlt	r3, r2
 800ce7a:	6033      	str	r3, [r6, #0]
 800ce7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce80:	4607      	mov	r7, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	b10a      	cbz	r2, 800ce8a <_printf_common+0x26>
 800ce86:	3301      	adds	r3, #1
 800ce88:	6033      	str	r3, [r6, #0]
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	0699      	lsls	r1, r3, #26
 800ce8e:	bf42      	ittt	mi
 800ce90:	6833      	ldrmi	r3, [r6, #0]
 800ce92:	3302      	addmi	r3, #2
 800ce94:	6033      	strmi	r3, [r6, #0]
 800ce96:	6825      	ldr	r5, [r4, #0]
 800ce98:	f015 0506 	ands.w	r5, r5, #6
 800ce9c:	d106      	bne.n	800ceac <_printf_common+0x48>
 800ce9e:	f104 0a19 	add.w	sl, r4, #25
 800cea2:	68e3      	ldr	r3, [r4, #12]
 800cea4:	6832      	ldr	r2, [r6, #0]
 800cea6:	1a9b      	subs	r3, r3, r2
 800cea8:	42ab      	cmp	r3, r5
 800ceaa:	dc26      	bgt.n	800cefa <_printf_common+0x96>
 800ceac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ceb0:	6822      	ldr	r2, [r4, #0]
 800ceb2:	3b00      	subs	r3, #0
 800ceb4:	bf18      	it	ne
 800ceb6:	2301      	movne	r3, #1
 800ceb8:	0692      	lsls	r2, r2, #26
 800ceba:	d42b      	bmi.n	800cf14 <_printf_common+0xb0>
 800cebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cec0:	4641      	mov	r1, r8
 800cec2:	4638      	mov	r0, r7
 800cec4:	47c8      	blx	r9
 800cec6:	3001      	adds	r0, #1
 800cec8:	d01e      	beq.n	800cf08 <_printf_common+0xa4>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	6922      	ldr	r2, [r4, #16]
 800cece:	f003 0306 	and.w	r3, r3, #6
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	bf02      	ittt	eq
 800ced6:	68e5      	ldreq	r5, [r4, #12]
 800ced8:	6833      	ldreq	r3, [r6, #0]
 800ceda:	1aed      	subeq	r5, r5, r3
 800cedc:	68a3      	ldr	r3, [r4, #8]
 800cede:	bf0c      	ite	eq
 800cee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cee4:	2500      	movne	r5, #0
 800cee6:	4293      	cmp	r3, r2
 800cee8:	bfc4      	itt	gt
 800ceea:	1a9b      	subgt	r3, r3, r2
 800ceec:	18ed      	addgt	r5, r5, r3
 800ceee:	2600      	movs	r6, #0
 800cef0:	341a      	adds	r4, #26
 800cef2:	42b5      	cmp	r5, r6
 800cef4:	d11a      	bne.n	800cf2c <_printf_common+0xc8>
 800cef6:	2000      	movs	r0, #0
 800cef8:	e008      	b.n	800cf0c <_printf_common+0xa8>
 800cefa:	2301      	movs	r3, #1
 800cefc:	4652      	mov	r2, sl
 800cefe:	4641      	mov	r1, r8
 800cf00:	4638      	mov	r0, r7
 800cf02:	47c8      	blx	r9
 800cf04:	3001      	adds	r0, #1
 800cf06:	d103      	bne.n	800cf10 <_printf_common+0xac>
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf10:	3501      	adds	r5, #1
 800cf12:	e7c6      	b.n	800cea2 <_printf_common+0x3e>
 800cf14:	18e1      	adds	r1, r4, r3
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	2030      	movs	r0, #48	@ 0x30
 800cf1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf1e:	4422      	add	r2, r4
 800cf20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf28:	3302      	adds	r3, #2
 800cf2a:	e7c7      	b.n	800cebc <_printf_common+0x58>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	4622      	mov	r2, r4
 800cf30:	4641      	mov	r1, r8
 800cf32:	4638      	mov	r0, r7
 800cf34:	47c8      	blx	r9
 800cf36:	3001      	adds	r0, #1
 800cf38:	d0e6      	beq.n	800cf08 <_printf_common+0xa4>
 800cf3a:	3601      	adds	r6, #1
 800cf3c:	e7d9      	b.n	800cef2 <_printf_common+0x8e>
	...

0800cf40 <_printf_i>:
 800cf40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf44:	7e0f      	ldrb	r7, [r1, #24]
 800cf46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf48:	2f78      	cmp	r7, #120	@ 0x78
 800cf4a:	4691      	mov	r9, r2
 800cf4c:	4680      	mov	r8, r0
 800cf4e:	460c      	mov	r4, r1
 800cf50:	469a      	mov	sl, r3
 800cf52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf56:	d807      	bhi.n	800cf68 <_printf_i+0x28>
 800cf58:	2f62      	cmp	r7, #98	@ 0x62
 800cf5a:	d80a      	bhi.n	800cf72 <_printf_i+0x32>
 800cf5c:	2f00      	cmp	r7, #0
 800cf5e:	f000 80d1 	beq.w	800d104 <_printf_i+0x1c4>
 800cf62:	2f58      	cmp	r7, #88	@ 0x58
 800cf64:	f000 80b8 	beq.w	800d0d8 <_printf_i+0x198>
 800cf68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf70:	e03a      	b.n	800cfe8 <_printf_i+0xa8>
 800cf72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf76:	2b15      	cmp	r3, #21
 800cf78:	d8f6      	bhi.n	800cf68 <_printf_i+0x28>
 800cf7a:	a101      	add	r1, pc, #4	@ (adr r1, 800cf80 <_printf_i+0x40>)
 800cf7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf80:	0800cfd9 	.word	0x0800cfd9
 800cf84:	0800cfed 	.word	0x0800cfed
 800cf88:	0800cf69 	.word	0x0800cf69
 800cf8c:	0800cf69 	.word	0x0800cf69
 800cf90:	0800cf69 	.word	0x0800cf69
 800cf94:	0800cf69 	.word	0x0800cf69
 800cf98:	0800cfed 	.word	0x0800cfed
 800cf9c:	0800cf69 	.word	0x0800cf69
 800cfa0:	0800cf69 	.word	0x0800cf69
 800cfa4:	0800cf69 	.word	0x0800cf69
 800cfa8:	0800cf69 	.word	0x0800cf69
 800cfac:	0800d0eb 	.word	0x0800d0eb
 800cfb0:	0800d017 	.word	0x0800d017
 800cfb4:	0800d0a5 	.word	0x0800d0a5
 800cfb8:	0800cf69 	.word	0x0800cf69
 800cfbc:	0800cf69 	.word	0x0800cf69
 800cfc0:	0800d10d 	.word	0x0800d10d
 800cfc4:	0800cf69 	.word	0x0800cf69
 800cfc8:	0800d017 	.word	0x0800d017
 800cfcc:	0800cf69 	.word	0x0800cf69
 800cfd0:	0800cf69 	.word	0x0800cf69
 800cfd4:	0800d0ad 	.word	0x0800d0ad
 800cfd8:	6833      	ldr	r3, [r6, #0]
 800cfda:	1d1a      	adds	r2, r3, #4
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	6032      	str	r2, [r6, #0]
 800cfe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e09c      	b.n	800d126 <_printf_i+0x1e6>
 800cfec:	6833      	ldr	r3, [r6, #0]
 800cfee:	6820      	ldr	r0, [r4, #0]
 800cff0:	1d19      	adds	r1, r3, #4
 800cff2:	6031      	str	r1, [r6, #0]
 800cff4:	0606      	lsls	r6, r0, #24
 800cff6:	d501      	bpl.n	800cffc <_printf_i+0xbc>
 800cff8:	681d      	ldr	r5, [r3, #0]
 800cffa:	e003      	b.n	800d004 <_printf_i+0xc4>
 800cffc:	0645      	lsls	r5, r0, #25
 800cffe:	d5fb      	bpl.n	800cff8 <_printf_i+0xb8>
 800d000:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d004:	2d00      	cmp	r5, #0
 800d006:	da03      	bge.n	800d010 <_printf_i+0xd0>
 800d008:	232d      	movs	r3, #45	@ 0x2d
 800d00a:	426d      	negs	r5, r5
 800d00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d010:	4858      	ldr	r0, [pc, #352]	@ (800d174 <_printf_i+0x234>)
 800d012:	230a      	movs	r3, #10
 800d014:	e011      	b.n	800d03a <_printf_i+0xfa>
 800d016:	6821      	ldr	r1, [r4, #0]
 800d018:	6833      	ldr	r3, [r6, #0]
 800d01a:	0608      	lsls	r0, r1, #24
 800d01c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d020:	d402      	bmi.n	800d028 <_printf_i+0xe8>
 800d022:	0649      	lsls	r1, r1, #25
 800d024:	bf48      	it	mi
 800d026:	b2ad      	uxthmi	r5, r5
 800d028:	2f6f      	cmp	r7, #111	@ 0x6f
 800d02a:	4852      	ldr	r0, [pc, #328]	@ (800d174 <_printf_i+0x234>)
 800d02c:	6033      	str	r3, [r6, #0]
 800d02e:	bf14      	ite	ne
 800d030:	230a      	movne	r3, #10
 800d032:	2308      	moveq	r3, #8
 800d034:	2100      	movs	r1, #0
 800d036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d03a:	6866      	ldr	r6, [r4, #4]
 800d03c:	60a6      	str	r6, [r4, #8]
 800d03e:	2e00      	cmp	r6, #0
 800d040:	db05      	blt.n	800d04e <_printf_i+0x10e>
 800d042:	6821      	ldr	r1, [r4, #0]
 800d044:	432e      	orrs	r6, r5
 800d046:	f021 0104 	bic.w	r1, r1, #4
 800d04a:	6021      	str	r1, [r4, #0]
 800d04c:	d04b      	beq.n	800d0e6 <_printf_i+0x1a6>
 800d04e:	4616      	mov	r6, r2
 800d050:	fbb5 f1f3 	udiv	r1, r5, r3
 800d054:	fb03 5711 	mls	r7, r3, r1, r5
 800d058:	5dc7      	ldrb	r7, [r0, r7]
 800d05a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d05e:	462f      	mov	r7, r5
 800d060:	42bb      	cmp	r3, r7
 800d062:	460d      	mov	r5, r1
 800d064:	d9f4      	bls.n	800d050 <_printf_i+0x110>
 800d066:	2b08      	cmp	r3, #8
 800d068:	d10b      	bne.n	800d082 <_printf_i+0x142>
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	07df      	lsls	r7, r3, #31
 800d06e:	d508      	bpl.n	800d082 <_printf_i+0x142>
 800d070:	6923      	ldr	r3, [r4, #16]
 800d072:	6861      	ldr	r1, [r4, #4]
 800d074:	4299      	cmp	r1, r3
 800d076:	bfde      	ittt	le
 800d078:	2330      	movle	r3, #48	@ 0x30
 800d07a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d07e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d082:	1b92      	subs	r2, r2, r6
 800d084:	6122      	str	r2, [r4, #16]
 800d086:	f8cd a000 	str.w	sl, [sp]
 800d08a:	464b      	mov	r3, r9
 800d08c:	aa03      	add	r2, sp, #12
 800d08e:	4621      	mov	r1, r4
 800d090:	4640      	mov	r0, r8
 800d092:	f7ff fee7 	bl	800ce64 <_printf_common>
 800d096:	3001      	adds	r0, #1
 800d098:	d14a      	bne.n	800d130 <_printf_i+0x1f0>
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	b004      	add	sp, #16
 800d0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	f043 0320 	orr.w	r3, r3, #32
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	4832      	ldr	r0, [pc, #200]	@ (800d178 <_printf_i+0x238>)
 800d0ae:	2778      	movs	r7, #120	@ 0x78
 800d0b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	6831      	ldr	r1, [r6, #0]
 800d0b8:	061f      	lsls	r7, r3, #24
 800d0ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800d0be:	d402      	bmi.n	800d0c6 <_printf_i+0x186>
 800d0c0:	065f      	lsls	r7, r3, #25
 800d0c2:	bf48      	it	mi
 800d0c4:	b2ad      	uxthmi	r5, r5
 800d0c6:	6031      	str	r1, [r6, #0]
 800d0c8:	07d9      	lsls	r1, r3, #31
 800d0ca:	bf44      	itt	mi
 800d0cc:	f043 0320 	orrmi.w	r3, r3, #32
 800d0d0:	6023      	strmi	r3, [r4, #0]
 800d0d2:	b11d      	cbz	r5, 800d0dc <_printf_i+0x19c>
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	e7ad      	b.n	800d034 <_printf_i+0xf4>
 800d0d8:	4826      	ldr	r0, [pc, #152]	@ (800d174 <_printf_i+0x234>)
 800d0da:	e7e9      	b.n	800d0b0 <_printf_i+0x170>
 800d0dc:	6823      	ldr	r3, [r4, #0]
 800d0de:	f023 0320 	bic.w	r3, r3, #32
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	e7f6      	b.n	800d0d4 <_printf_i+0x194>
 800d0e6:	4616      	mov	r6, r2
 800d0e8:	e7bd      	b.n	800d066 <_printf_i+0x126>
 800d0ea:	6833      	ldr	r3, [r6, #0]
 800d0ec:	6825      	ldr	r5, [r4, #0]
 800d0ee:	6961      	ldr	r1, [r4, #20]
 800d0f0:	1d18      	adds	r0, r3, #4
 800d0f2:	6030      	str	r0, [r6, #0]
 800d0f4:	062e      	lsls	r6, r5, #24
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	d501      	bpl.n	800d0fe <_printf_i+0x1be>
 800d0fa:	6019      	str	r1, [r3, #0]
 800d0fc:	e002      	b.n	800d104 <_printf_i+0x1c4>
 800d0fe:	0668      	lsls	r0, r5, #25
 800d100:	d5fb      	bpl.n	800d0fa <_printf_i+0x1ba>
 800d102:	8019      	strh	r1, [r3, #0]
 800d104:	2300      	movs	r3, #0
 800d106:	6123      	str	r3, [r4, #16]
 800d108:	4616      	mov	r6, r2
 800d10a:	e7bc      	b.n	800d086 <_printf_i+0x146>
 800d10c:	6833      	ldr	r3, [r6, #0]
 800d10e:	1d1a      	adds	r2, r3, #4
 800d110:	6032      	str	r2, [r6, #0]
 800d112:	681e      	ldr	r6, [r3, #0]
 800d114:	6862      	ldr	r2, [r4, #4]
 800d116:	2100      	movs	r1, #0
 800d118:	4630      	mov	r0, r6
 800d11a:	f7f3 f8e9 	bl	80002f0 <memchr>
 800d11e:	b108      	cbz	r0, 800d124 <_printf_i+0x1e4>
 800d120:	1b80      	subs	r0, r0, r6
 800d122:	6060      	str	r0, [r4, #4]
 800d124:	6863      	ldr	r3, [r4, #4]
 800d126:	6123      	str	r3, [r4, #16]
 800d128:	2300      	movs	r3, #0
 800d12a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d12e:	e7aa      	b.n	800d086 <_printf_i+0x146>
 800d130:	6923      	ldr	r3, [r4, #16]
 800d132:	4632      	mov	r2, r6
 800d134:	4649      	mov	r1, r9
 800d136:	4640      	mov	r0, r8
 800d138:	47d0      	blx	sl
 800d13a:	3001      	adds	r0, #1
 800d13c:	d0ad      	beq.n	800d09a <_printf_i+0x15a>
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	079b      	lsls	r3, r3, #30
 800d142:	d413      	bmi.n	800d16c <_printf_i+0x22c>
 800d144:	68e0      	ldr	r0, [r4, #12]
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	4298      	cmp	r0, r3
 800d14a:	bfb8      	it	lt
 800d14c:	4618      	movlt	r0, r3
 800d14e:	e7a6      	b.n	800d09e <_printf_i+0x15e>
 800d150:	2301      	movs	r3, #1
 800d152:	4632      	mov	r2, r6
 800d154:	4649      	mov	r1, r9
 800d156:	4640      	mov	r0, r8
 800d158:	47d0      	blx	sl
 800d15a:	3001      	adds	r0, #1
 800d15c:	d09d      	beq.n	800d09a <_printf_i+0x15a>
 800d15e:	3501      	adds	r5, #1
 800d160:	68e3      	ldr	r3, [r4, #12]
 800d162:	9903      	ldr	r1, [sp, #12]
 800d164:	1a5b      	subs	r3, r3, r1
 800d166:	42ab      	cmp	r3, r5
 800d168:	dcf2      	bgt.n	800d150 <_printf_i+0x210>
 800d16a:	e7eb      	b.n	800d144 <_printf_i+0x204>
 800d16c:	2500      	movs	r5, #0
 800d16e:	f104 0619 	add.w	r6, r4, #25
 800d172:	e7f5      	b.n	800d160 <_printf_i+0x220>
 800d174:	0800f66a 	.word	0x0800f66a
 800d178:	0800f67b 	.word	0x0800f67b

0800d17c <std>:
 800d17c:	2300      	movs	r3, #0
 800d17e:	b510      	push	{r4, lr}
 800d180:	4604      	mov	r4, r0
 800d182:	e9c0 3300 	strd	r3, r3, [r0]
 800d186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d18a:	6083      	str	r3, [r0, #8]
 800d18c:	8181      	strh	r1, [r0, #12]
 800d18e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d190:	81c2      	strh	r2, [r0, #14]
 800d192:	6183      	str	r3, [r0, #24]
 800d194:	4619      	mov	r1, r3
 800d196:	2208      	movs	r2, #8
 800d198:	305c      	adds	r0, #92	@ 0x5c
 800d19a:	f000 f92a 	bl	800d3f2 <memset>
 800d19e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1d4 <std+0x58>)
 800d1a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d1d8 <std+0x5c>)
 800d1a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1dc <std+0x60>)
 800d1a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e0 <std+0x64>)
 800d1ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800d1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e4 <std+0x68>)
 800d1b0:	6224      	str	r4, [r4, #32]
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d006      	beq.n	800d1c4 <std+0x48>
 800d1b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d1ba:	4294      	cmp	r4, r2
 800d1bc:	d002      	beq.n	800d1c4 <std+0x48>
 800d1be:	33d0      	adds	r3, #208	@ 0xd0
 800d1c0:	429c      	cmp	r4, r3
 800d1c2:	d105      	bne.n	800d1d0 <std+0x54>
 800d1c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1cc:	f000 b99e 	b.w	800d50c <__retarget_lock_init_recursive>
 800d1d0:	bd10      	pop	{r4, pc}
 800d1d2:	bf00      	nop
 800d1d4:	0800d36d 	.word	0x0800d36d
 800d1d8:	0800d38f 	.word	0x0800d38f
 800d1dc:	0800d3c7 	.word	0x0800d3c7
 800d1e0:	0800d3eb 	.word	0x0800d3eb
 800d1e4:	24000cc8 	.word	0x24000cc8

0800d1e8 <stdio_exit_handler>:
 800d1e8:	4a02      	ldr	r2, [pc, #8]	@ (800d1f4 <stdio_exit_handler+0xc>)
 800d1ea:	4903      	ldr	r1, [pc, #12]	@ (800d1f8 <stdio_exit_handler+0x10>)
 800d1ec:	4803      	ldr	r0, [pc, #12]	@ (800d1fc <stdio_exit_handler+0x14>)
 800d1ee:	f000 b869 	b.w	800d2c4 <_fwalk_sglue>
 800d1f2:	bf00      	nop
 800d1f4:	24000010 	.word	0x24000010
 800d1f8:	0800eec1 	.word	0x0800eec1
 800d1fc:	24000020 	.word	0x24000020

0800d200 <cleanup_stdio>:
 800d200:	6841      	ldr	r1, [r0, #4]
 800d202:	4b0c      	ldr	r3, [pc, #48]	@ (800d234 <cleanup_stdio+0x34>)
 800d204:	4299      	cmp	r1, r3
 800d206:	b510      	push	{r4, lr}
 800d208:	4604      	mov	r4, r0
 800d20a:	d001      	beq.n	800d210 <cleanup_stdio+0x10>
 800d20c:	f001 fe58 	bl	800eec0 <_fflush_r>
 800d210:	68a1      	ldr	r1, [r4, #8]
 800d212:	4b09      	ldr	r3, [pc, #36]	@ (800d238 <cleanup_stdio+0x38>)
 800d214:	4299      	cmp	r1, r3
 800d216:	d002      	beq.n	800d21e <cleanup_stdio+0x1e>
 800d218:	4620      	mov	r0, r4
 800d21a:	f001 fe51 	bl	800eec0 <_fflush_r>
 800d21e:	68e1      	ldr	r1, [r4, #12]
 800d220:	4b06      	ldr	r3, [pc, #24]	@ (800d23c <cleanup_stdio+0x3c>)
 800d222:	4299      	cmp	r1, r3
 800d224:	d004      	beq.n	800d230 <cleanup_stdio+0x30>
 800d226:	4620      	mov	r0, r4
 800d228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d22c:	f001 be48 	b.w	800eec0 <_fflush_r>
 800d230:	bd10      	pop	{r4, pc}
 800d232:	bf00      	nop
 800d234:	24000cc8 	.word	0x24000cc8
 800d238:	24000d30 	.word	0x24000d30
 800d23c:	24000d98 	.word	0x24000d98

0800d240 <global_stdio_init.part.0>:
 800d240:	b510      	push	{r4, lr}
 800d242:	4b0b      	ldr	r3, [pc, #44]	@ (800d270 <global_stdio_init.part.0+0x30>)
 800d244:	4c0b      	ldr	r4, [pc, #44]	@ (800d274 <global_stdio_init.part.0+0x34>)
 800d246:	4a0c      	ldr	r2, [pc, #48]	@ (800d278 <global_stdio_init.part.0+0x38>)
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	4620      	mov	r0, r4
 800d24c:	2200      	movs	r2, #0
 800d24e:	2104      	movs	r1, #4
 800d250:	f7ff ff94 	bl	800d17c <std>
 800d254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d258:	2201      	movs	r2, #1
 800d25a:	2109      	movs	r1, #9
 800d25c:	f7ff ff8e 	bl	800d17c <std>
 800d260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d264:	2202      	movs	r2, #2
 800d266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d26a:	2112      	movs	r1, #18
 800d26c:	f7ff bf86 	b.w	800d17c <std>
 800d270:	24000e00 	.word	0x24000e00
 800d274:	24000cc8 	.word	0x24000cc8
 800d278:	0800d1e9 	.word	0x0800d1e9

0800d27c <__sfp_lock_acquire>:
 800d27c:	4801      	ldr	r0, [pc, #4]	@ (800d284 <__sfp_lock_acquire+0x8>)
 800d27e:	f000 b946 	b.w	800d50e <__retarget_lock_acquire_recursive>
 800d282:	bf00      	nop
 800d284:	24000e09 	.word	0x24000e09

0800d288 <__sfp_lock_release>:
 800d288:	4801      	ldr	r0, [pc, #4]	@ (800d290 <__sfp_lock_release+0x8>)
 800d28a:	f000 b941 	b.w	800d510 <__retarget_lock_release_recursive>
 800d28e:	bf00      	nop
 800d290:	24000e09 	.word	0x24000e09

0800d294 <__sinit>:
 800d294:	b510      	push	{r4, lr}
 800d296:	4604      	mov	r4, r0
 800d298:	f7ff fff0 	bl	800d27c <__sfp_lock_acquire>
 800d29c:	6a23      	ldr	r3, [r4, #32]
 800d29e:	b11b      	cbz	r3, 800d2a8 <__sinit+0x14>
 800d2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2a4:	f7ff bff0 	b.w	800d288 <__sfp_lock_release>
 800d2a8:	4b04      	ldr	r3, [pc, #16]	@ (800d2bc <__sinit+0x28>)
 800d2aa:	6223      	str	r3, [r4, #32]
 800d2ac:	4b04      	ldr	r3, [pc, #16]	@ (800d2c0 <__sinit+0x2c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1f5      	bne.n	800d2a0 <__sinit+0xc>
 800d2b4:	f7ff ffc4 	bl	800d240 <global_stdio_init.part.0>
 800d2b8:	e7f2      	b.n	800d2a0 <__sinit+0xc>
 800d2ba:	bf00      	nop
 800d2bc:	0800d201 	.word	0x0800d201
 800d2c0:	24000e00 	.word	0x24000e00

0800d2c4 <_fwalk_sglue>:
 800d2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2c8:	4607      	mov	r7, r0
 800d2ca:	4688      	mov	r8, r1
 800d2cc:	4614      	mov	r4, r2
 800d2ce:	2600      	movs	r6, #0
 800d2d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2d4:	f1b9 0901 	subs.w	r9, r9, #1
 800d2d8:	d505      	bpl.n	800d2e6 <_fwalk_sglue+0x22>
 800d2da:	6824      	ldr	r4, [r4, #0]
 800d2dc:	2c00      	cmp	r4, #0
 800d2de:	d1f7      	bne.n	800d2d0 <_fwalk_sglue+0xc>
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2e6:	89ab      	ldrh	r3, [r5, #12]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d907      	bls.n	800d2fc <_fwalk_sglue+0x38>
 800d2ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	d003      	beq.n	800d2fc <_fwalk_sglue+0x38>
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	47c0      	blx	r8
 800d2fa:	4306      	orrs	r6, r0
 800d2fc:	3568      	adds	r5, #104	@ 0x68
 800d2fe:	e7e9      	b.n	800d2d4 <_fwalk_sglue+0x10>

0800d300 <sniprintf>:
 800d300:	b40c      	push	{r2, r3}
 800d302:	b530      	push	{r4, r5, lr}
 800d304:	4b18      	ldr	r3, [pc, #96]	@ (800d368 <sniprintf+0x68>)
 800d306:	1e0c      	subs	r4, r1, #0
 800d308:	681d      	ldr	r5, [r3, #0]
 800d30a:	b09d      	sub	sp, #116	@ 0x74
 800d30c:	da08      	bge.n	800d320 <sniprintf+0x20>
 800d30e:	238b      	movs	r3, #139	@ 0x8b
 800d310:	602b      	str	r3, [r5, #0]
 800d312:	f04f 30ff 	mov.w	r0, #4294967295
 800d316:	b01d      	add	sp, #116	@ 0x74
 800d318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d31c:	b002      	add	sp, #8
 800d31e:	4770      	bx	lr
 800d320:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d324:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d328:	f04f 0300 	mov.w	r3, #0
 800d32c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d32e:	bf14      	ite	ne
 800d330:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d334:	4623      	moveq	r3, r4
 800d336:	9304      	str	r3, [sp, #16]
 800d338:	9307      	str	r3, [sp, #28]
 800d33a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d33e:	9002      	str	r0, [sp, #8]
 800d340:	9006      	str	r0, [sp, #24]
 800d342:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d346:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d348:	ab21      	add	r3, sp, #132	@ 0x84
 800d34a:	a902      	add	r1, sp, #8
 800d34c:	4628      	mov	r0, r5
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	f001 faf4 	bl	800e93c <_svfiprintf_r>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	bfbc      	itt	lt
 800d358:	238b      	movlt	r3, #139	@ 0x8b
 800d35a:	602b      	strlt	r3, [r5, #0]
 800d35c:	2c00      	cmp	r4, #0
 800d35e:	d0da      	beq.n	800d316 <sniprintf+0x16>
 800d360:	9b02      	ldr	r3, [sp, #8]
 800d362:	2200      	movs	r2, #0
 800d364:	701a      	strb	r2, [r3, #0]
 800d366:	e7d6      	b.n	800d316 <sniprintf+0x16>
 800d368:	2400001c 	.word	0x2400001c

0800d36c <__sread>:
 800d36c:	b510      	push	{r4, lr}
 800d36e:	460c      	mov	r4, r1
 800d370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d374:	f000 f86c 	bl	800d450 <_read_r>
 800d378:	2800      	cmp	r0, #0
 800d37a:	bfab      	itete	ge
 800d37c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d37e:	89a3      	ldrhlt	r3, [r4, #12]
 800d380:	181b      	addge	r3, r3, r0
 800d382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d386:	bfac      	ite	ge
 800d388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d38a:	81a3      	strhlt	r3, [r4, #12]
 800d38c:	bd10      	pop	{r4, pc}

0800d38e <__swrite>:
 800d38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d392:	461f      	mov	r7, r3
 800d394:	898b      	ldrh	r3, [r1, #12]
 800d396:	05db      	lsls	r3, r3, #23
 800d398:	4605      	mov	r5, r0
 800d39a:	460c      	mov	r4, r1
 800d39c:	4616      	mov	r6, r2
 800d39e:	d505      	bpl.n	800d3ac <__swrite+0x1e>
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	2302      	movs	r3, #2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f000 f840 	bl	800d42c <_lseek_r>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	463b      	mov	r3, r7
 800d3bc:	4628      	mov	r0, r5
 800d3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c2:	f000 b867 	b.w	800d494 <_write_r>

0800d3c6 <__sseek>:
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ce:	f000 f82d 	bl	800d42c <_lseek_r>
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	bf15      	itete	ne
 800d3d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d3da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d3de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d3e2:	81a3      	strheq	r3, [r4, #12]
 800d3e4:	bf18      	it	ne
 800d3e6:	81a3      	strhne	r3, [r4, #12]
 800d3e8:	bd10      	pop	{r4, pc}

0800d3ea <__sclose>:
 800d3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ee:	f000 b80d 	b.w	800d40c <_close_r>

0800d3f2 <memset>:
 800d3f2:	4402      	add	r2, r0
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d100      	bne.n	800d3fc <memset+0xa>
 800d3fa:	4770      	bx	lr
 800d3fc:	f803 1b01 	strb.w	r1, [r3], #1
 800d400:	e7f9      	b.n	800d3f6 <memset+0x4>
	...

0800d404 <_localeconv_r>:
 800d404:	4800      	ldr	r0, [pc, #0]	@ (800d408 <_localeconv_r+0x4>)
 800d406:	4770      	bx	lr
 800d408:	2400015c 	.word	0x2400015c

0800d40c <_close_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4d06      	ldr	r5, [pc, #24]	@ (800d428 <_close_r+0x1c>)
 800d410:	2300      	movs	r3, #0
 800d412:	4604      	mov	r4, r0
 800d414:	4608      	mov	r0, r1
 800d416:	602b      	str	r3, [r5, #0]
 800d418:	f7f4 f88a 	bl	8001530 <_close>
 800d41c:	1c43      	adds	r3, r0, #1
 800d41e:	d102      	bne.n	800d426 <_close_r+0x1a>
 800d420:	682b      	ldr	r3, [r5, #0]
 800d422:	b103      	cbz	r3, 800d426 <_close_r+0x1a>
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	bd38      	pop	{r3, r4, r5, pc}
 800d428:	24000e04 	.word	0x24000e04

0800d42c <_lseek_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d07      	ldr	r5, [pc, #28]	@ (800d44c <_lseek_r+0x20>)
 800d430:	4604      	mov	r4, r0
 800d432:	4608      	mov	r0, r1
 800d434:	4611      	mov	r1, r2
 800d436:	2200      	movs	r2, #0
 800d438:	602a      	str	r2, [r5, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	f7f4 f89f 	bl	800157e <_lseek>
 800d440:	1c43      	adds	r3, r0, #1
 800d442:	d102      	bne.n	800d44a <_lseek_r+0x1e>
 800d444:	682b      	ldr	r3, [r5, #0]
 800d446:	b103      	cbz	r3, 800d44a <_lseek_r+0x1e>
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	bd38      	pop	{r3, r4, r5, pc}
 800d44c:	24000e04 	.word	0x24000e04

0800d450 <_read_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d07      	ldr	r5, [pc, #28]	@ (800d470 <_read_r+0x20>)
 800d454:	4604      	mov	r4, r0
 800d456:	4608      	mov	r0, r1
 800d458:	4611      	mov	r1, r2
 800d45a:	2200      	movs	r2, #0
 800d45c:	602a      	str	r2, [r5, #0]
 800d45e:	461a      	mov	r2, r3
 800d460:	f7f4 f82d 	bl	80014be <_read>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d102      	bne.n	800d46e <_read_r+0x1e>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	b103      	cbz	r3, 800d46e <_read_r+0x1e>
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
 800d470:	24000e04 	.word	0x24000e04

0800d474 <_sbrk_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4d06      	ldr	r5, [pc, #24]	@ (800d490 <_sbrk_r+0x1c>)
 800d478:	2300      	movs	r3, #0
 800d47a:	4604      	mov	r4, r0
 800d47c:	4608      	mov	r0, r1
 800d47e:	602b      	str	r3, [r5, #0]
 800d480:	f7f4 f88a 	bl	8001598 <_sbrk>
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	d102      	bne.n	800d48e <_sbrk_r+0x1a>
 800d488:	682b      	ldr	r3, [r5, #0]
 800d48a:	b103      	cbz	r3, 800d48e <_sbrk_r+0x1a>
 800d48c:	6023      	str	r3, [r4, #0]
 800d48e:	bd38      	pop	{r3, r4, r5, pc}
 800d490:	24000e04 	.word	0x24000e04

0800d494 <_write_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	4d07      	ldr	r5, [pc, #28]	@ (800d4b4 <_write_r+0x20>)
 800d498:	4604      	mov	r4, r0
 800d49a:	4608      	mov	r0, r1
 800d49c:	4611      	mov	r1, r2
 800d49e:	2200      	movs	r2, #0
 800d4a0:	602a      	str	r2, [r5, #0]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f7f4 f828 	bl	80014f8 <_write>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d102      	bne.n	800d4b2 <_write_r+0x1e>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	b103      	cbz	r3, 800d4b2 <_write_r+0x1e>
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	24000e04 	.word	0x24000e04

0800d4b8 <__errno>:
 800d4b8:	4b01      	ldr	r3, [pc, #4]	@ (800d4c0 <__errno+0x8>)
 800d4ba:	6818      	ldr	r0, [r3, #0]
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	2400001c 	.word	0x2400001c

0800d4c4 <__libc_init_array>:
 800d4c4:	b570      	push	{r4, r5, r6, lr}
 800d4c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d4fc <__libc_init_array+0x38>)
 800d4c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d500 <__libc_init_array+0x3c>)
 800d4ca:	1b64      	subs	r4, r4, r5
 800d4cc:	10a4      	asrs	r4, r4, #2
 800d4ce:	2600      	movs	r6, #0
 800d4d0:	42a6      	cmp	r6, r4
 800d4d2:	d109      	bne.n	800d4e8 <__libc_init_array+0x24>
 800d4d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d504 <__libc_init_array+0x40>)
 800d4d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d508 <__libc_init_array+0x44>)
 800d4d8:	f001 ff32 	bl	800f340 <_init>
 800d4dc:	1b64      	subs	r4, r4, r5
 800d4de:	10a4      	asrs	r4, r4, #2
 800d4e0:	2600      	movs	r6, #0
 800d4e2:	42a6      	cmp	r6, r4
 800d4e4:	d105      	bne.n	800d4f2 <__libc_init_array+0x2e>
 800d4e6:	bd70      	pop	{r4, r5, r6, pc}
 800d4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4ec:	4798      	blx	r3
 800d4ee:	3601      	adds	r6, #1
 800d4f0:	e7ee      	b.n	800d4d0 <__libc_init_array+0xc>
 800d4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f6:	4798      	blx	r3
 800d4f8:	3601      	adds	r6, #1
 800d4fa:	e7f2      	b.n	800d4e2 <__libc_init_array+0x1e>
 800d4fc:	0800f9d4 	.word	0x0800f9d4
 800d500:	0800f9d4 	.word	0x0800f9d4
 800d504:	0800f9d4 	.word	0x0800f9d4
 800d508:	0800f9d8 	.word	0x0800f9d8

0800d50c <__retarget_lock_init_recursive>:
 800d50c:	4770      	bx	lr

0800d50e <__retarget_lock_acquire_recursive>:
 800d50e:	4770      	bx	lr

0800d510 <__retarget_lock_release_recursive>:
 800d510:	4770      	bx	lr

0800d512 <memcpy>:
 800d512:	440a      	add	r2, r1
 800d514:	4291      	cmp	r1, r2
 800d516:	f100 33ff 	add.w	r3, r0, #4294967295
 800d51a:	d100      	bne.n	800d51e <memcpy+0xc>
 800d51c:	4770      	bx	lr
 800d51e:	b510      	push	{r4, lr}
 800d520:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d524:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d528:	4291      	cmp	r1, r2
 800d52a:	d1f9      	bne.n	800d520 <memcpy+0xe>
 800d52c:	bd10      	pop	{r4, pc}

0800d52e <quorem>:
 800d52e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d532:	6903      	ldr	r3, [r0, #16]
 800d534:	690c      	ldr	r4, [r1, #16]
 800d536:	42a3      	cmp	r3, r4
 800d538:	4607      	mov	r7, r0
 800d53a:	db7e      	blt.n	800d63a <quorem+0x10c>
 800d53c:	3c01      	subs	r4, #1
 800d53e:	f101 0814 	add.w	r8, r1, #20
 800d542:	00a3      	lsls	r3, r4, #2
 800d544:	f100 0514 	add.w	r5, r0, #20
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d558:	3301      	adds	r3, #1
 800d55a:	429a      	cmp	r2, r3
 800d55c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d560:	fbb2 f6f3 	udiv	r6, r2, r3
 800d564:	d32e      	bcc.n	800d5c4 <quorem+0x96>
 800d566:	f04f 0a00 	mov.w	sl, #0
 800d56a:	46c4      	mov	ip, r8
 800d56c:	46ae      	mov	lr, r5
 800d56e:	46d3      	mov	fp, sl
 800d570:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d574:	b298      	uxth	r0, r3
 800d576:	fb06 a000 	mla	r0, r6, r0, sl
 800d57a:	0c02      	lsrs	r2, r0, #16
 800d57c:	0c1b      	lsrs	r3, r3, #16
 800d57e:	fb06 2303 	mla	r3, r6, r3, r2
 800d582:	f8de 2000 	ldr.w	r2, [lr]
 800d586:	b280      	uxth	r0, r0
 800d588:	b292      	uxth	r2, r2
 800d58a:	1a12      	subs	r2, r2, r0
 800d58c:	445a      	add	r2, fp
 800d58e:	f8de 0000 	ldr.w	r0, [lr]
 800d592:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d596:	b29b      	uxth	r3, r3
 800d598:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d59c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d5a0:	b292      	uxth	r2, r2
 800d5a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d5a6:	45e1      	cmp	r9, ip
 800d5a8:	f84e 2b04 	str.w	r2, [lr], #4
 800d5ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d5b0:	d2de      	bcs.n	800d570 <quorem+0x42>
 800d5b2:	9b00      	ldr	r3, [sp, #0]
 800d5b4:	58eb      	ldr	r3, [r5, r3]
 800d5b6:	b92b      	cbnz	r3, 800d5c4 <quorem+0x96>
 800d5b8:	9b01      	ldr	r3, [sp, #4]
 800d5ba:	3b04      	subs	r3, #4
 800d5bc:	429d      	cmp	r5, r3
 800d5be:	461a      	mov	r2, r3
 800d5c0:	d32f      	bcc.n	800d622 <quorem+0xf4>
 800d5c2:	613c      	str	r4, [r7, #16]
 800d5c4:	4638      	mov	r0, r7
 800d5c6:	f001 f855 	bl	800e674 <__mcmp>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	db25      	blt.n	800d61a <quorem+0xec>
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5d6:	f8d1 c000 	ldr.w	ip, [r1]
 800d5da:	fa1f fe82 	uxth.w	lr, r2
 800d5de:	fa1f f38c 	uxth.w	r3, ip
 800d5e2:	eba3 030e 	sub.w	r3, r3, lr
 800d5e6:	4403      	add	r3, r0
 800d5e8:	0c12      	lsrs	r2, r2, #16
 800d5ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d5ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5f8:	45c1      	cmp	r9, r8
 800d5fa:	f841 3b04 	str.w	r3, [r1], #4
 800d5fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d602:	d2e6      	bcs.n	800d5d2 <quorem+0xa4>
 800d604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d60c:	b922      	cbnz	r2, 800d618 <quorem+0xea>
 800d60e:	3b04      	subs	r3, #4
 800d610:	429d      	cmp	r5, r3
 800d612:	461a      	mov	r2, r3
 800d614:	d30b      	bcc.n	800d62e <quorem+0x100>
 800d616:	613c      	str	r4, [r7, #16]
 800d618:	3601      	adds	r6, #1
 800d61a:	4630      	mov	r0, r6
 800d61c:	b003      	add	sp, #12
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d622:	6812      	ldr	r2, [r2, #0]
 800d624:	3b04      	subs	r3, #4
 800d626:	2a00      	cmp	r2, #0
 800d628:	d1cb      	bne.n	800d5c2 <quorem+0x94>
 800d62a:	3c01      	subs	r4, #1
 800d62c:	e7c6      	b.n	800d5bc <quorem+0x8e>
 800d62e:	6812      	ldr	r2, [r2, #0]
 800d630:	3b04      	subs	r3, #4
 800d632:	2a00      	cmp	r2, #0
 800d634:	d1ef      	bne.n	800d616 <quorem+0xe8>
 800d636:	3c01      	subs	r4, #1
 800d638:	e7ea      	b.n	800d610 <quorem+0xe2>
 800d63a:	2000      	movs	r0, #0
 800d63c:	e7ee      	b.n	800d61c <quorem+0xee>
	...

0800d640 <_dtoa_r>:
 800d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	ed2d 8b02 	vpush	{d8}
 800d648:	69c7      	ldr	r7, [r0, #28]
 800d64a:	b091      	sub	sp, #68	@ 0x44
 800d64c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d650:	ec55 4b10 	vmov	r4, r5, d0
 800d654:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d656:	9107      	str	r1, [sp, #28]
 800d658:	4681      	mov	r9, r0
 800d65a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d65c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d65e:	b97f      	cbnz	r7, 800d680 <_dtoa_r+0x40>
 800d660:	2010      	movs	r0, #16
 800d662:	f7ff f89f 	bl	800c7a4 <malloc>
 800d666:	4602      	mov	r2, r0
 800d668:	f8c9 001c 	str.w	r0, [r9, #28]
 800d66c:	b920      	cbnz	r0, 800d678 <_dtoa_r+0x38>
 800d66e:	4ba0      	ldr	r3, [pc, #640]	@ (800d8f0 <_dtoa_r+0x2b0>)
 800d670:	21ef      	movs	r1, #239	@ 0xef
 800d672:	48a0      	ldr	r0, [pc, #640]	@ (800d8f4 <_dtoa_r+0x2b4>)
 800d674:	f001 fcfa 	bl	800f06c <__assert_func>
 800d678:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d67c:	6007      	str	r7, [r0, #0]
 800d67e:	60c7      	str	r7, [r0, #12]
 800d680:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d684:	6819      	ldr	r1, [r3, #0]
 800d686:	b159      	cbz	r1, 800d6a0 <_dtoa_r+0x60>
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	604a      	str	r2, [r1, #4]
 800d68c:	2301      	movs	r3, #1
 800d68e:	4093      	lsls	r3, r2
 800d690:	608b      	str	r3, [r1, #8]
 800d692:	4648      	mov	r0, r9
 800d694:	f000 fdbc 	bl	800e210 <_Bfree>
 800d698:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d69c:	2200      	movs	r2, #0
 800d69e:	601a      	str	r2, [r3, #0]
 800d6a0:	1e2b      	subs	r3, r5, #0
 800d6a2:	bfbb      	ittet	lt
 800d6a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d6a8:	9303      	strlt	r3, [sp, #12]
 800d6aa:	2300      	movge	r3, #0
 800d6ac:	2201      	movlt	r2, #1
 800d6ae:	bfac      	ite	ge
 800d6b0:	6033      	strge	r3, [r6, #0]
 800d6b2:	6032      	strlt	r2, [r6, #0]
 800d6b4:	4b90      	ldr	r3, [pc, #576]	@ (800d8f8 <_dtoa_r+0x2b8>)
 800d6b6:	9e03      	ldr	r6, [sp, #12]
 800d6b8:	43b3      	bics	r3, r6
 800d6ba:	d110      	bne.n	800d6de <_dtoa_r+0x9e>
 800d6bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6be:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d6c2:	6013      	str	r3, [r2, #0]
 800d6c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d6c8:	4323      	orrs	r3, r4
 800d6ca:	f000 84e6 	beq.w	800e09a <_dtoa_r+0xa5a>
 800d6ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6d0:	4f8a      	ldr	r7, [pc, #552]	@ (800d8fc <_dtoa_r+0x2bc>)
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 84e8 	beq.w	800e0a8 <_dtoa_r+0xa68>
 800d6d8:	1cfb      	adds	r3, r7, #3
 800d6da:	f000 bce3 	b.w	800e0a4 <_dtoa_r+0xa64>
 800d6de:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d6e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ea:	d10a      	bne.n	800d702 <_dtoa_r+0xc2>
 800d6ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	6013      	str	r3, [r2, #0]
 800d6f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6f4:	b113      	cbz	r3, 800d6fc <_dtoa_r+0xbc>
 800d6f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d6f8:	4b81      	ldr	r3, [pc, #516]	@ (800d900 <_dtoa_r+0x2c0>)
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	4f81      	ldr	r7, [pc, #516]	@ (800d904 <_dtoa_r+0x2c4>)
 800d6fe:	f000 bcd3 	b.w	800e0a8 <_dtoa_r+0xa68>
 800d702:	aa0e      	add	r2, sp, #56	@ 0x38
 800d704:	a90f      	add	r1, sp, #60	@ 0x3c
 800d706:	4648      	mov	r0, r9
 800d708:	eeb0 0b48 	vmov.f64	d0, d8
 800d70c:	f001 f862 	bl	800e7d4 <__d2b>
 800d710:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d716:	9001      	str	r0, [sp, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d045      	beq.n	800d7a8 <_dtoa_r+0x168>
 800d71c:	eeb0 7b48 	vmov.f64	d7, d8
 800d720:	ee18 1a90 	vmov	r1, s17
 800d724:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d728:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d72c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d730:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d734:	2500      	movs	r5, #0
 800d736:	ee07 1a90 	vmov	s15, r1
 800d73a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d73e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d8d8 <_dtoa_r+0x298>
 800d742:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d746:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d8e0 <_dtoa_r+0x2a0>
 800d74a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d74e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d8e8 <_dtoa_r+0x2a8>
 800d752:	ee07 3a90 	vmov	s15, r3
 800d756:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d75a:	eeb0 7b46 	vmov.f64	d7, d6
 800d75e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d762:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d766:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d76e:	ee16 8a90 	vmov	r8, s13
 800d772:	d508      	bpl.n	800d786 <_dtoa_r+0x146>
 800d774:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d778:	eeb4 6b47 	vcmp.f64	d6, d7
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	bf18      	it	ne
 800d782:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d786:	f1b8 0f16 	cmp.w	r8, #22
 800d78a:	d82b      	bhi.n	800d7e4 <_dtoa_r+0x1a4>
 800d78c:	495e      	ldr	r1, [pc, #376]	@ (800d908 <_dtoa_r+0x2c8>)
 800d78e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d792:	ed91 7b00 	vldr	d7, [r1]
 800d796:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79e:	d501      	bpl.n	800d7a4 <_dtoa_r+0x164>
 800d7a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	e01e      	b.n	800d7e6 <_dtoa_r+0x1a6>
 800d7a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d7b0:	2920      	cmp	r1, #32
 800d7b2:	bfc1      	itttt	gt
 800d7b4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d7b8:	408e      	lslgt	r6, r1
 800d7ba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d7be:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d7c2:	bfd6      	itet	le
 800d7c4:	f1c1 0120 	rsble	r1, r1, #32
 800d7c8:	4331      	orrgt	r1, r6
 800d7ca:	fa04 f101 	lslle.w	r1, r4, r1
 800d7ce:	ee07 1a90 	vmov	s15, r1
 800d7d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	ee17 1a90 	vmov	r1, s15
 800d7dc:	2501      	movs	r5, #1
 800d7de:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d7e2:	e7a8      	b.n	800d736 <_dtoa_r+0xf6>
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	1ad2      	subs	r2, r2, r3
 800d7e8:	1e53      	subs	r3, r2, #1
 800d7ea:	9306      	str	r3, [sp, #24]
 800d7ec:	bf45      	ittet	mi
 800d7ee:	f1c2 0301 	rsbmi	r3, r2, #1
 800d7f2:	9304      	strmi	r3, [sp, #16]
 800d7f4:	2300      	movpl	r3, #0
 800d7f6:	2300      	movmi	r3, #0
 800d7f8:	bf4c      	ite	mi
 800d7fa:	9306      	strmi	r3, [sp, #24]
 800d7fc:	9304      	strpl	r3, [sp, #16]
 800d7fe:	f1b8 0f00 	cmp.w	r8, #0
 800d802:	910c      	str	r1, [sp, #48]	@ 0x30
 800d804:	db18      	blt.n	800d838 <_dtoa_r+0x1f8>
 800d806:	9b06      	ldr	r3, [sp, #24]
 800d808:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d80c:	4443      	add	r3, r8
 800d80e:	9306      	str	r3, [sp, #24]
 800d810:	2300      	movs	r3, #0
 800d812:	9a07      	ldr	r2, [sp, #28]
 800d814:	2a09      	cmp	r2, #9
 800d816:	d845      	bhi.n	800d8a4 <_dtoa_r+0x264>
 800d818:	2a05      	cmp	r2, #5
 800d81a:	bfc4      	itt	gt
 800d81c:	3a04      	subgt	r2, #4
 800d81e:	9207      	strgt	r2, [sp, #28]
 800d820:	9a07      	ldr	r2, [sp, #28]
 800d822:	f1a2 0202 	sub.w	r2, r2, #2
 800d826:	bfcc      	ite	gt
 800d828:	2400      	movgt	r4, #0
 800d82a:	2401      	movle	r4, #1
 800d82c:	2a03      	cmp	r2, #3
 800d82e:	d844      	bhi.n	800d8ba <_dtoa_r+0x27a>
 800d830:	e8df f002 	tbb	[pc, r2]
 800d834:	0b173634 	.word	0x0b173634
 800d838:	9b04      	ldr	r3, [sp, #16]
 800d83a:	2200      	movs	r2, #0
 800d83c:	eba3 0308 	sub.w	r3, r3, r8
 800d840:	9304      	str	r3, [sp, #16]
 800d842:	920a      	str	r2, [sp, #40]	@ 0x28
 800d844:	f1c8 0300 	rsb	r3, r8, #0
 800d848:	e7e3      	b.n	800d812 <_dtoa_r+0x1d2>
 800d84a:	2201      	movs	r2, #1
 800d84c:	9208      	str	r2, [sp, #32]
 800d84e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d850:	eb08 0b02 	add.w	fp, r8, r2
 800d854:	f10b 0a01 	add.w	sl, fp, #1
 800d858:	4652      	mov	r2, sl
 800d85a:	2a01      	cmp	r2, #1
 800d85c:	bfb8      	it	lt
 800d85e:	2201      	movlt	r2, #1
 800d860:	e006      	b.n	800d870 <_dtoa_r+0x230>
 800d862:	2201      	movs	r2, #1
 800d864:	9208      	str	r2, [sp, #32]
 800d866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d868:	2a00      	cmp	r2, #0
 800d86a:	dd29      	ble.n	800d8c0 <_dtoa_r+0x280>
 800d86c:	4693      	mov	fp, r2
 800d86e:	4692      	mov	sl, r2
 800d870:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d874:	2100      	movs	r1, #0
 800d876:	2004      	movs	r0, #4
 800d878:	f100 0614 	add.w	r6, r0, #20
 800d87c:	4296      	cmp	r6, r2
 800d87e:	d926      	bls.n	800d8ce <_dtoa_r+0x28e>
 800d880:	6079      	str	r1, [r7, #4]
 800d882:	4648      	mov	r0, r9
 800d884:	9305      	str	r3, [sp, #20]
 800d886:	f000 fc83 	bl	800e190 <_Balloc>
 800d88a:	9b05      	ldr	r3, [sp, #20]
 800d88c:	4607      	mov	r7, r0
 800d88e:	2800      	cmp	r0, #0
 800d890:	d13e      	bne.n	800d910 <_dtoa_r+0x2d0>
 800d892:	4b1e      	ldr	r3, [pc, #120]	@ (800d90c <_dtoa_r+0x2cc>)
 800d894:	4602      	mov	r2, r0
 800d896:	f240 11af 	movw	r1, #431	@ 0x1af
 800d89a:	e6ea      	b.n	800d672 <_dtoa_r+0x32>
 800d89c:	2200      	movs	r2, #0
 800d89e:	e7e1      	b.n	800d864 <_dtoa_r+0x224>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	e7d3      	b.n	800d84c <_dtoa_r+0x20c>
 800d8a4:	2401      	movs	r4, #1
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d8ac:	f04f 3bff 	mov.w	fp, #4294967295
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	46da      	mov	sl, fp
 800d8b4:	2212      	movs	r2, #18
 800d8b6:	9109      	str	r1, [sp, #36]	@ 0x24
 800d8b8:	e7da      	b.n	800d870 <_dtoa_r+0x230>
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	9208      	str	r2, [sp, #32]
 800d8be:	e7f5      	b.n	800d8ac <_dtoa_r+0x26c>
 800d8c0:	f04f 0b01 	mov.w	fp, #1
 800d8c4:	46da      	mov	sl, fp
 800d8c6:	465a      	mov	r2, fp
 800d8c8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d8cc:	e7d0      	b.n	800d870 <_dtoa_r+0x230>
 800d8ce:	3101      	adds	r1, #1
 800d8d0:	0040      	lsls	r0, r0, #1
 800d8d2:	e7d1      	b.n	800d878 <_dtoa_r+0x238>
 800d8d4:	f3af 8000 	nop.w
 800d8d8:	636f4361 	.word	0x636f4361
 800d8dc:	3fd287a7 	.word	0x3fd287a7
 800d8e0:	8b60c8b3 	.word	0x8b60c8b3
 800d8e4:	3fc68a28 	.word	0x3fc68a28
 800d8e8:	509f79fb 	.word	0x509f79fb
 800d8ec:	3fd34413 	.word	0x3fd34413
 800d8f0:	0800f699 	.word	0x0800f699
 800d8f4:	0800f6b0 	.word	0x0800f6b0
 800d8f8:	7ff00000 	.word	0x7ff00000
 800d8fc:	0800f695 	.word	0x0800f695
 800d900:	0800f669 	.word	0x0800f669
 800d904:	0800f668 	.word	0x0800f668
 800d908:	0800f800 	.word	0x0800f800
 800d90c:	0800f708 	.word	0x0800f708
 800d910:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d914:	f1ba 0f0e 	cmp.w	sl, #14
 800d918:	6010      	str	r0, [r2, #0]
 800d91a:	d86e      	bhi.n	800d9fa <_dtoa_r+0x3ba>
 800d91c:	2c00      	cmp	r4, #0
 800d91e:	d06c      	beq.n	800d9fa <_dtoa_r+0x3ba>
 800d920:	f1b8 0f00 	cmp.w	r8, #0
 800d924:	f340 80b4 	ble.w	800da90 <_dtoa_r+0x450>
 800d928:	4ac8      	ldr	r2, [pc, #800]	@ (800dc4c <_dtoa_r+0x60c>)
 800d92a:	f008 010f 	and.w	r1, r8, #15
 800d92e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d932:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d936:	ed92 7b00 	vldr	d7, [r2]
 800d93a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d93e:	f000 809b 	beq.w	800da78 <_dtoa_r+0x438>
 800d942:	4ac3      	ldr	r2, [pc, #780]	@ (800dc50 <_dtoa_r+0x610>)
 800d944:	ed92 6b08 	vldr	d6, [r2, #32]
 800d948:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d94c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d950:	f001 010f 	and.w	r1, r1, #15
 800d954:	2203      	movs	r2, #3
 800d956:	48be      	ldr	r0, [pc, #760]	@ (800dc50 <_dtoa_r+0x610>)
 800d958:	2900      	cmp	r1, #0
 800d95a:	f040 808f 	bne.w	800da7c <_dtoa_r+0x43c>
 800d95e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d962:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d966:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d96a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d96c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d970:	2900      	cmp	r1, #0
 800d972:	f000 80b3 	beq.w	800dadc <_dtoa_r+0x49c>
 800d976:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d97a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d982:	f140 80ab 	bpl.w	800dadc <_dtoa_r+0x49c>
 800d986:	f1ba 0f00 	cmp.w	sl, #0
 800d98a:	f000 80a7 	beq.w	800dadc <_dtoa_r+0x49c>
 800d98e:	f1bb 0f00 	cmp.w	fp, #0
 800d992:	dd30      	ble.n	800d9f6 <_dtoa_r+0x3b6>
 800d994:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d998:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d99c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9a0:	f108 31ff 	add.w	r1, r8, #4294967295
 800d9a4:	9105      	str	r1, [sp, #20]
 800d9a6:	3201      	adds	r2, #1
 800d9a8:	465c      	mov	r4, fp
 800d9aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d9ae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d9b2:	ee07 2a90 	vmov	s15, r2
 800d9b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d9ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d9be:	ee15 2a90 	vmov	r2, s11
 800d9c2:	ec51 0b15 	vmov	r0, r1, d5
 800d9c6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d9ca:	2c00      	cmp	r4, #0
 800d9cc:	f040 808a 	bne.w	800dae4 <_dtoa_r+0x4a4>
 800d9d0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d9d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d9d8:	ec41 0b17 	vmov	d7, r0, r1
 800d9dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e4:	f300 826a 	bgt.w	800debc <_dtoa_r+0x87c>
 800d9e8:	eeb1 7b47 	vneg.f64	d7, d7
 800d9ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f4:	d423      	bmi.n	800da3e <_dtoa_r+0x3fe>
 800d9f6:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d9fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d9fc:	2a00      	cmp	r2, #0
 800d9fe:	f2c0 8129 	blt.w	800dc54 <_dtoa_r+0x614>
 800da02:	f1b8 0f0e 	cmp.w	r8, #14
 800da06:	f300 8125 	bgt.w	800dc54 <_dtoa_r+0x614>
 800da0a:	4b90      	ldr	r3, [pc, #576]	@ (800dc4c <_dtoa_r+0x60c>)
 800da0c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800da10:	ed93 6b00 	vldr	d6, [r3]
 800da14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da16:	2b00      	cmp	r3, #0
 800da18:	f280 80c8 	bge.w	800dbac <_dtoa_r+0x56c>
 800da1c:	f1ba 0f00 	cmp.w	sl, #0
 800da20:	f300 80c4 	bgt.w	800dbac <_dtoa_r+0x56c>
 800da24:	d10b      	bne.n	800da3e <_dtoa_r+0x3fe>
 800da26:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800da2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800da2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3a:	f2c0 823c 	blt.w	800deb6 <_dtoa_r+0x876>
 800da3e:	2400      	movs	r4, #0
 800da40:	4625      	mov	r5, r4
 800da42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da44:	43db      	mvns	r3, r3
 800da46:	9305      	str	r3, [sp, #20]
 800da48:	463e      	mov	r6, r7
 800da4a:	f04f 0800 	mov.w	r8, #0
 800da4e:	4621      	mov	r1, r4
 800da50:	4648      	mov	r0, r9
 800da52:	f000 fbdd 	bl	800e210 <_Bfree>
 800da56:	2d00      	cmp	r5, #0
 800da58:	f000 80a2 	beq.w	800dba0 <_dtoa_r+0x560>
 800da5c:	f1b8 0f00 	cmp.w	r8, #0
 800da60:	d005      	beq.n	800da6e <_dtoa_r+0x42e>
 800da62:	45a8      	cmp	r8, r5
 800da64:	d003      	beq.n	800da6e <_dtoa_r+0x42e>
 800da66:	4641      	mov	r1, r8
 800da68:	4648      	mov	r0, r9
 800da6a:	f000 fbd1 	bl	800e210 <_Bfree>
 800da6e:	4629      	mov	r1, r5
 800da70:	4648      	mov	r0, r9
 800da72:	f000 fbcd 	bl	800e210 <_Bfree>
 800da76:	e093      	b.n	800dba0 <_dtoa_r+0x560>
 800da78:	2202      	movs	r2, #2
 800da7a:	e76c      	b.n	800d956 <_dtoa_r+0x316>
 800da7c:	07cc      	lsls	r4, r1, #31
 800da7e:	d504      	bpl.n	800da8a <_dtoa_r+0x44a>
 800da80:	ed90 6b00 	vldr	d6, [r0]
 800da84:	3201      	adds	r2, #1
 800da86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da8a:	1049      	asrs	r1, r1, #1
 800da8c:	3008      	adds	r0, #8
 800da8e:	e763      	b.n	800d958 <_dtoa_r+0x318>
 800da90:	d022      	beq.n	800dad8 <_dtoa_r+0x498>
 800da92:	f1c8 0100 	rsb	r1, r8, #0
 800da96:	4a6d      	ldr	r2, [pc, #436]	@ (800dc4c <_dtoa_r+0x60c>)
 800da98:	f001 000f 	and.w	r0, r1, #15
 800da9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800daa0:	ed92 7b00 	vldr	d7, [r2]
 800daa4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800daa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800daac:	4868      	ldr	r0, [pc, #416]	@ (800dc50 <_dtoa_r+0x610>)
 800daae:	1109      	asrs	r1, r1, #4
 800dab0:	2400      	movs	r4, #0
 800dab2:	2202      	movs	r2, #2
 800dab4:	b929      	cbnz	r1, 800dac2 <_dtoa_r+0x482>
 800dab6:	2c00      	cmp	r4, #0
 800dab8:	f43f af57 	beq.w	800d96a <_dtoa_r+0x32a>
 800dabc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dac0:	e753      	b.n	800d96a <_dtoa_r+0x32a>
 800dac2:	07ce      	lsls	r6, r1, #31
 800dac4:	d505      	bpl.n	800dad2 <_dtoa_r+0x492>
 800dac6:	ed90 6b00 	vldr	d6, [r0]
 800daca:	3201      	adds	r2, #1
 800dacc:	2401      	movs	r4, #1
 800dace:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dad2:	1049      	asrs	r1, r1, #1
 800dad4:	3008      	adds	r0, #8
 800dad6:	e7ed      	b.n	800dab4 <_dtoa_r+0x474>
 800dad8:	2202      	movs	r2, #2
 800dada:	e746      	b.n	800d96a <_dtoa_r+0x32a>
 800dadc:	f8cd 8014 	str.w	r8, [sp, #20]
 800dae0:	4654      	mov	r4, sl
 800dae2:	e762      	b.n	800d9aa <_dtoa_r+0x36a>
 800dae4:	4a59      	ldr	r2, [pc, #356]	@ (800dc4c <_dtoa_r+0x60c>)
 800dae6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800daea:	ed12 4b02 	vldr	d4, [r2, #-8]
 800daee:	9a08      	ldr	r2, [sp, #32]
 800daf0:	ec41 0b17 	vmov	d7, r0, r1
 800daf4:	443c      	add	r4, r7
 800daf6:	b34a      	cbz	r2, 800db4c <_dtoa_r+0x50c>
 800daf8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800dafc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800db00:	463e      	mov	r6, r7
 800db02:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800db06:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800db0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db12:	ee14 2a90 	vmov	r2, s9
 800db16:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db1a:	3230      	adds	r2, #48	@ 0x30
 800db1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db28:	f806 2b01 	strb.w	r2, [r6], #1
 800db2c:	d438      	bmi.n	800dba0 <_dtoa_r+0x560>
 800db2e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800db32:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800db36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3a:	d46e      	bmi.n	800dc1a <_dtoa_r+0x5da>
 800db3c:	42a6      	cmp	r6, r4
 800db3e:	f43f af5a 	beq.w	800d9f6 <_dtoa_r+0x3b6>
 800db42:	ee27 7b03 	vmul.f64	d7, d7, d3
 800db46:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db4a:	e7e0      	b.n	800db0e <_dtoa_r+0x4ce>
 800db4c:	4621      	mov	r1, r4
 800db4e:	463e      	mov	r6, r7
 800db50:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db54:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800db58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db5c:	ee14 2a90 	vmov	r2, s9
 800db60:	3230      	adds	r2, #48	@ 0x30
 800db62:	f806 2b01 	strb.w	r2, [r6], #1
 800db66:	42a6      	cmp	r6, r4
 800db68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db70:	d119      	bne.n	800dba6 <_dtoa_r+0x566>
 800db72:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800db76:	ee37 4b05 	vadd.f64	d4, d7, d5
 800db7a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800db7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db82:	dc4a      	bgt.n	800dc1a <_dtoa_r+0x5da>
 800db84:	ee35 5b47 	vsub.f64	d5, d5, d7
 800db88:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800db8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db90:	f57f af31 	bpl.w	800d9f6 <_dtoa_r+0x3b6>
 800db94:	460e      	mov	r6, r1
 800db96:	3901      	subs	r1, #1
 800db98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db9c:	2b30      	cmp	r3, #48	@ 0x30
 800db9e:	d0f9      	beq.n	800db94 <_dtoa_r+0x554>
 800dba0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dba4:	e027      	b.n	800dbf6 <_dtoa_r+0x5b6>
 800dba6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dbaa:	e7d5      	b.n	800db58 <_dtoa_r+0x518>
 800dbac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbb0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800dbb4:	463e      	mov	r6, r7
 800dbb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dbba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dbbe:	ee15 3a10 	vmov	r3, s10
 800dbc2:	3330      	adds	r3, #48	@ 0x30
 800dbc4:	f806 3b01 	strb.w	r3, [r6], #1
 800dbc8:	1bf3      	subs	r3, r6, r7
 800dbca:	459a      	cmp	sl, r3
 800dbcc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dbd0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dbd4:	d132      	bne.n	800dc3c <_dtoa_r+0x5fc>
 800dbd6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dbda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe2:	dc18      	bgt.n	800dc16 <_dtoa_r+0x5d6>
 800dbe4:	eeb4 7b46 	vcmp.f64	d7, d6
 800dbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbec:	d103      	bne.n	800dbf6 <_dtoa_r+0x5b6>
 800dbee:	ee15 3a10 	vmov	r3, s10
 800dbf2:	07db      	lsls	r3, r3, #31
 800dbf4:	d40f      	bmi.n	800dc16 <_dtoa_r+0x5d6>
 800dbf6:	9901      	ldr	r1, [sp, #4]
 800dbf8:	4648      	mov	r0, r9
 800dbfa:	f000 fb09 	bl	800e210 <_Bfree>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc02:	7033      	strb	r3, [r6, #0]
 800dc04:	f108 0301 	add.w	r3, r8, #1
 800dc08:	6013      	str	r3, [r2, #0]
 800dc0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f000 824b 	beq.w	800e0a8 <_dtoa_r+0xa68>
 800dc12:	601e      	str	r6, [r3, #0]
 800dc14:	e248      	b.n	800e0a8 <_dtoa_r+0xa68>
 800dc16:	f8cd 8014 	str.w	r8, [sp, #20]
 800dc1a:	4633      	mov	r3, r6
 800dc1c:	461e      	mov	r6, r3
 800dc1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc22:	2a39      	cmp	r2, #57	@ 0x39
 800dc24:	d106      	bne.n	800dc34 <_dtoa_r+0x5f4>
 800dc26:	429f      	cmp	r7, r3
 800dc28:	d1f8      	bne.n	800dc1c <_dtoa_r+0x5dc>
 800dc2a:	9a05      	ldr	r2, [sp, #20]
 800dc2c:	3201      	adds	r2, #1
 800dc2e:	9205      	str	r2, [sp, #20]
 800dc30:	2230      	movs	r2, #48	@ 0x30
 800dc32:	703a      	strb	r2, [r7, #0]
 800dc34:	781a      	ldrb	r2, [r3, #0]
 800dc36:	3201      	adds	r2, #1
 800dc38:	701a      	strb	r2, [r3, #0]
 800dc3a:	e7b1      	b.n	800dba0 <_dtoa_r+0x560>
 800dc3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc48:	d1b5      	bne.n	800dbb6 <_dtoa_r+0x576>
 800dc4a:	e7d4      	b.n	800dbf6 <_dtoa_r+0x5b6>
 800dc4c:	0800f800 	.word	0x0800f800
 800dc50:	0800f7d8 	.word	0x0800f7d8
 800dc54:	9908      	ldr	r1, [sp, #32]
 800dc56:	2900      	cmp	r1, #0
 800dc58:	f000 80e9 	beq.w	800de2e <_dtoa_r+0x7ee>
 800dc5c:	9907      	ldr	r1, [sp, #28]
 800dc5e:	2901      	cmp	r1, #1
 800dc60:	f300 80cb 	bgt.w	800ddfa <_dtoa_r+0x7ba>
 800dc64:	2d00      	cmp	r5, #0
 800dc66:	f000 80c4 	beq.w	800ddf2 <_dtoa_r+0x7b2>
 800dc6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dc6e:	9e04      	ldr	r6, [sp, #16]
 800dc70:	461c      	mov	r4, r3
 800dc72:	9305      	str	r3, [sp, #20]
 800dc74:	9b04      	ldr	r3, [sp, #16]
 800dc76:	4413      	add	r3, r2
 800dc78:	9304      	str	r3, [sp, #16]
 800dc7a:	9b06      	ldr	r3, [sp, #24]
 800dc7c:	2101      	movs	r1, #1
 800dc7e:	4413      	add	r3, r2
 800dc80:	4648      	mov	r0, r9
 800dc82:	9306      	str	r3, [sp, #24]
 800dc84:	f000 fb78 	bl	800e378 <__i2b>
 800dc88:	9b05      	ldr	r3, [sp, #20]
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	b166      	cbz	r6, 800dca8 <_dtoa_r+0x668>
 800dc8e:	9a06      	ldr	r2, [sp, #24]
 800dc90:	2a00      	cmp	r2, #0
 800dc92:	dd09      	ble.n	800dca8 <_dtoa_r+0x668>
 800dc94:	42b2      	cmp	r2, r6
 800dc96:	9904      	ldr	r1, [sp, #16]
 800dc98:	bfa8      	it	ge
 800dc9a:	4632      	movge	r2, r6
 800dc9c:	1a89      	subs	r1, r1, r2
 800dc9e:	9104      	str	r1, [sp, #16]
 800dca0:	9906      	ldr	r1, [sp, #24]
 800dca2:	1ab6      	subs	r6, r6, r2
 800dca4:	1a8a      	subs	r2, r1, r2
 800dca6:	9206      	str	r2, [sp, #24]
 800dca8:	b30b      	cbz	r3, 800dcee <_dtoa_r+0x6ae>
 800dcaa:	9a08      	ldr	r2, [sp, #32]
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	f000 80c5 	beq.w	800de3c <_dtoa_r+0x7fc>
 800dcb2:	2c00      	cmp	r4, #0
 800dcb4:	f000 80bf 	beq.w	800de36 <_dtoa_r+0x7f6>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4622      	mov	r2, r4
 800dcbc:	4648      	mov	r0, r9
 800dcbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcc0:	f000 fc12 	bl	800e4e8 <__pow5mult>
 800dcc4:	9a01      	ldr	r2, [sp, #4]
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	4605      	mov	r5, r0
 800dcca:	4648      	mov	r0, r9
 800dccc:	f000 fb6a 	bl	800e3a4 <__multiply>
 800dcd0:	9901      	ldr	r1, [sp, #4]
 800dcd2:	9005      	str	r0, [sp, #20]
 800dcd4:	4648      	mov	r0, r9
 800dcd6:	f000 fa9b 	bl	800e210 <_Bfree>
 800dcda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcdc:	1b1b      	subs	r3, r3, r4
 800dcde:	f000 80b0 	beq.w	800de42 <_dtoa_r+0x802>
 800dce2:	9905      	ldr	r1, [sp, #20]
 800dce4:	461a      	mov	r2, r3
 800dce6:	4648      	mov	r0, r9
 800dce8:	f000 fbfe 	bl	800e4e8 <__pow5mult>
 800dcec:	9001      	str	r0, [sp, #4]
 800dcee:	2101      	movs	r1, #1
 800dcf0:	4648      	mov	r0, r9
 800dcf2:	f000 fb41 	bl	800e378 <__i2b>
 800dcf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 81da 	beq.w	800e0b4 <_dtoa_r+0xa74>
 800dd00:	461a      	mov	r2, r3
 800dd02:	4601      	mov	r1, r0
 800dd04:	4648      	mov	r0, r9
 800dd06:	f000 fbef 	bl	800e4e8 <__pow5mult>
 800dd0a:	9b07      	ldr	r3, [sp, #28]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	4604      	mov	r4, r0
 800dd10:	f300 80a0 	bgt.w	800de54 <_dtoa_r+0x814>
 800dd14:	9b02      	ldr	r3, [sp, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f040 8096 	bne.w	800de48 <_dtoa_r+0x808>
 800dd1c:	9b03      	ldr	r3, [sp, #12]
 800dd1e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dd22:	2a00      	cmp	r2, #0
 800dd24:	f040 8092 	bne.w	800de4c <_dtoa_r+0x80c>
 800dd28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dd2c:	0d12      	lsrs	r2, r2, #20
 800dd2e:	0512      	lsls	r2, r2, #20
 800dd30:	2a00      	cmp	r2, #0
 800dd32:	f000 808d 	beq.w	800de50 <_dtoa_r+0x810>
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	9304      	str	r3, [sp, #16]
 800dd3c:	9b06      	ldr	r3, [sp, #24]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	9306      	str	r3, [sp, #24]
 800dd42:	2301      	movs	r3, #1
 800dd44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 81b9 	beq.w	800e0c0 <_dtoa_r+0xa80>
 800dd4e:	6922      	ldr	r2, [r4, #16]
 800dd50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dd54:	6910      	ldr	r0, [r2, #16]
 800dd56:	f000 fac3 	bl	800e2e0 <__hi0bits>
 800dd5a:	f1c0 0020 	rsb	r0, r0, #32
 800dd5e:	9b06      	ldr	r3, [sp, #24]
 800dd60:	4418      	add	r0, r3
 800dd62:	f010 001f 	ands.w	r0, r0, #31
 800dd66:	f000 8081 	beq.w	800de6c <_dtoa_r+0x82c>
 800dd6a:	f1c0 0220 	rsb	r2, r0, #32
 800dd6e:	2a04      	cmp	r2, #4
 800dd70:	dd73      	ble.n	800de5a <_dtoa_r+0x81a>
 800dd72:	9b04      	ldr	r3, [sp, #16]
 800dd74:	f1c0 001c 	rsb	r0, r0, #28
 800dd78:	4403      	add	r3, r0
 800dd7a:	9304      	str	r3, [sp, #16]
 800dd7c:	9b06      	ldr	r3, [sp, #24]
 800dd7e:	4406      	add	r6, r0
 800dd80:	4403      	add	r3, r0
 800dd82:	9306      	str	r3, [sp, #24]
 800dd84:	9b04      	ldr	r3, [sp, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	dd05      	ble.n	800dd96 <_dtoa_r+0x756>
 800dd8a:	9901      	ldr	r1, [sp, #4]
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	4648      	mov	r0, r9
 800dd90:	f000 fc04 	bl	800e59c <__lshift>
 800dd94:	9001      	str	r0, [sp, #4]
 800dd96:	9b06      	ldr	r3, [sp, #24]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	dd05      	ble.n	800dda8 <_dtoa_r+0x768>
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	461a      	mov	r2, r3
 800dda0:	4648      	mov	r0, r9
 800dda2:	f000 fbfb 	bl	800e59c <__lshift>
 800dda6:	4604      	mov	r4, r0
 800dda8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d060      	beq.n	800de70 <_dtoa_r+0x830>
 800ddae:	9801      	ldr	r0, [sp, #4]
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	f000 fc5f 	bl	800e674 <__mcmp>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	da5a      	bge.n	800de70 <_dtoa_r+0x830>
 800ddba:	f108 33ff 	add.w	r3, r8, #4294967295
 800ddbe:	9305      	str	r3, [sp, #20]
 800ddc0:	9901      	ldr	r1, [sp, #4]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	220a      	movs	r2, #10
 800ddc6:	4648      	mov	r0, r9
 800ddc8:	f000 fa44 	bl	800e254 <__multadd>
 800ddcc:	9b08      	ldr	r3, [sp, #32]
 800ddce:	9001      	str	r0, [sp, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 8177 	beq.w	800e0c4 <_dtoa_r+0xa84>
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	2300      	movs	r3, #0
 800ddda:	220a      	movs	r2, #10
 800dddc:	4648      	mov	r0, r9
 800ddde:	f000 fa39 	bl	800e254 <__multadd>
 800dde2:	f1bb 0f00 	cmp.w	fp, #0
 800dde6:	4605      	mov	r5, r0
 800dde8:	dc6e      	bgt.n	800dec8 <_dtoa_r+0x888>
 800ddea:	9b07      	ldr	r3, [sp, #28]
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	dc48      	bgt.n	800de82 <_dtoa_r+0x842>
 800ddf0:	e06a      	b.n	800dec8 <_dtoa_r+0x888>
 800ddf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddf4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ddf8:	e739      	b.n	800dc6e <_dtoa_r+0x62e>
 800ddfa:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ddfe:	42a3      	cmp	r3, r4
 800de00:	db07      	blt.n	800de12 <_dtoa_r+0x7d2>
 800de02:	f1ba 0f00 	cmp.w	sl, #0
 800de06:	eba3 0404 	sub.w	r4, r3, r4
 800de0a:	db0b      	blt.n	800de24 <_dtoa_r+0x7e4>
 800de0c:	9e04      	ldr	r6, [sp, #16]
 800de0e:	4652      	mov	r2, sl
 800de10:	e72f      	b.n	800dc72 <_dtoa_r+0x632>
 800de12:	1ae2      	subs	r2, r4, r3
 800de14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de16:	9e04      	ldr	r6, [sp, #16]
 800de18:	4413      	add	r3, r2
 800de1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800de1c:	4652      	mov	r2, sl
 800de1e:	4623      	mov	r3, r4
 800de20:	2400      	movs	r4, #0
 800de22:	e726      	b.n	800dc72 <_dtoa_r+0x632>
 800de24:	9a04      	ldr	r2, [sp, #16]
 800de26:	eba2 060a 	sub.w	r6, r2, sl
 800de2a:	2200      	movs	r2, #0
 800de2c:	e721      	b.n	800dc72 <_dtoa_r+0x632>
 800de2e:	9e04      	ldr	r6, [sp, #16]
 800de30:	9d08      	ldr	r5, [sp, #32]
 800de32:	461c      	mov	r4, r3
 800de34:	e72a      	b.n	800dc8c <_dtoa_r+0x64c>
 800de36:	9a01      	ldr	r2, [sp, #4]
 800de38:	9205      	str	r2, [sp, #20]
 800de3a:	e752      	b.n	800dce2 <_dtoa_r+0x6a2>
 800de3c:	9901      	ldr	r1, [sp, #4]
 800de3e:	461a      	mov	r2, r3
 800de40:	e751      	b.n	800dce6 <_dtoa_r+0x6a6>
 800de42:	9b05      	ldr	r3, [sp, #20]
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	e752      	b.n	800dcee <_dtoa_r+0x6ae>
 800de48:	2300      	movs	r3, #0
 800de4a:	e77b      	b.n	800dd44 <_dtoa_r+0x704>
 800de4c:	9b02      	ldr	r3, [sp, #8]
 800de4e:	e779      	b.n	800dd44 <_dtoa_r+0x704>
 800de50:	920b      	str	r2, [sp, #44]	@ 0x2c
 800de52:	e778      	b.n	800dd46 <_dtoa_r+0x706>
 800de54:	2300      	movs	r3, #0
 800de56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de58:	e779      	b.n	800dd4e <_dtoa_r+0x70e>
 800de5a:	d093      	beq.n	800dd84 <_dtoa_r+0x744>
 800de5c:	9b04      	ldr	r3, [sp, #16]
 800de5e:	321c      	adds	r2, #28
 800de60:	4413      	add	r3, r2
 800de62:	9304      	str	r3, [sp, #16]
 800de64:	9b06      	ldr	r3, [sp, #24]
 800de66:	4416      	add	r6, r2
 800de68:	4413      	add	r3, r2
 800de6a:	e78a      	b.n	800dd82 <_dtoa_r+0x742>
 800de6c:	4602      	mov	r2, r0
 800de6e:	e7f5      	b.n	800de5c <_dtoa_r+0x81c>
 800de70:	f1ba 0f00 	cmp.w	sl, #0
 800de74:	f8cd 8014 	str.w	r8, [sp, #20]
 800de78:	46d3      	mov	fp, sl
 800de7a:	dc21      	bgt.n	800dec0 <_dtoa_r+0x880>
 800de7c:	9b07      	ldr	r3, [sp, #28]
 800de7e:	2b02      	cmp	r3, #2
 800de80:	dd1e      	ble.n	800dec0 <_dtoa_r+0x880>
 800de82:	f1bb 0f00 	cmp.w	fp, #0
 800de86:	f47f addc 	bne.w	800da42 <_dtoa_r+0x402>
 800de8a:	4621      	mov	r1, r4
 800de8c:	465b      	mov	r3, fp
 800de8e:	2205      	movs	r2, #5
 800de90:	4648      	mov	r0, r9
 800de92:	f000 f9df 	bl	800e254 <__multadd>
 800de96:	4601      	mov	r1, r0
 800de98:	4604      	mov	r4, r0
 800de9a:	9801      	ldr	r0, [sp, #4]
 800de9c:	f000 fbea 	bl	800e674 <__mcmp>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f77f adce 	ble.w	800da42 <_dtoa_r+0x402>
 800dea6:	463e      	mov	r6, r7
 800dea8:	2331      	movs	r3, #49	@ 0x31
 800deaa:	f806 3b01 	strb.w	r3, [r6], #1
 800deae:	9b05      	ldr	r3, [sp, #20]
 800deb0:	3301      	adds	r3, #1
 800deb2:	9305      	str	r3, [sp, #20]
 800deb4:	e5c9      	b.n	800da4a <_dtoa_r+0x40a>
 800deb6:	f8cd 8014 	str.w	r8, [sp, #20]
 800deba:	4654      	mov	r4, sl
 800debc:	4625      	mov	r5, r4
 800debe:	e7f2      	b.n	800dea6 <_dtoa_r+0x866>
 800dec0:	9b08      	ldr	r3, [sp, #32]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f000 8102 	beq.w	800e0cc <_dtoa_r+0xa8c>
 800dec8:	2e00      	cmp	r6, #0
 800deca:	dd05      	ble.n	800ded8 <_dtoa_r+0x898>
 800decc:	4629      	mov	r1, r5
 800dece:	4632      	mov	r2, r6
 800ded0:	4648      	mov	r0, r9
 800ded2:	f000 fb63 	bl	800e59c <__lshift>
 800ded6:	4605      	mov	r5, r0
 800ded8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d058      	beq.n	800df90 <_dtoa_r+0x950>
 800dede:	6869      	ldr	r1, [r5, #4]
 800dee0:	4648      	mov	r0, r9
 800dee2:	f000 f955 	bl	800e190 <_Balloc>
 800dee6:	4606      	mov	r6, r0
 800dee8:	b928      	cbnz	r0, 800def6 <_dtoa_r+0x8b6>
 800deea:	4b82      	ldr	r3, [pc, #520]	@ (800e0f4 <_dtoa_r+0xab4>)
 800deec:	4602      	mov	r2, r0
 800deee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800def2:	f7ff bbbe 	b.w	800d672 <_dtoa_r+0x32>
 800def6:	692a      	ldr	r2, [r5, #16]
 800def8:	3202      	adds	r2, #2
 800defa:	0092      	lsls	r2, r2, #2
 800defc:	f105 010c 	add.w	r1, r5, #12
 800df00:	300c      	adds	r0, #12
 800df02:	f7ff fb06 	bl	800d512 <memcpy>
 800df06:	2201      	movs	r2, #1
 800df08:	4631      	mov	r1, r6
 800df0a:	4648      	mov	r0, r9
 800df0c:	f000 fb46 	bl	800e59c <__lshift>
 800df10:	1c7b      	adds	r3, r7, #1
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	eb07 030b 	add.w	r3, r7, fp
 800df18:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1a:	9b02      	ldr	r3, [sp, #8]
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	46a8      	mov	r8, r5
 800df22:	9308      	str	r3, [sp, #32]
 800df24:	4605      	mov	r5, r0
 800df26:	9b04      	ldr	r3, [sp, #16]
 800df28:	9801      	ldr	r0, [sp, #4]
 800df2a:	4621      	mov	r1, r4
 800df2c:	f103 3bff 	add.w	fp, r3, #4294967295
 800df30:	f7ff fafd 	bl	800d52e <quorem>
 800df34:	4641      	mov	r1, r8
 800df36:	9002      	str	r0, [sp, #8]
 800df38:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800df3c:	9801      	ldr	r0, [sp, #4]
 800df3e:	f000 fb99 	bl	800e674 <__mcmp>
 800df42:	462a      	mov	r2, r5
 800df44:	9006      	str	r0, [sp, #24]
 800df46:	4621      	mov	r1, r4
 800df48:	4648      	mov	r0, r9
 800df4a:	f000 fbaf 	bl	800e6ac <__mdiff>
 800df4e:	68c2      	ldr	r2, [r0, #12]
 800df50:	4606      	mov	r6, r0
 800df52:	b9fa      	cbnz	r2, 800df94 <_dtoa_r+0x954>
 800df54:	4601      	mov	r1, r0
 800df56:	9801      	ldr	r0, [sp, #4]
 800df58:	f000 fb8c 	bl	800e674 <__mcmp>
 800df5c:	4602      	mov	r2, r0
 800df5e:	4631      	mov	r1, r6
 800df60:	4648      	mov	r0, r9
 800df62:	920a      	str	r2, [sp, #40]	@ 0x28
 800df64:	f000 f954 	bl	800e210 <_Bfree>
 800df68:	9b07      	ldr	r3, [sp, #28]
 800df6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df6c:	9e04      	ldr	r6, [sp, #16]
 800df6e:	ea42 0103 	orr.w	r1, r2, r3
 800df72:	9b08      	ldr	r3, [sp, #32]
 800df74:	4319      	orrs	r1, r3
 800df76:	d10f      	bne.n	800df98 <_dtoa_r+0x958>
 800df78:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800df7c:	d028      	beq.n	800dfd0 <_dtoa_r+0x990>
 800df7e:	9b06      	ldr	r3, [sp, #24]
 800df80:	2b00      	cmp	r3, #0
 800df82:	dd02      	ble.n	800df8a <_dtoa_r+0x94a>
 800df84:	9b02      	ldr	r3, [sp, #8]
 800df86:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800df8a:	f88b a000 	strb.w	sl, [fp]
 800df8e:	e55e      	b.n	800da4e <_dtoa_r+0x40e>
 800df90:	4628      	mov	r0, r5
 800df92:	e7bd      	b.n	800df10 <_dtoa_r+0x8d0>
 800df94:	2201      	movs	r2, #1
 800df96:	e7e2      	b.n	800df5e <_dtoa_r+0x91e>
 800df98:	9b06      	ldr	r3, [sp, #24]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	db04      	blt.n	800dfa8 <_dtoa_r+0x968>
 800df9e:	9907      	ldr	r1, [sp, #28]
 800dfa0:	430b      	orrs	r3, r1
 800dfa2:	9908      	ldr	r1, [sp, #32]
 800dfa4:	430b      	orrs	r3, r1
 800dfa6:	d120      	bne.n	800dfea <_dtoa_r+0x9aa>
 800dfa8:	2a00      	cmp	r2, #0
 800dfaa:	ddee      	ble.n	800df8a <_dtoa_r+0x94a>
 800dfac:	9901      	ldr	r1, [sp, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	4648      	mov	r0, r9
 800dfb2:	f000 faf3 	bl	800e59c <__lshift>
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	9001      	str	r0, [sp, #4]
 800dfba:	f000 fb5b 	bl	800e674 <__mcmp>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	dc03      	bgt.n	800dfca <_dtoa_r+0x98a>
 800dfc2:	d1e2      	bne.n	800df8a <_dtoa_r+0x94a>
 800dfc4:	f01a 0f01 	tst.w	sl, #1
 800dfc8:	d0df      	beq.n	800df8a <_dtoa_r+0x94a>
 800dfca:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dfce:	d1d9      	bne.n	800df84 <_dtoa_r+0x944>
 800dfd0:	2339      	movs	r3, #57	@ 0x39
 800dfd2:	f88b 3000 	strb.w	r3, [fp]
 800dfd6:	4633      	mov	r3, r6
 800dfd8:	461e      	mov	r6, r3
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dfe0:	2a39      	cmp	r2, #57	@ 0x39
 800dfe2:	d052      	beq.n	800e08a <_dtoa_r+0xa4a>
 800dfe4:	3201      	adds	r2, #1
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	e531      	b.n	800da4e <_dtoa_r+0x40e>
 800dfea:	2a00      	cmp	r2, #0
 800dfec:	dd07      	ble.n	800dffe <_dtoa_r+0x9be>
 800dfee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dff2:	d0ed      	beq.n	800dfd0 <_dtoa_r+0x990>
 800dff4:	f10a 0301 	add.w	r3, sl, #1
 800dff8:	f88b 3000 	strb.w	r3, [fp]
 800dffc:	e527      	b.n	800da4e <_dtoa_r+0x40e>
 800dffe:	9b04      	ldr	r3, [sp, #16]
 800e000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e002:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e006:	4293      	cmp	r3, r2
 800e008:	d029      	beq.n	800e05e <_dtoa_r+0xa1e>
 800e00a:	9901      	ldr	r1, [sp, #4]
 800e00c:	2300      	movs	r3, #0
 800e00e:	220a      	movs	r2, #10
 800e010:	4648      	mov	r0, r9
 800e012:	f000 f91f 	bl	800e254 <__multadd>
 800e016:	45a8      	cmp	r8, r5
 800e018:	9001      	str	r0, [sp, #4]
 800e01a:	f04f 0300 	mov.w	r3, #0
 800e01e:	f04f 020a 	mov.w	r2, #10
 800e022:	4641      	mov	r1, r8
 800e024:	4648      	mov	r0, r9
 800e026:	d107      	bne.n	800e038 <_dtoa_r+0x9f8>
 800e028:	f000 f914 	bl	800e254 <__multadd>
 800e02c:	4680      	mov	r8, r0
 800e02e:	4605      	mov	r5, r0
 800e030:	9b04      	ldr	r3, [sp, #16]
 800e032:	3301      	adds	r3, #1
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	e776      	b.n	800df26 <_dtoa_r+0x8e6>
 800e038:	f000 f90c 	bl	800e254 <__multadd>
 800e03c:	4629      	mov	r1, r5
 800e03e:	4680      	mov	r8, r0
 800e040:	2300      	movs	r3, #0
 800e042:	220a      	movs	r2, #10
 800e044:	4648      	mov	r0, r9
 800e046:	f000 f905 	bl	800e254 <__multadd>
 800e04a:	4605      	mov	r5, r0
 800e04c:	e7f0      	b.n	800e030 <_dtoa_r+0x9f0>
 800e04e:	f1bb 0f00 	cmp.w	fp, #0
 800e052:	bfcc      	ite	gt
 800e054:	465e      	movgt	r6, fp
 800e056:	2601      	movle	r6, #1
 800e058:	443e      	add	r6, r7
 800e05a:	f04f 0800 	mov.w	r8, #0
 800e05e:	9901      	ldr	r1, [sp, #4]
 800e060:	2201      	movs	r2, #1
 800e062:	4648      	mov	r0, r9
 800e064:	f000 fa9a 	bl	800e59c <__lshift>
 800e068:	4621      	mov	r1, r4
 800e06a:	9001      	str	r0, [sp, #4]
 800e06c:	f000 fb02 	bl	800e674 <__mcmp>
 800e070:	2800      	cmp	r0, #0
 800e072:	dcb0      	bgt.n	800dfd6 <_dtoa_r+0x996>
 800e074:	d102      	bne.n	800e07c <_dtoa_r+0xa3c>
 800e076:	f01a 0f01 	tst.w	sl, #1
 800e07a:	d1ac      	bne.n	800dfd6 <_dtoa_r+0x996>
 800e07c:	4633      	mov	r3, r6
 800e07e:	461e      	mov	r6, r3
 800e080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e084:	2a30      	cmp	r2, #48	@ 0x30
 800e086:	d0fa      	beq.n	800e07e <_dtoa_r+0xa3e>
 800e088:	e4e1      	b.n	800da4e <_dtoa_r+0x40e>
 800e08a:	429f      	cmp	r7, r3
 800e08c:	d1a4      	bne.n	800dfd8 <_dtoa_r+0x998>
 800e08e:	9b05      	ldr	r3, [sp, #20]
 800e090:	3301      	adds	r3, #1
 800e092:	9305      	str	r3, [sp, #20]
 800e094:	2331      	movs	r3, #49	@ 0x31
 800e096:	703b      	strb	r3, [r7, #0]
 800e098:	e4d9      	b.n	800da4e <_dtoa_r+0x40e>
 800e09a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e09c:	4f16      	ldr	r7, [pc, #88]	@ (800e0f8 <_dtoa_r+0xab8>)
 800e09e:	b11b      	cbz	r3, 800e0a8 <_dtoa_r+0xa68>
 800e0a0:	f107 0308 	add.w	r3, r7, #8
 800e0a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	b011      	add	sp, #68	@ 0x44
 800e0ac:	ecbd 8b02 	vpop	{d8}
 800e0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b4:	9b07      	ldr	r3, [sp, #28]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	f77f ae2c 	ble.w	800dd14 <_dtoa_r+0x6d4>
 800e0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	e64c      	b.n	800dd5e <_dtoa_r+0x71e>
 800e0c4:	f1bb 0f00 	cmp.w	fp, #0
 800e0c8:	f77f aed8 	ble.w	800de7c <_dtoa_r+0x83c>
 800e0cc:	463e      	mov	r6, r7
 800e0ce:	9801      	ldr	r0, [sp, #4]
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	f7ff fa2c 	bl	800d52e <quorem>
 800e0d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e0da:	f806 ab01 	strb.w	sl, [r6], #1
 800e0de:	1bf2      	subs	r2, r6, r7
 800e0e0:	4593      	cmp	fp, r2
 800e0e2:	ddb4      	ble.n	800e04e <_dtoa_r+0xa0e>
 800e0e4:	9901      	ldr	r1, [sp, #4]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	220a      	movs	r2, #10
 800e0ea:	4648      	mov	r0, r9
 800e0ec:	f000 f8b2 	bl	800e254 <__multadd>
 800e0f0:	9001      	str	r0, [sp, #4]
 800e0f2:	e7ec      	b.n	800e0ce <_dtoa_r+0xa8e>
 800e0f4:	0800f708 	.word	0x0800f708
 800e0f8:	0800f68c 	.word	0x0800f68c

0800e0fc <_free_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4605      	mov	r5, r0
 800e100:	2900      	cmp	r1, #0
 800e102:	d041      	beq.n	800e188 <_free_r+0x8c>
 800e104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e108:	1f0c      	subs	r4, r1, #4
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bfb8      	it	lt
 800e10e:	18e4      	addlt	r4, r4, r3
 800e110:	f7fe fbf2 	bl	800c8f8 <__malloc_lock>
 800e114:	4a1d      	ldr	r2, [pc, #116]	@ (800e18c <_free_r+0x90>)
 800e116:	6813      	ldr	r3, [r2, #0]
 800e118:	b933      	cbnz	r3, 800e128 <_free_r+0x2c>
 800e11a:	6063      	str	r3, [r4, #4]
 800e11c:	6014      	str	r4, [r2, #0]
 800e11e:	4628      	mov	r0, r5
 800e120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e124:	f7fe bbee 	b.w	800c904 <__malloc_unlock>
 800e128:	42a3      	cmp	r3, r4
 800e12a:	d908      	bls.n	800e13e <_free_r+0x42>
 800e12c:	6820      	ldr	r0, [r4, #0]
 800e12e:	1821      	adds	r1, r4, r0
 800e130:	428b      	cmp	r3, r1
 800e132:	bf01      	itttt	eq
 800e134:	6819      	ldreq	r1, [r3, #0]
 800e136:	685b      	ldreq	r3, [r3, #4]
 800e138:	1809      	addeq	r1, r1, r0
 800e13a:	6021      	streq	r1, [r4, #0]
 800e13c:	e7ed      	b.n	800e11a <_free_r+0x1e>
 800e13e:	461a      	mov	r2, r3
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	b10b      	cbz	r3, 800e148 <_free_r+0x4c>
 800e144:	42a3      	cmp	r3, r4
 800e146:	d9fa      	bls.n	800e13e <_free_r+0x42>
 800e148:	6811      	ldr	r1, [r2, #0]
 800e14a:	1850      	adds	r0, r2, r1
 800e14c:	42a0      	cmp	r0, r4
 800e14e:	d10b      	bne.n	800e168 <_free_r+0x6c>
 800e150:	6820      	ldr	r0, [r4, #0]
 800e152:	4401      	add	r1, r0
 800e154:	1850      	adds	r0, r2, r1
 800e156:	4283      	cmp	r3, r0
 800e158:	6011      	str	r1, [r2, #0]
 800e15a:	d1e0      	bne.n	800e11e <_free_r+0x22>
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	6053      	str	r3, [r2, #4]
 800e162:	4408      	add	r0, r1
 800e164:	6010      	str	r0, [r2, #0]
 800e166:	e7da      	b.n	800e11e <_free_r+0x22>
 800e168:	d902      	bls.n	800e170 <_free_r+0x74>
 800e16a:	230c      	movs	r3, #12
 800e16c:	602b      	str	r3, [r5, #0]
 800e16e:	e7d6      	b.n	800e11e <_free_r+0x22>
 800e170:	6820      	ldr	r0, [r4, #0]
 800e172:	1821      	adds	r1, r4, r0
 800e174:	428b      	cmp	r3, r1
 800e176:	bf04      	itt	eq
 800e178:	6819      	ldreq	r1, [r3, #0]
 800e17a:	685b      	ldreq	r3, [r3, #4]
 800e17c:	6063      	str	r3, [r4, #4]
 800e17e:	bf04      	itt	eq
 800e180:	1809      	addeq	r1, r1, r0
 800e182:	6021      	streq	r1, [r4, #0]
 800e184:	6054      	str	r4, [r2, #4]
 800e186:	e7ca      	b.n	800e11e <_free_r+0x22>
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	bf00      	nop
 800e18c:	24000cc4 	.word	0x24000cc4

0800e190 <_Balloc>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	69c6      	ldr	r6, [r0, #28]
 800e194:	4604      	mov	r4, r0
 800e196:	460d      	mov	r5, r1
 800e198:	b976      	cbnz	r6, 800e1b8 <_Balloc+0x28>
 800e19a:	2010      	movs	r0, #16
 800e19c:	f7fe fb02 	bl	800c7a4 <malloc>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	61e0      	str	r0, [r4, #28]
 800e1a4:	b920      	cbnz	r0, 800e1b0 <_Balloc+0x20>
 800e1a6:	4b18      	ldr	r3, [pc, #96]	@ (800e208 <_Balloc+0x78>)
 800e1a8:	4818      	ldr	r0, [pc, #96]	@ (800e20c <_Balloc+0x7c>)
 800e1aa:	216b      	movs	r1, #107	@ 0x6b
 800e1ac:	f000 ff5e 	bl	800f06c <__assert_func>
 800e1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1b4:	6006      	str	r6, [r0, #0]
 800e1b6:	60c6      	str	r6, [r0, #12]
 800e1b8:	69e6      	ldr	r6, [r4, #28]
 800e1ba:	68f3      	ldr	r3, [r6, #12]
 800e1bc:	b183      	cbz	r3, 800e1e0 <_Balloc+0x50>
 800e1be:	69e3      	ldr	r3, [r4, #28]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1c6:	b9b8      	cbnz	r0, 800e1f8 <_Balloc+0x68>
 800e1c8:	2101      	movs	r1, #1
 800e1ca:	fa01 f605 	lsl.w	r6, r1, r5
 800e1ce:	1d72      	adds	r2, r6, #5
 800e1d0:	0092      	lsls	r2, r2, #2
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f000 ff68 	bl	800f0a8 <_calloc_r>
 800e1d8:	b160      	cbz	r0, 800e1f4 <_Balloc+0x64>
 800e1da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1de:	e00e      	b.n	800e1fe <_Balloc+0x6e>
 800e1e0:	2221      	movs	r2, #33	@ 0x21
 800e1e2:	2104      	movs	r1, #4
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f000 ff5f 	bl	800f0a8 <_calloc_r>
 800e1ea:	69e3      	ldr	r3, [r4, #28]
 800e1ec:	60f0      	str	r0, [r6, #12]
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1e4      	bne.n	800e1be <_Balloc+0x2e>
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}
 800e1f8:	6802      	ldr	r2, [r0, #0]
 800e1fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1fe:	2300      	movs	r3, #0
 800e200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e204:	e7f7      	b.n	800e1f6 <_Balloc+0x66>
 800e206:	bf00      	nop
 800e208:	0800f699 	.word	0x0800f699
 800e20c:	0800f719 	.word	0x0800f719

0800e210 <_Bfree>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	69c6      	ldr	r6, [r0, #28]
 800e214:	4605      	mov	r5, r0
 800e216:	460c      	mov	r4, r1
 800e218:	b976      	cbnz	r6, 800e238 <_Bfree+0x28>
 800e21a:	2010      	movs	r0, #16
 800e21c:	f7fe fac2 	bl	800c7a4 <malloc>
 800e220:	4602      	mov	r2, r0
 800e222:	61e8      	str	r0, [r5, #28]
 800e224:	b920      	cbnz	r0, 800e230 <_Bfree+0x20>
 800e226:	4b09      	ldr	r3, [pc, #36]	@ (800e24c <_Bfree+0x3c>)
 800e228:	4809      	ldr	r0, [pc, #36]	@ (800e250 <_Bfree+0x40>)
 800e22a:	218f      	movs	r1, #143	@ 0x8f
 800e22c:	f000 ff1e 	bl	800f06c <__assert_func>
 800e230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e234:	6006      	str	r6, [r0, #0]
 800e236:	60c6      	str	r6, [r0, #12]
 800e238:	b13c      	cbz	r4, 800e24a <_Bfree+0x3a>
 800e23a:	69eb      	ldr	r3, [r5, #28]
 800e23c:	6862      	ldr	r2, [r4, #4]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e244:	6021      	str	r1, [r4, #0]
 800e246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e24a:	bd70      	pop	{r4, r5, r6, pc}
 800e24c:	0800f699 	.word	0x0800f699
 800e250:	0800f719 	.word	0x0800f719

0800e254 <__multadd>:
 800e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e258:	690d      	ldr	r5, [r1, #16]
 800e25a:	4607      	mov	r7, r0
 800e25c:	460c      	mov	r4, r1
 800e25e:	461e      	mov	r6, r3
 800e260:	f101 0c14 	add.w	ip, r1, #20
 800e264:	2000      	movs	r0, #0
 800e266:	f8dc 3000 	ldr.w	r3, [ip]
 800e26a:	b299      	uxth	r1, r3
 800e26c:	fb02 6101 	mla	r1, r2, r1, r6
 800e270:	0c1e      	lsrs	r6, r3, #16
 800e272:	0c0b      	lsrs	r3, r1, #16
 800e274:	fb02 3306 	mla	r3, r2, r6, r3
 800e278:	b289      	uxth	r1, r1
 800e27a:	3001      	adds	r0, #1
 800e27c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e280:	4285      	cmp	r5, r0
 800e282:	f84c 1b04 	str.w	r1, [ip], #4
 800e286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e28a:	dcec      	bgt.n	800e266 <__multadd+0x12>
 800e28c:	b30e      	cbz	r6, 800e2d2 <__multadd+0x7e>
 800e28e:	68a3      	ldr	r3, [r4, #8]
 800e290:	42ab      	cmp	r3, r5
 800e292:	dc19      	bgt.n	800e2c8 <__multadd+0x74>
 800e294:	6861      	ldr	r1, [r4, #4]
 800e296:	4638      	mov	r0, r7
 800e298:	3101      	adds	r1, #1
 800e29a:	f7ff ff79 	bl	800e190 <_Balloc>
 800e29e:	4680      	mov	r8, r0
 800e2a0:	b928      	cbnz	r0, 800e2ae <__multadd+0x5a>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e2d8 <__multadd+0x84>)
 800e2a6:	480d      	ldr	r0, [pc, #52]	@ (800e2dc <__multadd+0x88>)
 800e2a8:	21ba      	movs	r1, #186	@ 0xba
 800e2aa:	f000 fedf 	bl	800f06c <__assert_func>
 800e2ae:	6922      	ldr	r2, [r4, #16]
 800e2b0:	3202      	adds	r2, #2
 800e2b2:	f104 010c 	add.w	r1, r4, #12
 800e2b6:	0092      	lsls	r2, r2, #2
 800e2b8:	300c      	adds	r0, #12
 800e2ba:	f7ff f92a 	bl	800d512 <memcpy>
 800e2be:	4621      	mov	r1, r4
 800e2c0:	4638      	mov	r0, r7
 800e2c2:	f7ff ffa5 	bl	800e210 <_Bfree>
 800e2c6:	4644      	mov	r4, r8
 800e2c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2cc:	3501      	adds	r5, #1
 800e2ce:	615e      	str	r6, [r3, #20]
 800e2d0:	6125      	str	r5, [r4, #16]
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d8:	0800f708 	.word	0x0800f708
 800e2dc:	0800f719 	.word	0x0800f719

0800e2e0 <__hi0bits>:
 800e2e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	bf36      	itet	cc
 800e2e8:	0403      	lslcc	r3, r0, #16
 800e2ea:	2000      	movcs	r0, #0
 800e2ec:	2010      	movcc	r0, #16
 800e2ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e2f2:	bf3c      	itt	cc
 800e2f4:	021b      	lslcc	r3, r3, #8
 800e2f6:	3008      	addcc	r0, #8
 800e2f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2fc:	bf3c      	itt	cc
 800e2fe:	011b      	lslcc	r3, r3, #4
 800e300:	3004      	addcc	r0, #4
 800e302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e306:	bf3c      	itt	cc
 800e308:	009b      	lslcc	r3, r3, #2
 800e30a:	3002      	addcc	r0, #2
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	db05      	blt.n	800e31c <__hi0bits+0x3c>
 800e310:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e314:	f100 0001 	add.w	r0, r0, #1
 800e318:	bf08      	it	eq
 800e31a:	2020      	moveq	r0, #32
 800e31c:	4770      	bx	lr

0800e31e <__lo0bits>:
 800e31e:	6803      	ldr	r3, [r0, #0]
 800e320:	4602      	mov	r2, r0
 800e322:	f013 0007 	ands.w	r0, r3, #7
 800e326:	d00b      	beq.n	800e340 <__lo0bits+0x22>
 800e328:	07d9      	lsls	r1, r3, #31
 800e32a:	d421      	bmi.n	800e370 <__lo0bits+0x52>
 800e32c:	0798      	lsls	r0, r3, #30
 800e32e:	bf49      	itett	mi
 800e330:	085b      	lsrmi	r3, r3, #1
 800e332:	089b      	lsrpl	r3, r3, #2
 800e334:	2001      	movmi	r0, #1
 800e336:	6013      	strmi	r3, [r2, #0]
 800e338:	bf5c      	itt	pl
 800e33a:	6013      	strpl	r3, [r2, #0]
 800e33c:	2002      	movpl	r0, #2
 800e33e:	4770      	bx	lr
 800e340:	b299      	uxth	r1, r3
 800e342:	b909      	cbnz	r1, 800e348 <__lo0bits+0x2a>
 800e344:	0c1b      	lsrs	r3, r3, #16
 800e346:	2010      	movs	r0, #16
 800e348:	b2d9      	uxtb	r1, r3
 800e34a:	b909      	cbnz	r1, 800e350 <__lo0bits+0x32>
 800e34c:	3008      	adds	r0, #8
 800e34e:	0a1b      	lsrs	r3, r3, #8
 800e350:	0719      	lsls	r1, r3, #28
 800e352:	bf04      	itt	eq
 800e354:	091b      	lsreq	r3, r3, #4
 800e356:	3004      	addeq	r0, #4
 800e358:	0799      	lsls	r1, r3, #30
 800e35a:	bf04      	itt	eq
 800e35c:	089b      	lsreq	r3, r3, #2
 800e35e:	3002      	addeq	r0, #2
 800e360:	07d9      	lsls	r1, r3, #31
 800e362:	d403      	bmi.n	800e36c <__lo0bits+0x4e>
 800e364:	085b      	lsrs	r3, r3, #1
 800e366:	f100 0001 	add.w	r0, r0, #1
 800e36a:	d003      	beq.n	800e374 <__lo0bits+0x56>
 800e36c:	6013      	str	r3, [r2, #0]
 800e36e:	4770      	bx	lr
 800e370:	2000      	movs	r0, #0
 800e372:	4770      	bx	lr
 800e374:	2020      	movs	r0, #32
 800e376:	4770      	bx	lr

0800e378 <__i2b>:
 800e378:	b510      	push	{r4, lr}
 800e37a:	460c      	mov	r4, r1
 800e37c:	2101      	movs	r1, #1
 800e37e:	f7ff ff07 	bl	800e190 <_Balloc>
 800e382:	4602      	mov	r2, r0
 800e384:	b928      	cbnz	r0, 800e392 <__i2b+0x1a>
 800e386:	4b05      	ldr	r3, [pc, #20]	@ (800e39c <__i2b+0x24>)
 800e388:	4805      	ldr	r0, [pc, #20]	@ (800e3a0 <__i2b+0x28>)
 800e38a:	f240 1145 	movw	r1, #325	@ 0x145
 800e38e:	f000 fe6d 	bl	800f06c <__assert_func>
 800e392:	2301      	movs	r3, #1
 800e394:	6144      	str	r4, [r0, #20]
 800e396:	6103      	str	r3, [r0, #16]
 800e398:	bd10      	pop	{r4, pc}
 800e39a:	bf00      	nop
 800e39c:	0800f708 	.word	0x0800f708
 800e3a0:	0800f719 	.word	0x0800f719

0800e3a4 <__multiply>:
 800e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	4617      	mov	r7, r2
 800e3aa:	690a      	ldr	r2, [r1, #16]
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	bfa8      	it	ge
 800e3b2:	463b      	movge	r3, r7
 800e3b4:	4689      	mov	r9, r1
 800e3b6:	bfa4      	itt	ge
 800e3b8:	460f      	movge	r7, r1
 800e3ba:	4699      	movge	r9, r3
 800e3bc:	693d      	ldr	r5, [r7, #16]
 800e3be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	6879      	ldr	r1, [r7, #4]
 800e3c6:	eb05 060a 	add.w	r6, r5, sl
 800e3ca:	42b3      	cmp	r3, r6
 800e3cc:	b085      	sub	sp, #20
 800e3ce:	bfb8      	it	lt
 800e3d0:	3101      	addlt	r1, #1
 800e3d2:	f7ff fedd 	bl	800e190 <_Balloc>
 800e3d6:	b930      	cbnz	r0, 800e3e6 <__multiply+0x42>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	4b41      	ldr	r3, [pc, #260]	@ (800e4e0 <__multiply+0x13c>)
 800e3dc:	4841      	ldr	r0, [pc, #260]	@ (800e4e4 <__multiply+0x140>)
 800e3de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e3e2:	f000 fe43 	bl	800f06c <__assert_func>
 800e3e6:	f100 0414 	add.w	r4, r0, #20
 800e3ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e3ee:	4623      	mov	r3, r4
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	4573      	cmp	r3, lr
 800e3f4:	d320      	bcc.n	800e438 <__multiply+0x94>
 800e3f6:	f107 0814 	add.w	r8, r7, #20
 800e3fa:	f109 0114 	add.w	r1, r9, #20
 800e3fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e402:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e406:	9302      	str	r3, [sp, #8]
 800e408:	1beb      	subs	r3, r5, r7
 800e40a:	3b15      	subs	r3, #21
 800e40c:	f023 0303 	bic.w	r3, r3, #3
 800e410:	3304      	adds	r3, #4
 800e412:	3715      	adds	r7, #21
 800e414:	42bd      	cmp	r5, r7
 800e416:	bf38      	it	cc
 800e418:	2304      	movcc	r3, #4
 800e41a:	9301      	str	r3, [sp, #4]
 800e41c:	9b02      	ldr	r3, [sp, #8]
 800e41e:	9103      	str	r1, [sp, #12]
 800e420:	428b      	cmp	r3, r1
 800e422:	d80c      	bhi.n	800e43e <__multiply+0x9a>
 800e424:	2e00      	cmp	r6, #0
 800e426:	dd03      	ble.n	800e430 <__multiply+0x8c>
 800e428:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d055      	beq.n	800e4dc <__multiply+0x138>
 800e430:	6106      	str	r6, [r0, #16]
 800e432:	b005      	add	sp, #20
 800e434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e438:	f843 2b04 	str.w	r2, [r3], #4
 800e43c:	e7d9      	b.n	800e3f2 <__multiply+0x4e>
 800e43e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e442:	f1ba 0f00 	cmp.w	sl, #0
 800e446:	d01f      	beq.n	800e488 <__multiply+0xe4>
 800e448:	46c4      	mov	ip, r8
 800e44a:	46a1      	mov	r9, r4
 800e44c:	2700      	movs	r7, #0
 800e44e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e452:	f8d9 3000 	ldr.w	r3, [r9]
 800e456:	fa1f fb82 	uxth.w	fp, r2
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e460:	443b      	add	r3, r7
 800e462:	f8d9 7000 	ldr.w	r7, [r9]
 800e466:	0c12      	lsrs	r2, r2, #16
 800e468:	0c3f      	lsrs	r7, r7, #16
 800e46a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e46e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e472:	b29b      	uxth	r3, r3
 800e474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e478:	4565      	cmp	r5, ip
 800e47a:	f849 3b04 	str.w	r3, [r9], #4
 800e47e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e482:	d8e4      	bhi.n	800e44e <__multiply+0xaa>
 800e484:	9b01      	ldr	r3, [sp, #4]
 800e486:	50e7      	str	r7, [r4, r3]
 800e488:	9b03      	ldr	r3, [sp, #12]
 800e48a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e48e:	3104      	adds	r1, #4
 800e490:	f1b9 0f00 	cmp.w	r9, #0
 800e494:	d020      	beq.n	800e4d8 <__multiply+0x134>
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	4647      	mov	r7, r8
 800e49a:	46a4      	mov	ip, r4
 800e49c:	f04f 0a00 	mov.w	sl, #0
 800e4a0:	f8b7 b000 	ldrh.w	fp, [r7]
 800e4a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e4a8:	fb09 220b 	mla	r2, r9, fp, r2
 800e4ac:	4452      	add	r2, sl
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4b4:	f84c 3b04 	str.w	r3, [ip], #4
 800e4b8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e4bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4c0:	f8bc 3000 	ldrh.w	r3, [ip]
 800e4c4:	fb09 330a 	mla	r3, r9, sl, r3
 800e4c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e4cc:	42bd      	cmp	r5, r7
 800e4ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4d2:	d8e5      	bhi.n	800e4a0 <__multiply+0xfc>
 800e4d4:	9a01      	ldr	r2, [sp, #4]
 800e4d6:	50a3      	str	r3, [r4, r2]
 800e4d8:	3404      	adds	r4, #4
 800e4da:	e79f      	b.n	800e41c <__multiply+0x78>
 800e4dc:	3e01      	subs	r6, #1
 800e4de:	e7a1      	b.n	800e424 <__multiply+0x80>
 800e4e0:	0800f708 	.word	0x0800f708
 800e4e4:	0800f719 	.word	0x0800f719

0800e4e8 <__pow5mult>:
 800e4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	4615      	mov	r5, r2
 800e4ee:	f012 0203 	ands.w	r2, r2, #3
 800e4f2:	4607      	mov	r7, r0
 800e4f4:	460e      	mov	r6, r1
 800e4f6:	d007      	beq.n	800e508 <__pow5mult+0x20>
 800e4f8:	4c25      	ldr	r4, [pc, #148]	@ (800e590 <__pow5mult+0xa8>)
 800e4fa:	3a01      	subs	r2, #1
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e502:	f7ff fea7 	bl	800e254 <__multadd>
 800e506:	4606      	mov	r6, r0
 800e508:	10ad      	asrs	r5, r5, #2
 800e50a:	d03d      	beq.n	800e588 <__pow5mult+0xa0>
 800e50c:	69fc      	ldr	r4, [r7, #28]
 800e50e:	b97c      	cbnz	r4, 800e530 <__pow5mult+0x48>
 800e510:	2010      	movs	r0, #16
 800e512:	f7fe f947 	bl	800c7a4 <malloc>
 800e516:	4602      	mov	r2, r0
 800e518:	61f8      	str	r0, [r7, #28]
 800e51a:	b928      	cbnz	r0, 800e528 <__pow5mult+0x40>
 800e51c:	4b1d      	ldr	r3, [pc, #116]	@ (800e594 <__pow5mult+0xac>)
 800e51e:	481e      	ldr	r0, [pc, #120]	@ (800e598 <__pow5mult+0xb0>)
 800e520:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e524:	f000 fda2 	bl	800f06c <__assert_func>
 800e528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e52c:	6004      	str	r4, [r0, #0]
 800e52e:	60c4      	str	r4, [r0, #12]
 800e530:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e538:	b94c      	cbnz	r4, 800e54e <__pow5mult+0x66>
 800e53a:	f240 2171 	movw	r1, #625	@ 0x271
 800e53e:	4638      	mov	r0, r7
 800e540:	f7ff ff1a 	bl	800e378 <__i2b>
 800e544:	2300      	movs	r3, #0
 800e546:	f8c8 0008 	str.w	r0, [r8, #8]
 800e54a:	4604      	mov	r4, r0
 800e54c:	6003      	str	r3, [r0, #0]
 800e54e:	f04f 0900 	mov.w	r9, #0
 800e552:	07eb      	lsls	r3, r5, #31
 800e554:	d50a      	bpl.n	800e56c <__pow5mult+0x84>
 800e556:	4631      	mov	r1, r6
 800e558:	4622      	mov	r2, r4
 800e55a:	4638      	mov	r0, r7
 800e55c:	f7ff ff22 	bl	800e3a4 <__multiply>
 800e560:	4631      	mov	r1, r6
 800e562:	4680      	mov	r8, r0
 800e564:	4638      	mov	r0, r7
 800e566:	f7ff fe53 	bl	800e210 <_Bfree>
 800e56a:	4646      	mov	r6, r8
 800e56c:	106d      	asrs	r5, r5, #1
 800e56e:	d00b      	beq.n	800e588 <__pow5mult+0xa0>
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	b938      	cbnz	r0, 800e584 <__pow5mult+0x9c>
 800e574:	4622      	mov	r2, r4
 800e576:	4621      	mov	r1, r4
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff ff13 	bl	800e3a4 <__multiply>
 800e57e:	6020      	str	r0, [r4, #0]
 800e580:	f8c0 9000 	str.w	r9, [r0]
 800e584:	4604      	mov	r4, r0
 800e586:	e7e4      	b.n	800e552 <__pow5mult+0x6a>
 800e588:	4630      	mov	r0, r6
 800e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e58e:	bf00      	nop
 800e590:	0800f7cc 	.word	0x0800f7cc
 800e594:	0800f699 	.word	0x0800f699
 800e598:	0800f719 	.word	0x0800f719

0800e59c <__lshift>:
 800e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	6849      	ldr	r1, [r1, #4]
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5aa:	68a3      	ldr	r3, [r4, #8]
 800e5ac:	4607      	mov	r7, r0
 800e5ae:	4691      	mov	r9, r2
 800e5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5b4:	f108 0601 	add.w	r6, r8, #1
 800e5b8:	42b3      	cmp	r3, r6
 800e5ba:	db0b      	blt.n	800e5d4 <__lshift+0x38>
 800e5bc:	4638      	mov	r0, r7
 800e5be:	f7ff fde7 	bl	800e190 <_Balloc>
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	b948      	cbnz	r0, 800e5da <__lshift+0x3e>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	4b28      	ldr	r3, [pc, #160]	@ (800e66c <__lshift+0xd0>)
 800e5ca:	4829      	ldr	r0, [pc, #164]	@ (800e670 <__lshift+0xd4>)
 800e5cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e5d0:	f000 fd4c 	bl	800f06c <__assert_func>
 800e5d4:	3101      	adds	r1, #1
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	e7ee      	b.n	800e5b8 <__lshift+0x1c>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f100 0114 	add.w	r1, r0, #20
 800e5e0:	f100 0210 	add.w	r2, r0, #16
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	4553      	cmp	r3, sl
 800e5e8:	db33      	blt.n	800e652 <__lshift+0xb6>
 800e5ea:	6920      	ldr	r0, [r4, #16]
 800e5ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5f0:	f104 0314 	add.w	r3, r4, #20
 800e5f4:	f019 091f 	ands.w	r9, r9, #31
 800e5f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e600:	d02b      	beq.n	800e65a <__lshift+0xbe>
 800e602:	f1c9 0e20 	rsb	lr, r9, #32
 800e606:	468a      	mov	sl, r1
 800e608:	2200      	movs	r2, #0
 800e60a:	6818      	ldr	r0, [r3, #0]
 800e60c:	fa00 f009 	lsl.w	r0, r0, r9
 800e610:	4310      	orrs	r0, r2
 800e612:	f84a 0b04 	str.w	r0, [sl], #4
 800e616:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61a:	459c      	cmp	ip, r3
 800e61c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e620:	d8f3      	bhi.n	800e60a <__lshift+0x6e>
 800e622:	ebac 0304 	sub.w	r3, ip, r4
 800e626:	3b15      	subs	r3, #21
 800e628:	f023 0303 	bic.w	r3, r3, #3
 800e62c:	3304      	adds	r3, #4
 800e62e:	f104 0015 	add.w	r0, r4, #21
 800e632:	4560      	cmp	r0, ip
 800e634:	bf88      	it	hi
 800e636:	2304      	movhi	r3, #4
 800e638:	50ca      	str	r2, [r1, r3]
 800e63a:	b10a      	cbz	r2, 800e640 <__lshift+0xa4>
 800e63c:	f108 0602 	add.w	r6, r8, #2
 800e640:	3e01      	subs	r6, #1
 800e642:	4638      	mov	r0, r7
 800e644:	612e      	str	r6, [r5, #16]
 800e646:	4621      	mov	r1, r4
 800e648:	f7ff fde2 	bl	800e210 <_Bfree>
 800e64c:	4628      	mov	r0, r5
 800e64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e652:	f842 0f04 	str.w	r0, [r2, #4]!
 800e656:	3301      	adds	r3, #1
 800e658:	e7c5      	b.n	800e5e6 <__lshift+0x4a>
 800e65a:	3904      	subs	r1, #4
 800e65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e660:	f841 2f04 	str.w	r2, [r1, #4]!
 800e664:	459c      	cmp	ip, r3
 800e666:	d8f9      	bhi.n	800e65c <__lshift+0xc0>
 800e668:	e7ea      	b.n	800e640 <__lshift+0xa4>
 800e66a:	bf00      	nop
 800e66c:	0800f708 	.word	0x0800f708
 800e670:	0800f719 	.word	0x0800f719

0800e674 <__mcmp>:
 800e674:	690a      	ldr	r2, [r1, #16]
 800e676:	4603      	mov	r3, r0
 800e678:	6900      	ldr	r0, [r0, #16]
 800e67a:	1a80      	subs	r0, r0, r2
 800e67c:	b530      	push	{r4, r5, lr}
 800e67e:	d10e      	bne.n	800e69e <__mcmp+0x2a>
 800e680:	3314      	adds	r3, #20
 800e682:	3114      	adds	r1, #20
 800e684:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e688:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e68c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e690:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e694:	4295      	cmp	r5, r2
 800e696:	d003      	beq.n	800e6a0 <__mcmp+0x2c>
 800e698:	d205      	bcs.n	800e6a6 <__mcmp+0x32>
 800e69a:	f04f 30ff 	mov.w	r0, #4294967295
 800e69e:	bd30      	pop	{r4, r5, pc}
 800e6a0:	42a3      	cmp	r3, r4
 800e6a2:	d3f3      	bcc.n	800e68c <__mcmp+0x18>
 800e6a4:	e7fb      	b.n	800e69e <__mcmp+0x2a>
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	e7f9      	b.n	800e69e <__mcmp+0x2a>
	...

0800e6ac <__mdiff>:
 800e6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b0:	4689      	mov	r9, r1
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4648      	mov	r0, r9
 800e6b8:	4614      	mov	r4, r2
 800e6ba:	f7ff ffdb 	bl	800e674 <__mcmp>
 800e6be:	1e05      	subs	r5, r0, #0
 800e6c0:	d112      	bne.n	800e6e8 <__mdiff+0x3c>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff fd63 	bl	800e190 <_Balloc>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	b928      	cbnz	r0, 800e6da <__mdiff+0x2e>
 800e6ce:	4b3f      	ldr	r3, [pc, #252]	@ (800e7cc <__mdiff+0x120>)
 800e6d0:	f240 2137 	movw	r1, #567	@ 0x237
 800e6d4:	483e      	ldr	r0, [pc, #248]	@ (800e7d0 <__mdiff+0x124>)
 800e6d6:	f000 fcc9 	bl	800f06c <__assert_func>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	b003      	add	sp, #12
 800e6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e8:	bfbc      	itt	lt
 800e6ea:	464b      	movlt	r3, r9
 800e6ec:	46a1      	movlt	r9, r4
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e6f4:	bfba      	itte	lt
 800e6f6:	461c      	movlt	r4, r3
 800e6f8:	2501      	movlt	r5, #1
 800e6fa:	2500      	movge	r5, #0
 800e6fc:	f7ff fd48 	bl	800e190 <_Balloc>
 800e700:	4602      	mov	r2, r0
 800e702:	b918      	cbnz	r0, 800e70c <__mdiff+0x60>
 800e704:	4b31      	ldr	r3, [pc, #196]	@ (800e7cc <__mdiff+0x120>)
 800e706:	f240 2145 	movw	r1, #581	@ 0x245
 800e70a:	e7e3      	b.n	800e6d4 <__mdiff+0x28>
 800e70c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e710:	6926      	ldr	r6, [r4, #16]
 800e712:	60c5      	str	r5, [r0, #12]
 800e714:	f109 0310 	add.w	r3, r9, #16
 800e718:	f109 0514 	add.w	r5, r9, #20
 800e71c:	f104 0e14 	add.w	lr, r4, #20
 800e720:	f100 0b14 	add.w	fp, r0, #20
 800e724:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e728:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	46d9      	mov	r9, fp
 800e730:	f04f 0c00 	mov.w	ip, #0
 800e734:	9b01      	ldr	r3, [sp, #4]
 800e736:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e73a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e73e:	9301      	str	r3, [sp, #4]
 800e740:	fa1f f38a 	uxth.w	r3, sl
 800e744:	4619      	mov	r1, r3
 800e746:	b283      	uxth	r3, r0
 800e748:	1acb      	subs	r3, r1, r3
 800e74a:	0c00      	lsrs	r0, r0, #16
 800e74c:	4463      	add	r3, ip
 800e74e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e752:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e756:	b29b      	uxth	r3, r3
 800e758:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e75c:	4576      	cmp	r6, lr
 800e75e:	f849 3b04 	str.w	r3, [r9], #4
 800e762:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e766:	d8e5      	bhi.n	800e734 <__mdiff+0x88>
 800e768:	1b33      	subs	r3, r6, r4
 800e76a:	3b15      	subs	r3, #21
 800e76c:	f023 0303 	bic.w	r3, r3, #3
 800e770:	3415      	adds	r4, #21
 800e772:	3304      	adds	r3, #4
 800e774:	42a6      	cmp	r6, r4
 800e776:	bf38      	it	cc
 800e778:	2304      	movcc	r3, #4
 800e77a:	441d      	add	r5, r3
 800e77c:	445b      	add	r3, fp
 800e77e:	461e      	mov	r6, r3
 800e780:	462c      	mov	r4, r5
 800e782:	4544      	cmp	r4, r8
 800e784:	d30e      	bcc.n	800e7a4 <__mdiff+0xf8>
 800e786:	f108 0103 	add.w	r1, r8, #3
 800e78a:	1b49      	subs	r1, r1, r5
 800e78c:	f021 0103 	bic.w	r1, r1, #3
 800e790:	3d03      	subs	r5, #3
 800e792:	45a8      	cmp	r8, r5
 800e794:	bf38      	it	cc
 800e796:	2100      	movcc	r1, #0
 800e798:	440b      	add	r3, r1
 800e79a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e79e:	b191      	cbz	r1, 800e7c6 <__mdiff+0x11a>
 800e7a0:	6117      	str	r7, [r2, #16]
 800e7a2:	e79d      	b.n	800e6e0 <__mdiff+0x34>
 800e7a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7a8:	46e6      	mov	lr, ip
 800e7aa:	0c08      	lsrs	r0, r1, #16
 800e7ac:	fa1c fc81 	uxtah	ip, ip, r1
 800e7b0:	4471      	add	r1, lr
 800e7b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e7b6:	b289      	uxth	r1, r1
 800e7b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e7bc:	f846 1b04 	str.w	r1, [r6], #4
 800e7c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7c4:	e7dd      	b.n	800e782 <__mdiff+0xd6>
 800e7c6:	3f01      	subs	r7, #1
 800e7c8:	e7e7      	b.n	800e79a <__mdiff+0xee>
 800e7ca:	bf00      	nop
 800e7cc:	0800f708 	.word	0x0800f708
 800e7d0:	0800f719 	.word	0x0800f719

0800e7d4 <__d2b>:
 800e7d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7d8:	460f      	mov	r7, r1
 800e7da:	2101      	movs	r1, #1
 800e7dc:	ec59 8b10 	vmov	r8, r9, d0
 800e7e0:	4616      	mov	r6, r2
 800e7e2:	f7ff fcd5 	bl	800e190 <_Balloc>
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	b930      	cbnz	r0, 800e7f8 <__d2b+0x24>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	4b23      	ldr	r3, [pc, #140]	@ (800e87c <__d2b+0xa8>)
 800e7ee:	4824      	ldr	r0, [pc, #144]	@ (800e880 <__d2b+0xac>)
 800e7f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e7f4:	f000 fc3a 	bl	800f06c <__assert_func>
 800e7f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e7fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e800:	b10d      	cbz	r5, 800e806 <__d2b+0x32>
 800e802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	f1b8 0300 	subs.w	r3, r8, #0
 800e80c:	d023      	beq.n	800e856 <__d2b+0x82>
 800e80e:	4668      	mov	r0, sp
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	f7ff fd84 	bl	800e31e <__lo0bits>
 800e816:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e81a:	b1d0      	cbz	r0, 800e852 <__d2b+0x7e>
 800e81c:	f1c0 0320 	rsb	r3, r0, #32
 800e820:	fa02 f303 	lsl.w	r3, r2, r3
 800e824:	430b      	orrs	r3, r1
 800e826:	40c2      	lsrs	r2, r0
 800e828:	6163      	str	r3, [r4, #20]
 800e82a:	9201      	str	r2, [sp, #4]
 800e82c:	9b01      	ldr	r3, [sp, #4]
 800e82e:	61a3      	str	r3, [r4, #24]
 800e830:	2b00      	cmp	r3, #0
 800e832:	bf0c      	ite	eq
 800e834:	2201      	moveq	r2, #1
 800e836:	2202      	movne	r2, #2
 800e838:	6122      	str	r2, [r4, #16]
 800e83a:	b1a5      	cbz	r5, 800e866 <__d2b+0x92>
 800e83c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e840:	4405      	add	r5, r0
 800e842:	603d      	str	r5, [r7, #0]
 800e844:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e848:	6030      	str	r0, [r6, #0]
 800e84a:	4620      	mov	r0, r4
 800e84c:	b003      	add	sp, #12
 800e84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e852:	6161      	str	r1, [r4, #20]
 800e854:	e7ea      	b.n	800e82c <__d2b+0x58>
 800e856:	a801      	add	r0, sp, #4
 800e858:	f7ff fd61 	bl	800e31e <__lo0bits>
 800e85c:	9b01      	ldr	r3, [sp, #4]
 800e85e:	6163      	str	r3, [r4, #20]
 800e860:	3020      	adds	r0, #32
 800e862:	2201      	movs	r2, #1
 800e864:	e7e8      	b.n	800e838 <__d2b+0x64>
 800e866:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e86a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e86e:	6038      	str	r0, [r7, #0]
 800e870:	6918      	ldr	r0, [r3, #16]
 800e872:	f7ff fd35 	bl	800e2e0 <__hi0bits>
 800e876:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e87a:	e7e5      	b.n	800e848 <__d2b+0x74>
 800e87c:	0800f708 	.word	0x0800f708
 800e880:	0800f719 	.word	0x0800f719

0800e884 <__ssputs_r>:
 800e884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e888:	688e      	ldr	r6, [r1, #8]
 800e88a:	461f      	mov	r7, r3
 800e88c:	42be      	cmp	r6, r7
 800e88e:	680b      	ldr	r3, [r1, #0]
 800e890:	4682      	mov	sl, r0
 800e892:	460c      	mov	r4, r1
 800e894:	4690      	mov	r8, r2
 800e896:	d82d      	bhi.n	800e8f4 <__ssputs_r+0x70>
 800e898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e89c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8a0:	d026      	beq.n	800e8f0 <__ssputs_r+0x6c>
 800e8a2:	6965      	ldr	r5, [r4, #20]
 800e8a4:	6909      	ldr	r1, [r1, #16]
 800e8a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8aa:	eba3 0901 	sub.w	r9, r3, r1
 800e8ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8b2:	1c7b      	adds	r3, r7, #1
 800e8b4:	444b      	add	r3, r9
 800e8b6:	106d      	asrs	r5, r5, #1
 800e8b8:	429d      	cmp	r5, r3
 800e8ba:	bf38      	it	cc
 800e8bc:	461d      	movcc	r5, r3
 800e8be:	0553      	lsls	r3, r2, #21
 800e8c0:	d527      	bpl.n	800e912 <__ssputs_r+0x8e>
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	f7fd ff98 	bl	800c7f8 <_malloc_r>
 800e8c8:	4606      	mov	r6, r0
 800e8ca:	b360      	cbz	r0, 800e926 <__ssputs_r+0xa2>
 800e8cc:	6921      	ldr	r1, [r4, #16]
 800e8ce:	464a      	mov	r2, r9
 800e8d0:	f7fe fe1f 	bl	800d512 <memcpy>
 800e8d4:	89a3      	ldrh	r3, [r4, #12]
 800e8d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8de:	81a3      	strh	r3, [r4, #12]
 800e8e0:	6126      	str	r6, [r4, #16]
 800e8e2:	6165      	str	r5, [r4, #20]
 800e8e4:	444e      	add	r6, r9
 800e8e6:	eba5 0509 	sub.w	r5, r5, r9
 800e8ea:	6026      	str	r6, [r4, #0]
 800e8ec:	60a5      	str	r5, [r4, #8]
 800e8ee:	463e      	mov	r6, r7
 800e8f0:	42be      	cmp	r6, r7
 800e8f2:	d900      	bls.n	800e8f6 <__ssputs_r+0x72>
 800e8f4:	463e      	mov	r6, r7
 800e8f6:	6820      	ldr	r0, [r4, #0]
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	4641      	mov	r1, r8
 800e8fc:	f000 fb9c 	bl	800f038 <memmove>
 800e900:	68a3      	ldr	r3, [r4, #8]
 800e902:	1b9b      	subs	r3, r3, r6
 800e904:	60a3      	str	r3, [r4, #8]
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	4433      	add	r3, r6
 800e90a:	6023      	str	r3, [r4, #0]
 800e90c:	2000      	movs	r0, #0
 800e90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e912:	462a      	mov	r2, r5
 800e914:	f000 fbee 	bl	800f0f4 <_realloc_r>
 800e918:	4606      	mov	r6, r0
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d1e0      	bne.n	800e8e0 <__ssputs_r+0x5c>
 800e91e:	6921      	ldr	r1, [r4, #16]
 800e920:	4650      	mov	r0, sl
 800e922:	f7ff fbeb 	bl	800e0fc <_free_r>
 800e926:	230c      	movs	r3, #12
 800e928:	f8ca 3000 	str.w	r3, [sl]
 800e92c:	89a3      	ldrh	r3, [r4, #12]
 800e92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e932:	81a3      	strh	r3, [r4, #12]
 800e934:	f04f 30ff 	mov.w	r0, #4294967295
 800e938:	e7e9      	b.n	800e90e <__ssputs_r+0x8a>
	...

0800e93c <_svfiprintf_r>:
 800e93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e940:	4698      	mov	r8, r3
 800e942:	898b      	ldrh	r3, [r1, #12]
 800e944:	061b      	lsls	r3, r3, #24
 800e946:	b09d      	sub	sp, #116	@ 0x74
 800e948:	4607      	mov	r7, r0
 800e94a:	460d      	mov	r5, r1
 800e94c:	4614      	mov	r4, r2
 800e94e:	d510      	bpl.n	800e972 <_svfiprintf_r+0x36>
 800e950:	690b      	ldr	r3, [r1, #16]
 800e952:	b973      	cbnz	r3, 800e972 <_svfiprintf_r+0x36>
 800e954:	2140      	movs	r1, #64	@ 0x40
 800e956:	f7fd ff4f 	bl	800c7f8 <_malloc_r>
 800e95a:	6028      	str	r0, [r5, #0]
 800e95c:	6128      	str	r0, [r5, #16]
 800e95e:	b930      	cbnz	r0, 800e96e <_svfiprintf_r+0x32>
 800e960:	230c      	movs	r3, #12
 800e962:	603b      	str	r3, [r7, #0]
 800e964:	f04f 30ff 	mov.w	r0, #4294967295
 800e968:	b01d      	add	sp, #116	@ 0x74
 800e96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e96e:	2340      	movs	r3, #64	@ 0x40
 800e970:	616b      	str	r3, [r5, #20]
 800e972:	2300      	movs	r3, #0
 800e974:	9309      	str	r3, [sp, #36]	@ 0x24
 800e976:	2320      	movs	r3, #32
 800e978:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e980:	2330      	movs	r3, #48	@ 0x30
 800e982:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb20 <_svfiprintf_r+0x1e4>
 800e986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e98a:	f04f 0901 	mov.w	r9, #1
 800e98e:	4623      	mov	r3, r4
 800e990:	469a      	mov	sl, r3
 800e992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e996:	b10a      	cbz	r2, 800e99c <_svfiprintf_r+0x60>
 800e998:	2a25      	cmp	r2, #37	@ 0x25
 800e99a:	d1f9      	bne.n	800e990 <_svfiprintf_r+0x54>
 800e99c:	ebba 0b04 	subs.w	fp, sl, r4
 800e9a0:	d00b      	beq.n	800e9ba <_svfiprintf_r+0x7e>
 800e9a2:	465b      	mov	r3, fp
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f7ff ff6b 	bl	800e884 <__ssputs_r>
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	f000 80a7 	beq.w	800eb02 <_svfiprintf_r+0x1c6>
 800e9b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9b6:	445a      	add	r2, fp
 800e9b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 809f 	beq.w	800eb02 <_svfiprintf_r+0x1c6>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9ce:	f10a 0a01 	add.w	sl, sl, #1
 800e9d2:	9304      	str	r3, [sp, #16]
 800e9d4:	9307      	str	r3, [sp, #28]
 800e9d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9da:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9dc:	4654      	mov	r4, sl
 800e9de:	2205      	movs	r2, #5
 800e9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e4:	484e      	ldr	r0, [pc, #312]	@ (800eb20 <_svfiprintf_r+0x1e4>)
 800e9e6:	f7f1 fc83 	bl	80002f0 <memchr>
 800e9ea:	9a04      	ldr	r2, [sp, #16]
 800e9ec:	b9d8      	cbnz	r0, 800ea26 <_svfiprintf_r+0xea>
 800e9ee:	06d0      	lsls	r0, r2, #27
 800e9f0:	bf44      	itt	mi
 800e9f2:	2320      	movmi	r3, #32
 800e9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9f8:	0711      	lsls	r1, r2, #28
 800e9fa:	bf44      	itt	mi
 800e9fc:	232b      	movmi	r3, #43	@ 0x2b
 800e9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea02:	f89a 3000 	ldrb.w	r3, [sl]
 800ea06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea08:	d015      	beq.n	800ea36 <_svfiprintf_r+0xfa>
 800ea0a:	9a07      	ldr	r2, [sp, #28]
 800ea0c:	4654      	mov	r4, sl
 800ea0e:	2000      	movs	r0, #0
 800ea10:	f04f 0c0a 	mov.w	ip, #10
 800ea14:	4621      	mov	r1, r4
 800ea16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea1a:	3b30      	subs	r3, #48	@ 0x30
 800ea1c:	2b09      	cmp	r3, #9
 800ea1e:	d94b      	bls.n	800eab8 <_svfiprintf_r+0x17c>
 800ea20:	b1b0      	cbz	r0, 800ea50 <_svfiprintf_r+0x114>
 800ea22:	9207      	str	r2, [sp, #28]
 800ea24:	e014      	b.n	800ea50 <_svfiprintf_r+0x114>
 800ea26:	eba0 0308 	sub.w	r3, r0, r8
 800ea2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	9304      	str	r3, [sp, #16]
 800ea32:	46a2      	mov	sl, r4
 800ea34:	e7d2      	b.n	800e9dc <_svfiprintf_r+0xa0>
 800ea36:	9b03      	ldr	r3, [sp, #12]
 800ea38:	1d19      	adds	r1, r3, #4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	9103      	str	r1, [sp, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	bfbb      	ittet	lt
 800ea42:	425b      	neglt	r3, r3
 800ea44:	f042 0202 	orrlt.w	r2, r2, #2
 800ea48:	9307      	strge	r3, [sp, #28]
 800ea4a:	9307      	strlt	r3, [sp, #28]
 800ea4c:	bfb8      	it	lt
 800ea4e:	9204      	strlt	r2, [sp, #16]
 800ea50:	7823      	ldrb	r3, [r4, #0]
 800ea52:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea54:	d10a      	bne.n	800ea6c <_svfiprintf_r+0x130>
 800ea56:	7863      	ldrb	r3, [r4, #1]
 800ea58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea5a:	d132      	bne.n	800eac2 <_svfiprintf_r+0x186>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	9203      	str	r2, [sp, #12]
 800ea64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea68:	3402      	adds	r4, #2
 800ea6a:	9305      	str	r3, [sp, #20]
 800ea6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb30 <_svfiprintf_r+0x1f4>
 800ea70:	7821      	ldrb	r1, [r4, #0]
 800ea72:	2203      	movs	r2, #3
 800ea74:	4650      	mov	r0, sl
 800ea76:	f7f1 fc3b 	bl	80002f0 <memchr>
 800ea7a:	b138      	cbz	r0, 800ea8c <_svfiprintf_r+0x150>
 800ea7c:	9b04      	ldr	r3, [sp, #16]
 800ea7e:	eba0 000a 	sub.w	r0, r0, sl
 800ea82:	2240      	movs	r2, #64	@ 0x40
 800ea84:	4082      	lsls	r2, r0
 800ea86:	4313      	orrs	r3, r2
 800ea88:	3401      	adds	r4, #1
 800ea8a:	9304      	str	r3, [sp, #16]
 800ea8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea90:	4824      	ldr	r0, [pc, #144]	@ (800eb24 <_svfiprintf_r+0x1e8>)
 800ea92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea96:	2206      	movs	r2, #6
 800ea98:	f7f1 fc2a 	bl	80002f0 <memchr>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d036      	beq.n	800eb0e <_svfiprintf_r+0x1d2>
 800eaa0:	4b21      	ldr	r3, [pc, #132]	@ (800eb28 <_svfiprintf_r+0x1ec>)
 800eaa2:	bb1b      	cbnz	r3, 800eaec <_svfiprintf_r+0x1b0>
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	3307      	adds	r3, #7
 800eaa8:	f023 0307 	bic.w	r3, r3, #7
 800eaac:	3308      	adds	r3, #8
 800eaae:	9303      	str	r3, [sp, #12]
 800eab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eab2:	4433      	add	r3, r6
 800eab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eab6:	e76a      	b.n	800e98e <_svfiprintf_r+0x52>
 800eab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eabc:	460c      	mov	r4, r1
 800eabe:	2001      	movs	r0, #1
 800eac0:	e7a8      	b.n	800ea14 <_svfiprintf_r+0xd8>
 800eac2:	2300      	movs	r3, #0
 800eac4:	3401      	adds	r4, #1
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	4619      	mov	r1, r3
 800eaca:	f04f 0c0a 	mov.w	ip, #10
 800eace:	4620      	mov	r0, r4
 800ead0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead4:	3a30      	subs	r2, #48	@ 0x30
 800ead6:	2a09      	cmp	r2, #9
 800ead8:	d903      	bls.n	800eae2 <_svfiprintf_r+0x1a6>
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0c6      	beq.n	800ea6c <_svfiprintf_r+0x130>
 800eade:	9105      	str	r1, [sp, #20]
 800eae0:	e7c4      	b.n	800ea6c <_svfiprintf_r+0x130>
 800eae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eae6:	4604      	mov	r4, r0
 800eae8:	2301      	movs	r3, #1
 800eaea:	e7f0      	b.n	800eace <_svfiprintf_r+0x192>
 800eaec:	ab03      	add	r3, sp, #12
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	462a      	mov	r2, r5
 800eaf2:	4b0e      	ldr	r3, [pc, #56]	@ (800eb2c <_svfiprintf_r+0x1f0>)
 800eaf4:	a904      	add	r1, sp, #16
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	f7fd ff9a 	bl	800ca30 <_printf_float>
 800eafc:	1c42      	adds	r2, r0, #1
 800eafe:	4606      	mov	r6, r0
 800eb00:	d1d6      	bne.n	800eab0 <_svfiprintf_r+0x174>
 800eb02:	89ab      	ldrh	r3, [r5, #12]
 800eb04:	065b      	lsls	r3, r3, #25
 800eb06:	f53f af2d 	bmi.w	800e964 <_svfiprintf_r+0x28>
 800eb0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb0c:	e72c      	b.n	800e968 <_svfiprintf_r+0x2c>
 800eb0e:	ab03      	add	r3, sp, #12
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	462a      	mov	r2, r5
 800eb14:	4b05      	ldr	r3, [pc, #20]	@ (800eb2c <_svfiprintf_r+0x1f0>)
 800eb16:	a904      	add	r1, sp, #16
 800eb18:	4638      	mov	r0, r7
 800eb1a:	f7fe fa11 	bl	800cf40 <_printf_i>
 800eb1e:	e7ed      	b.n	800eafc <_svfiprintf_r+0x1c0>
 800eb20:	0800f772 	.word	0x0800f772
 800eb24:	0800f77c 	.word	0x0800f77c
 800eb28:	0800ca31 	.word	0x0800ca31
 800eb2c:	0800e885 	.word	0x0800e885
 800eb30:	0800f778 	.word	0x0800f778

0800eb34 <__sfputc_r>:
 800eb34:	6893      	ldr	r3, [r2, #8]
 800eb36:	3b01      	subs	r3, #1
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	b410      	push	{r4}
 800eb3c:	6093      	str	r3, [r2, #8]
 800eb3e:	da08      	bge.n	800eb52 <__sfputc_r+0x1e>
 800eb40:	6994      	ldr	r4, [r2, #24]
 800eb42:	42a3      	cmp	r3, r4
 800eb44:	db01      	blt.n	800eb4a <__sfputc_r+0x16>
 800eb46:	290a      	cmp	r1, #10
 800eb48:	d103      	bne.n	800eb52 <__sfputc_r+0x1e>
 800eb4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb4e:	f000 b9df 	b.w	800ef10 <__swbuf_r>
 800eb52:	6813      	ldr	r3, [r2, #0]
 800eb54:	1c58      	adds	r0, r3, #1
 800eb56:	6010      	str	r0, [r2, #0]
 800eb58:	7019      	strb	r1, [r3, #0]
 800eb5a:	4608      	mov	r0, r1
 800eb5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <__sfputs_r>:
 800eb62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb64:	4606      	mov	r6, r0
 800eb66:	460f      	mov	r7, r1
 800eb68:	4614      	mov	r4, r2
 800eb6a:	18d5      	adds	r5, r2, r3
 800eb6c:	42ac      	cmp	r4, r5
 800eb6e:	d101      	bne.n	800eb74 <__sfputs_r+0x12>
 800eb70:	2000      	movs	r0, #0
 800eb72:	e007      	b.n	800eb84 <__sfputs_r+0x22>
 800eb74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb78:	463a      	mov	r2, r7
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f7ff ffda 	bl	800eb34 <__sfputc_r>
 800eb80:	1c43      	adds	r3, r0, #1
 800eb82:	d1f3      	bne.n	800eb6c <__sfputs_r+0xa>
 800eb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb88 <_vfiprintf_r>:
 800eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8c:	460d      	mov	r5, r1
 800eb8e:	b09d      	sub	sp, #116	@ 0x74
 800eb90:	4614      	mov	r4, r2
 800eb92:	4698      	mov	r8, r3
 800eb94:	4606      	mov	r6, r0
 800eb96:	b118      	cbz	r0, 800eba0 <_vfiprintf_r+0x18>
 800eb98:	6a03      	ldr	r3, [r0, #32]
 800eb9a:	b90b      	cbnz	r3, 800eba0 <_vfiprintf_r+0x18>
 800eb9c:	f7fe fb7a 	bl	800d294 <__sinit>
 800eba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eba2:	07d9      	lsls	r1, r3, #31
 800eba4:	d405      	bmi.n	800ebb2 <_vfiprintf_r+0x2a>
 800eba6:	89ab      	ldrh	r3, [r5, #12]
 800eba8:	059a      	lsls	r2, r3, #22
 800ebaa:	d402      	bmi.n	800ebb2 <_vfiprintf_r+0x2a>
 800ebac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebae:	f7fe fcae 	bl	800d50e <__retarget_lock_acquire_recursive>
 800ebb2:	89ab      	ldrh	r3, [r5, #12]
 800ebb4:	071b      	lsls	r3, r3, #28
 800ebb6:	d501      	bpl.n	800ebbc <_vfiprintf_r+0x34>
 800ebb8:	692b      	ldr	r3, [r5, #16]
 800ebba:	b99b      	cbnz	r3, 800ebe4 <_vfiprintf_r+0x5c>
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f000 f9e4 	bl	800ef8c <__swsetup_r>
 800ebc4:	b170      	cbz	r0, 800ebe4 <_vfiprintf_r+0x5c>
 800ebc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebc8:	07dc      	lsls	r4, r3, #31
 800ebca:	d504      	bpl.n	800ebd6 <_vfiprintf_r+0x4e>
 800ebcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd0:	b01d      	add	sp, #116	@ 0x74
 800ebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd6:	89ab      	ldrh	r3, [r5, #12]
 800ebd8:	0598      	lsls	r0, r3, #22
 800ebda:	d4f7      	bmi.n	800ebcc <_vfiprintf_r+0x44>
 800ebdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebde:	f7fe fc97 	bl	800d510 <__retarget_lock_release_recursive>
 800ebe2:	e7f3      	b.n	800ebcc <_vfiprintf_r+0x44>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebe8:	2320      	movs	r3, #32
 800ebea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ebee:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebf2:	2330      	movs	r3, #48	@ 0x30
 800ebf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eda4 <_vfiprintf_r+0x21c>
 800ebf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebfc:	f04f 0901 	mov.w	r9, #1
 800ec00:	4623      	mov	r3, r4
 800ec02:	469a      	mov	sl, r3
 800ec04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec08:	b10a      	cbz	r2, 800ec0e <_vfiprintf_r+0x86>
 800ec0a:	2a25      	cmp	r2, #37	@ 0x25
 800ec0c:	d1f9      	bne.n	800ec02 <_vfiprintf_r+0x7a>
 800ec0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ec12:	d00b      	beq.n	800ec2c <_vfiprintf_r+0xa4>
 800ec14:	465b      	mov	r3, fp
 800ec16:	4622      	mov	r2, r4
 800ec18:	4629      	mov	r1, r5
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7ff ffa1 	bl	800eb62 <__sfputs_r>
 800ec20:	3001      	adds	r0, #1
 800ec22:	f000 80a7 	beq.w	800ed74 <_vfiprintf_r+0x1ec>
 800ec26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec28:	445a      	add	r2, fp
 800ec2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f000 809f 	beq.w	800ed74 <_vfiprintf_r+0x1ec>
 800ec36:	2300      	movs	r3, #0
 800ec38:	f04f 32ff 	mov.w	r2, #4294967295
 800ec3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec40:	f10a 0a01 	add.w	sl, sl, #1
 800ec44:	9304      	str	r3, [sp, #16]
 800ec46:	9307      	str	r3, [sp, #28]
 800ec48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec4e:	4654      	mov	r4, sl
 800ec50:	2205      	movs	r2, #5
 800ec52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec56:	4853      	ldr	r0, [pc, #332]	@ (800eda4 <_vfiprintf_r+0x21c>)
 800ec58:	f7f1 fb4a 	bl	80002f0 <memchr>
 800ec5c:	9a04      	ldr	r2, [sp, #16]
 800ec5e:	b9d8      	cbnz	r0, 800ec98 <_vfiprintf_r+0x110>
 800ec60:	06d1      	lsls	r1, r2, #27
 800ec62:	bf44      	itt	mi
 800ec64:	2320      	movmi	r3, #32
 800ec66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec6a:	0713      	lsls	r3, r2, #28
 800ec6c:	bf44      	itt	mi
 800ec6e:	232b      	movmi	r3, #43	@ 0x2b
 800ec70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec74:	f89a 3000 	ldrb.w	r3, [sl]
 800ec78:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec7a:	d015      	beq.n	800eca8 <_vfiprintf_r+0x120>
 800ec7c:	9a07      	ldr	r2, [sp, #28]
 800ec7e:	4654      	mov	r4, sl
 800ec80:	2000      	movs	r0, #0
 800ec82:	f04f 0c0a 	mov.w	ip, #10
 800ec86:	4621      	mov	r1, r4
 800ec88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec8c:	3b30      	subs	r3, #48	@ 0x30
 800ec8e:	2b09      	cmp	r3, #9
 800ec90:	d94b      	bls.n	800ed2a <_vfiprintf_r+0x1a2>
 800ec92:	b1b0      	cbz	r0, 800ecc2 <_vfiprintf_r+0x13a>
 800ec94:	9207      	str	r2, [sp, #28]
 800ec96:	e014      	b.n	800ecc2 <_vfiprintf_r+0x13a>
 800ec98:	eba0 0308 	sub.w	r3, r0, r8
 800ec9c:	fa09 f303 	lsl.w	r3, r9, r3
 800eca0:	4313      	orrs	r3, r2
 800eca2:	9304      	str	r3, [sp, #16]
 800eca4:	46a2      	mov	sl, r4
 800eca6:	e7d2      	b.n	800ec4e <_vfiprintf_r+0xc6>
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	1d19      	adds	r1, r3, #4
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	9103      	str	r1, [sp, #12]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	bfbb      	ittet	lt
 800ecb4:	425b      	neglt	r3, r3
 800ecb6:	f042 0202 	orrlt.w	r2, r2, #2
 800ecba:	9307      	strge	r3, [sp, #28]
 800ecbc:	9307      	strlt	r3, [sp, #28]
 800ecbe:	bfb8      	it	lt
 800ecc0:	9204      	strlt	r2, [sp, #16]
 800ecc2:	7823      	ldrb	r3, [r4, #0]
 800ecc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecc6:	d10a      	bne.n	800ecde <_vfiprintf_r+0x156>
 800ecc8:	7863      	ldrb	r3, [r4, #1]
 800ecca:	2b2a      	cmp	r3, #42	@ 0x2a
 800eccc:	d132      	bne.n	800ed34 <_vfiprintf_r+0x1ac>
 800ecce:	9b03      	ldr	r3, [sp, #12]
 800ecd0:	1d1a      	adds	r2, r3, #4
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	9203      	str	r2, [sp, #12]
 800ecd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecda:	3402      	adds	r4, #2
 800ecdc:	9305      	str	r3, [sp, #20]
 800ecde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800edb4 <_vfiprintf_r+0x22c>
 800ece2:	7821      	ldrb	r1, [r4, #0]
 800ece4:	2203      	movs	r2, #3
 800ece6:	4650      	mov	r0, sl
 800ece8:	f7f1 fb02 	bl	80002f0 <memchr>
 800ecec:	b138      	cbz	r0, 800ecfe <_vfiprintf_r+0x176>
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	eba0 000a 	sub.w	r0, r0, sl
 800ecf4:	2240      	movs	r2, #64	@ 0x40
 800ecf6:	4082      	lsls	r2, r0
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	3401      	adds	r4, #1
 800ecfc:	9304      	str	r3, [sp, #16]
 800ecfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed02:	4829      	ldr	r0, [pc, #164]	@ (800eda8 <_vfiprintf_r+0x220>)
 800ed04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed08:	2206      	movs	r2, #6
 800ed0a:	f7f1 faf1 	bl	80002f0 <memchr>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d03f      	beq.n	800ed92 <_vfiprintf_r+0x20a>
 800ed12:	4b26      	ldr	r3, [pc, #152]	@ (800edac <_vfiprintf_r+0x224>)
 800ed14:	bb1b      	cbnz	r3, 800ed5e <_vfiprintf_r+0x1d6>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	3307      	adds	r3, #7
 800ed1a:	f023 0307 	bic.w	r3, r3, #7
 800ed1e:	3308      	adds	r3, #8
 800ed20:	9303      	str	r3, [sp, #12]
 800ed22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed24:	443b      	add	r3, r7
 800ed26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed28:	e76a      	b.n	800ec00 <_vfiprintf_r+0x78>
 800ed2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed2e:	460c      	mov	r4, r1
 800ed30:	2001      	movs	r0, #1
 800ed32:	e7a8      	b.n	800ec86 <_vfiprintf_r+0xfe>
 800ed34:	2300      	movs	r3, #0
 800ed36:	3401      	adds	r4, #1
 800ed38:	9305      	str	r3, [sp, #20]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	f04f 0c0a 	mov.w	ip, #10
 800ed40:	4620      	mov	r0, r4
 800ed42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed46:	3a30      	subs	r2, #48	@ 0x30
 800ed48:	2a09      	cmp	r2, #9
 800ed4a:	d903      	bls.n	800ed54 <_vfiprintf_r+0x1cc>
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d0c6      	beq.n	800ecde <_vfiprintf_r+0x156>
 800ed50:	9105      	str	r1, [sp, #20]
 800ed52:	e7c4      	b.n	800ecde <_vfiprintf_r+0x156>
 800ed54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed58:	4604      	mov	r4, r0
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e7f0      	b.n	800ed40 <_vfiprintf_r+0x1b8>
 800ed5e:	ab03      	add	r3, sp, #12
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	462a      	mov	r2, r5
 800ed64:	4b12      	ldr	r3, [pc, #72]	@ (800edb0 <_vfiprintf_r+0x228>)
 800ed66:	a904      	add	r1, sp, #16
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7fd fe61 	bl	800ca30 <_printf_float>
 800ed6e:	4607      	mov	r7, r0
 800ed70:	1c78      	adds	r0, r7, #1
 800ed72:	d1d6      	bne.n	800ed22 <_vfiprintf_r+0x19a>
 800ed74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed76:	07d9      	lsls	r1, r3, #31
 800ed78:	d405      	bmi.n	800ed86 <_vfiprintf_r+0x1fe>
 800ed7a:	89ab      	ldrh	r3, [r5, #12]
 800ed7c:	059a      	lsls	r2, r3, #22
 800ed7e:	d402      	bmi.n	800ed86 <_vfiprintf_r+0x1fe>
 800ed80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed82:	f7fe fbc5 	bl	800d510 <__retarget_lock_release_recursive>
 800ed86:	89ab      	ldrh	r3, [r5, #12]
 800ed88:	065b      	lsls	r3, r3, #25
 800ed8a:	f53f af1f 	bmi.w	800ebcc <_vfiprintf_r+0x44>
 800ed8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed90:	e71e      	b.n	800ebd0 <_vfiprintf_r+0x48>
 800ed92:	ab03      	add	r3, sp, #12
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	462a      	mov	r2, r5
 800ed98:	4b05      	ldr	r3, [pc, #20]	@ (800edb0 <_vfiprintf_r+0x228>)
 800ed9a:	a904      	add	r1, sp, #16
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f7fe f8cf 	bl	800cf40 <_printf_i>
 800eda2:	e7e4      	b.n	800ed6e <_vfiprintf_r+0x1e6>
 800eda4:	0800f772 	.word	0x0800f772
 800eda8:	0800f77c 	.word	0x0800f77c
 800edac:	0800ca31 	.word	0x0800ca31
 800edb0:	0800eb63 	.word	0x0800eb63
 800edb4:	0800f778 	.word	0x0800f778

0800edb8 <__sflush_r>:
 800edb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc0:	0716      	lsls	r6, r2, #28
 800edc2:	4605      	mov	r5, r0
 800edc4:	460c      	mov	r4, r1
 800edc6:	d454      	bmi.n	800ee72 <__sflush_r+0xba>
 800edc8:	684b      	ldr	r3, [r1, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	dc02      	bgt.n	800edd4 <__sflush_r+0x1c>
 800edce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	dd48      	ble.n	800ee66 <__sflush_r+0xae>
 800edd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edd6:	2e00      	cmp	r6, #0
 800edd8:	d045      	beq.n	800ee66 <__sflush_r+0xae>
 800edda:	2300      	movs	r3, #0
 800eddc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ede0:	682f      	ldr	r7, [r5, #0]
 800ede2:	6a21      	ldr	r1, [r4, #32]
 800ede4:	602b      	str	r3, [r5, #0]
 800ede6:	d030      	beq.n	800ee4a <__sflush_r+0x92>
 800ede8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800edea:	89a3      	ldrh	r3, [r4, #12]
 800edec:	0759      	lsls	r1, r3, #29
 800edee:	d505      	bpl.n	800edfc <__sflush_r+0x44>
 800edf0:	6863      	ldr	r3, [r4, #4]
 800edf2:	1ad2      	subs	r2, r2, r3
 800edf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800edf6:	b10b      	cbz	r3, 800edfc <__sflush_r+0x44>
 800edf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800edfa:	1ad2      	subs	r2, r2, r3
 800edfc:	2300      	movs	r3, #0
 800edfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee00:	6a21      	ldr	r1, [r4, #32]
 800ee02:	4628      	mov	r0, r5
 800ee04:	47b0      	blx	r6
 800ee06:	1c43      	adds	r3, r0, #1
 800ee08:	89a3      	ldrh	r3, [r4, #12]
 800ee0a:	d106      	bne.n	800ee1a <__sflush_r+0x62>
 800ee0c:	6829      	ldr	r1, [r5, #0]
 800ee0e:	291d      	cmp	r1, #29
 800ee10:	d82b      	bhi.n	800ee6a <__sflush_r+0xb2>
 800ee12:	4a2a      	ldr	r2, [pc, #168]	@ (800eebc <__sflush_r+0x104>)
 800ee14:	40ca      	lsrs	r2, r1
 800ee16:	07d6      	lsls	r6, r2, #31
 800ee18:	d527      	bpl.n	800ee6a <__sflush_r+0xb2>
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	6062      	str	r2, [r4, #4]
 800ee1e:	04d9      	lsls	r1, r3, #19
 800ee20:	6922      	ldr	r2, [r4, #16]
 800ee22:	6022      	str	r2, [r4, #0]
 800ee24:	d504      	bpl.n	800ee30 <__sflush_r+0x78>
 800ee26:	1c42      	adds	r2, r0, #1
 800ee28:	d101      	bne.n	800ee2e <__sflush_r+0x76>
 800ee2a:	682b      	ldr	r3, [r5, #0]
 800ee2c:	b903      	cbnz	r3, 800ee30 <__sflush_r+0x78>
 800ee2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee32:	602f      	str	r7, [r5, #0]
 800ee34:	b1b9      	cbz	r1, 800ee66 <__sflush_r+0xae>
 800ee36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee3a:	4299      	cmp	r1, r3
 800ee3c:	d002      	beq.n	800ee44 <__sflush_r+0x8c>
 800ee3e:	4628      	mov	r0, r5
 800ee40:	f7ff f95c 	bl	800e0fc <_free_r>
 800ee44:	2300      	movs	r3, #0
 800ee46:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee48:	e00d      	b.n	800ee66 <__sflush_r+0xae>
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	47b0      	blx	r6
 800ee50:	4602      	mov	r2, r0
 800ee52:	1c50      	adds	r0, r2, #1
 800ee54:	d1c9      	bne.n	800edea <__sflush_r+0x32>
 800ee56:	682b      	ldr	r3, [r5, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d0c6      	beq.n	800edea <__sflush_r+0x32>
 800ee5c:	2b1d      	cmp	r3, #29
 800ee5e:	d001      	beq.n	800ee64 <__sflush_r+0xac>
 800ee60:	2b16      	cmp	r3, #22
 800ee62:	d11e      	bne.n	800eea2 <__sflush_r+0xea>
 800ee64:	602f      	str	r7, [r5, #0]
 800ee66:	2000      	movs	r0, #0
 800ee68:	e022      	b.n	800eeb0 <__sflush_r+0xf8>
 800ee6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee6e:	b21b      	sxth	r3, r3
 800ee70:	e01b      	b.n	800eeaa <__sflush_r+0xf2>
 800ee72:	690f      	ldr	r7, [r1, #16]
 800ee74:	2f00      	cmp	r7, #0
 800ee76:	d0f6      	beq.n	800ee66 <__sflush_r+0xae>
 800ee78:	0793      	lsls	r3, r2, #30
 800ee7a:	680e      	ldr	r6, [r1, #0]
 800ee7c:	bf08      	it	eq
 800ee7e:	694b      	ldreq	r3, [r1, #20]
 800ee80:	600f      	str	r7, [r1, #0]
 800ee82:	bf18      	it	ne
 800ee84:	2300      	movne	r3, #0
 800ee86:	eba6 0807 	sub.w	r8, r6, r7
 800ee8a:	608b      	str	r3, [r1, #8]
 800ee8c:	f1b8 0f00 	cmp.w	r8, #0
 800ee90:	dde9      	ble.n	800ee66 <__sflush_r+0xae>
 800ee92:	6a21      	ldr	r1, [r4, #32]
 800ee94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee96:	4643      	mov	r3, r8
 800ee98:	463a      	mov	r2, r7
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	47b0      	blx	r6
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	dc08      	bgt.n	800eeb4 <__sflush_r+0xfc>
 800eea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeaa:	81a3      	strh	r3, [r4, #12]
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb4:	4407      	add	r7, r0
 800eeb6:	eba8 0800 	sub.w	r8, r8, r0
 800eeba:	e7e7      	b.n	800ee8c <__sflush_r+0xd4>
 800eebc:	20400001 	.word	0x20400001

0800eec0 <_fflush_r>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	690b      	ldr	r3, [r1, #16]
 800eec4:	4605      	mov	r5, r0
 800eec6:	460c      	mov	r4, r1
 800eec8:	b913      	cbnz	r3, 800eed0 <_fflush_r+0x10>
 800eeca:	2500      	movs	r5, #0
 800eecc:	4628      	mov	r0, r5
 800eece:	bd38      	pop	{r3, r4, r5, pc}
 800eed0:	b118      	cbz	r0, 800eeda <_fflush_r+0x1a>
 800eed2:	6a03      	ldr	r3, [r0, #32]
 800eed4:	b90b      	cbnz	r3, 800eeda <_fflush_r+0x1a>
 800eed6:	f7fe f9dd 	bl	800d294 <__sinit>
 800eeda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d0f3      	beq.n	800eeca <_fflush_r+0xa>
 800eee2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eee4:	07d0      	lsls	r0, r2, #31
 800eee6:	d404      	bmi.n	800eef2 <_fflush_r+0x32>
 800eee8:	0599      	lsls	r1, r3, #22
 800eeea:	d402      	bmi.n	800eef2 <_fflush_r+0x32>
 800eeec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeee:	f7fe fb0e 	bl	800d50e <__retarget_lock_acquire_recursive>
 800eef2:	4628      	mov	r0, r5
 800eef4:	4621      	mov	r1, r4
 800eef6:	f7ff ff5f 	bl	800edb8 <__sflush_r>
 800eefa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eefc:	07da      	lsls	r2, r3, #31
 800eefe:	4605      	mov	r5, r0
 800ef00:	d4e4      	bmi.n	800eecc <_fflush_r+0xc>
 800ef02:	89a3      	ldrh	r3, [r4, #12]
 800ef04:	059b      	lsls	r3, r3, #22
 800ef06:	d4e1      	bmi.n	800eecc <_fflush_r+0xc>
 800ef08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef0a:	f7fe fb01 	bl	800d510 <__retarget_lock_release_recursive>
 800ef0e:	e7dd      	b.n	800eecc <_fflush_r+0xc>

0800ef10 <__swbuf_r>:
 800ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef12:	460e      	mov	r6, r1
 800ef14:	4614      	mov	r4, r2
 800ef16:	4605      	mov	r5, r0
 800ef18:	b118      	cbz	r0, 800ef22 <__swbuf_r+0x12>
 800ef1a:	6a03      	ldr	r3, [r0, #32]
 800ef1c:	b90b      	cbnz	r3, 800ef22 <__swbuf_r+0x12>
 800ef1e:	f7fe f9b9 	bl	800d294 <__sinit>
 800ef22:	69a3      	ldr	r3, [r4, #24]
 800ef24:	60a3      	str	r3, [r4, #8]
 800ef26:	89a3      	ldrh	r3, [r4, #12]
 800ef28:	071a      	lsls	r2, r3, #28
 800ef2a:	d501      	bpl.n	800ef30 <__swbuf_r+0x20>
 800ef2c:	6923      	ldr	r3, [r4, #16]
 800ef2e:	b943      	cbnz	r3, 800ef42 <__swbuf_r+0x32>
 800ef30:	4621      	mov	r1, r4
 800ef32:	4628      	mov	r0, r5
 800ef34:	f000 f82a 	bl	800ef8c <__swsetup_r>
 800ef38:	b118      	cbz	r0, 800ef42 <__swbuf_r+0x32>
 800ef3a:	f04f 37ff 	mov.w	r7, #4294967295
 800ef3e:	4638      	mov	r0, r7
 800ef40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	6922      	ldr	r2, [r4, #16]
 800ef46:	1a98      	subs	r0, r3, r2
 800ef48:	6963      	ldr	r3, [r4, #20]
 800ef4a:	b2f6      	uxtb	r6, r6
 800ef4c:	4283      	cmp	r3, r0
 800ef4e:	4637      	mov	r7, r6
 800ef50:	dc05      	bgt.n	800ef5e <__swbuf_r+0x4e>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f7ff ffb3 	bl	800eec0 <_fflush_r>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d1ed      	bne.n	800ef3a <__swbuf_r+0x2a>
 800ef5e:	68a3      	ldr	r3, [r4, #8]
 800ef60:	3b01      	subs	r3, #1
 800ef62:	60a3      	str	r3, [r4, #8]
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	1c5a      	adds	r2, r3, #1
 800ef68:	6022      	str	r2, [r4, #0]
 800ef6a:	701e      	strb	r6, [r3, #0]
 800ef6c:	6962      	ldr	r2, [r4, #20]
 800ef6e:	1c43      	adds	r3, r0, #1
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d004      	beq.n	800ef7e <__swbuf_r+0x6e>
 800ef74:	89a3      	ldrh	r3, [r4, #12]
 800ef76:	07db      	lsls	r3, r3, #31
 800ef78:	d5e1      	bpl.n	800ef3e <__swbuf_r+0x2e>
 800ef7a:	2e0a      	cmp	r6, #10
 800ef7c:	d1df      	bne.n	800ef3e <__swbuf_r+0x2e>
 800ef7e:	4621      	mov	r1, r4
 800ef80:	4628      	mov	r0, r5
 800ef82:	f7ff ff9d 	bl	800eec0 <_fflush_r>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d0d9      	beq.n	800ef3e <__swbuf_r+0x2e>
 800ef8a:	e7d6      	b.n	800ef3a <__swbuf_r+0x2a>

0800ef8c <__swsetup_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4b29      	ldr	r3, [pc, #164]	@ (800f034 <__swsetup_r+0xa8>)
 800ef90:	4605      	mov	r5, r0
 800ef92:	6818      	ldr	r0, [r3, #0]
 800ef94:	460c      	mov	r4, r1
 800ef96:	b118      	cbz	r0, 800efa0 <__swsetup_r+0x14>
 800ef98:	6a03      	ldr	r3, [r0, #32]
 800ef9a:	b90b      	cbnz	r3, 800efa0 <__swsetup_r+0x14>
 800ef9c:	f7fe f97a 	bl	800d294 <__sinit>
 800efa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa4:	0719      	lsls	r1, r3, #28
 800efa6:	d422      	bmi.n	800efee <__swsetup_r+0x62>
 800efa8:	06da      	lsls	r2, r3, #27
 800efaa:	d407      	bmi.n	800efbc <__swsetup_r+0x30>
 800efac:	2209      	movs	r2, #9
 800efae:	602a      	str	r2, [r5, #0]
 800efb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efb4:	81a3      	strh	r3, [r4, #12]
 800efb6:	f04f 30ff 	mov.w	r0, #4294967295
 800efba:	e033      	b.n	800f024 <__swsetup_r+0x98>
 800efbc:	0758      	lsls	r0, r3, #29
 800efbe:	d512      	bpl.n	800efe6 <__swsetup_r+0x5a>
 800efc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efc2:	b141      	cbz	r1, 800efd6 <__swsetup_r+0x4a>
 800efc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efc8:	4299      	cmp	r1, r3
 800efca:	d002      	beq.n	800efd2 <__swsetup_r+0x46>
 800efcc:	4628      	mov	r0, r5
 800efce:	f7ff f895 	bl	800e0fc <_free_r>
 800efd2:	2300      	movs	r3, #0
 800efd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800efd6:	89a3      	ldrh	r3, [r4, #12]
 800efd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	2300      	movs	r3, #0
 800efe0:	6063      	str	r3, [r4, #4]
 800efe2:	6923      	ldr	r3, [r4, #16]
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	89a3      	ldrh	r3, [r4, #12]
 800efe8:	f043 0308 	orr.w	r3, r3, #8
 800efec:	81a3      	strh	r3, [r4, #12]
 800efee:	6923      	ldr	r3, [r4, #16]
 800eff0:	b94b      	cbnz	r3, 800f006 <__swsetup_r+0x7a>
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800effc:	d003      	beq.n	800f006 <__swsetup_r+0x7a>
 800effe:	4621      	mov	r1, r4
 800f000:	4628      	mov	r0, r5
 800f002:	f000 f8eb 	bl	800f1dc <__smakebuf_r>
 800f006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f00a:	f013 0201 	ands.w	r2, r3, #1
 800f00e:	d00a      	beq.n	800f026 <__swsetup_r+0x9a>
 800f010:	2200      	movs	r2, #0
 800f012:	60a2      	str	r2, [r4, #8]
 800f014:	6962      	ldr	r2, [r4, #20]
 800f016:	4252      	negs	r2, r2
 800f018:	61a2      	str	r2, [r4, #24]
 800f01a:	6922      	ldr	r2, [r4, #16]
 800f01c:	b942      	cbnz	r2, 800f030 <__swsetup_r+0xa4>
 800f01e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f022:	d1c5      	bne.n	800efb0 <__swsetup_r+0x24>
 800f024:	bd38      	pop	{r3, r4, r5, pc}
 800f026:	0799      	lsls	r1, r3, #30
 800f028:	bf58      	it	pl
 800f02a:	6962      	ldrpl	r2, [r4, #20]
 800f02c:	60a2      	str	r2, [r4, #8]
 800f02e:	e7f4      	b.n	800f01a <__swsetup_r+0x8e>
 800f030:	2000      	movs	r0, #0
 800f032:	e7f7      	b.n	800f024 <__swsetup_r+0x98>
 800f034:	2400001c 	.word	0x2400001c

0800f038 <memmove>:
 800f038:	4288      	cmp	r0, r1
 800f03a:	b510      	push	{r4, lr}
 800f03c:	eb01 0402 	add.w	r4, r1, r2
 800f040:	d902      	bls.n	800f048 <memmove+0x10>
 800f042:	4284      	cmp	r4, r0
 800f044:	4623      	mov	r3, r4
 800f046:	d807      	bhi.n	800f058 <memmove+0x20>
 800f048:	1e43      	subs	r3, r0, #1
 800f04a:	42a1      	cmp	r1, r4
 800f04c:	d008      	beq.n	800f060 <memmove+0x28>
 800f04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f052:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f056:	e7f8      	b.n	800f04a <memmove+0x12>
 800f058:	4402      	add	r2, r0
 800f05a:	4601      	mov	r1, r0
 800f05c:	428a      	cmp	r2, r1
 800f05e:	d100      	bne.n	800f062 <memmove+0x2a>
 800f060:	bd10      	pop	{r4, pc}
 800f062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f06a:	e7f7      	b.n	800f05c <memmove+0x24>

0800f06c <__assert_func>:
 800f06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f06e:	4614      	mov	r4, r2
 800f070:	461a      	mov	r2, r3
 800f072:	4b09      	ldr	r3, [pc, #36]	@ (800f098 <__assert_func+0x2c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4605      	mov	r5, r0
 800f078:	68d8      	ldr	r0, [r3, #12]
 800f07a:	b14c      	cbz	r4, 800f090 <__assert_func+0x24>
 800f07c:	4b07      	ldr	r3, [pc, #28]	@ (800f09c <__assert_func+0x30>)
 800f07e:	9100      	str	r1, [sp, #0]
 800f080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f084:	4906      	ldr	r1, [pc, #24]	@ (800f0a0 <__assert_func+0x34>)
 800f086:	462b      	mov	r3, r5
 800f088:	f000 f870 	bl	800f16c <fiprintf>
 800f08c:	f000 f904 	bl	800f298 <abort>
 800f090:	4b04      	ldr	r3, [pc, #16]	@ (800f0a4 <__assert_func+0x38>)
 800f092:	461c      	mov	r4, r3
 800f094:	e7f3      	b.n	800f07e <__assert_func+0x12>
 800f096:	bf00      	nop
 800f098:	2400001c 	.word	0x2400001c
 800f09c:	0800f78d 	.word	0x0800f78d
 800f0a0:	0800f79a 	.word	0x0800f79a
 800f0a4:	0800f7c8 	.word	0x0800f7c8

0800f0a8 <_calloc_r>:
 800f0a8:	b570      	push	{r4, r5, r6, lr}
 800f0aa:	fba1 5402 	umull	r5, r4, r1, r2
 800f0ae:	b934      	cbnz	r4, 800f0be <_calloc_r+0x16>
 800f0b0:	4629      	mov	r1, r5
 800f0b2:	f7fd fba1 	bl	800c7f8 <_malloc_r>
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	b928      	cbnz	r0, 800f0c6 <_calloc_r+0x1e>
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	bd70      	pop	{r4, r5, r6, pc}
 800f0be:	220c      	movs	r2, #12
 800f0c0:	6002      	str	r2, [r0, #0]
 800f0c2:	2600      	movs	r6, #0
 800f0c4:	e7f9      	b.n	800f0ba <_calloc_r+0x12>
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	f7fe f992 	bl	800d3f2 <memset>
 800f0ce:	e7f4      	b.n	800f0ba <_calloc_r+0x12>

0800f0d0 <__ascii_mbtowc>:
 800f0d0:	b082      	sub	sp, #8
 800f0d2:	b901      	cbnz	r1, 800f0d6 <__ascii_mbtowc+0x6>
 800f0d4:	a901      	add	r1, sp, #4
 800f0d6:	b142      	cbz	r2, 800f0ea <__ascii_mbtowc+0x1a>
 800f0d8:	b14b      	cbz	r3, 800f0ee <__ascii_mbtowc+0x1e>
 800f0da:	7813      	ldrb	r3, [r2, #0]
 800f0dc:	600b      	str	r3, [r1, #0]
 800f0de:	7812      	ldrb	r2, [r2, #0]
 800f0e0:	1e10      	subs	r0, r2, #0
 800f0e2:	bf18      	it	ne
 800f0e4:	2001      	movne	r0, #1
 800f0e6:	b002      	add	sp, #8
 800f0e8:	4770      	bx	lr
 800f0ea:	4610      	mov	r0, r2
 800f0ec:	e7fb      	b.n	800f0e6 <__ascii_mbtowc+0x16>
 800f0ee:	f06f 0001 	mvn.w	r0, #1
 800f0f2:	e7f8      	b.n	800f0e6 <__ascii_mbtowc+0x16>

0800f0f4 <_realloc_r>:
 800f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	4607      	mov	r7, r0
 800f0fa:	4614      	mov	r4, r2
 800f0fc:	460d      	mov	r5, r1
 800f0fe:	b921      	cbnz	r1, 800f10a <_realloc_r+0x16>
 800f100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f104:	4611      	mov	r1, r2
 800f106:	f7fd bb77 	b.w	800c7f8 <_malloc_r>
 800f10a:	b92a      	cbnz	r2, 800f118 <_realloc_r+0x24>
 800f10c:	f7fe fff6 	bl	800e0fc <_free_r>
 800f110:	4625      	mov	r5, r4
 800f112:	4628      	mov	r0, r5
 800f114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f118:	f000 f8c5 	bl	800f2a6 <_malloc_usable_size_r>
 800f11c:	4284      	cmp	r4, r0
 800f11e:	4606      	mov	r6, r0
 800f120:	d802      	bhi.n	800f128 <_realloc_r+0x34>
 800f122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f126:	d8f4      	bhi.n	800f112 <_realloc_r+0x1e>
 800f128:	4621      	mov	r1, r4
 800f12a:	4638      	mov	r0, r7
 800f12c:	f7fd fb64 	bl	800c7f8 <_malloc_r>
 800f130:	4680      	mov	r8, r0
 800f132:	b908      	cbnz	r0, 800f138 <_realloc_r+0x44>
 800f134:	4645      	mov	r5, r8
 800f136:	e7ec      	b.n	800f112 <_realloc_r+0x1e>
 800f138:	42b4      	cmp	r4, r6
 800f13a:	4622      	mov	r2, r4
 800f13c:	4629      	mov	r1, r5
 800f13e:	bf28      	it	cs
 800f140:	4632      	movcs	r2, r6
 800f142:	f7fe f9e6 	bl	800d512 <memcpy>
 800f146:	4629      	mov	r1, r5
 800f148:	4638      	mov	r0, r7
 800f14a:	f7fe ffd7 	bl	800e0fc <_free_r>
 800f14e:	e7f1      	b.n	800f134 <_realloc_r+0x40>

0800f150 <__ascii_wctomb>:
 800f150:	4603      	mov	r3, r0
 800f152:	4608      	mov	r0, r1
 800f154:	b141      	cbz	r1, 800f168 <__ascii_wctomb+0x18>
 800f156:	2aff      	cmp	r2, #255	@ 0xff
 800f158:	d904      	bls.n	800f164 <__ascii_wctomb+0x14>
 800f15a:	228a      	movs	r2, #138	@ 0x8a
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	f04f 30ff 	mov.w	r0, #4294967295
 800f162:	4770      	bx	lr
 800f164:	700a      	strb	r2, [r1, #0]
 800f166:	2001      	movs	r0, #1
 800f168:	4770      	bx	lr
	...

0800f16c <fiprintf>:
 800f16c:	b40e      	push	{r1, r2, r3}
 800f16e:	b503      	push	{r0, r1, lr}
 800f170:	4601      	mov	r1, r0
 800f172:	ab03      	add	r3, sp, #12
 800f174:	4805      	ldr	r0, [pc, #20]	@ (800f18c <fiprintf+0x20>)
 800f176:	f853 2b04 	ldr.w	r2, [r3], #4
 800f17a:	6800      	ldr	r0, [r0, #0]
 800f17c:	9301      	str	r3, [sp, #4]
 800f17e:	f7ff fd03 	bl	800eb88 <_vfiprintf_r>
 800f182:	b002      	add	sp, #8
 800f184:	f85d eb04 	ldr.w	lr, [sp], #4
 800f188:	b003      	add	sp, #12
 800f18a:	4770      	bx	lr
 800f18c:	2400001c 	.word	0x2400001c

0800f190 <__swhatbuf_r>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	460c      	mov	r4, r1
 800f194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f198:	2900      	cmp	r1, #0
 800f19a:	b096      	sub	sp, #88	@ 0x58
 800f19c:	4615      	mov	r5, r2
 800f19e:	461e      	mov	r6, r3
 800f1a0:	da0d      	bge.n	800f1be <__swhatbuf_r+0x2e>
 800f1a2:	89a3      	ldrh	r3, [r4, #12]
 800f1a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1a8:	f04f 0100 	mov.w	r1, #0
 800f1ac:	bf14      	ite	ne
 800f1ae:	2340      	movne	r3, #64	@ 0x40
 800f1b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	6031      	str	r1, [r6, #0]
 800f1b8:	602b      	str	r3, [r5, #0]
 800f1ba:	b016      	add	sp, #88	@ 0x58
 800f1bc:	bd70      	pop	{r4, r5, r6, pc}
 800f1be:	466a      	mov	r2, sp
 800f1c0:	f000 f848 	bl	800f254 <_fstat_r>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	dbec      	blt.n	800f1a2 <__swhatbuf_r+0x12>
 800f1c8:	9901      	ldr	r1, [sp, #4]
 800f1ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f1ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f1d2:	4259      	negs	r1, r3
 800f1d4:	4159      	adcs	r1, r3
 800f1d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1da:	e7eb      	b.n	800f1b4 <__swhatbuf_r+0x24>

0800f1dc <__smakebuf_r>:
 800f1dc:	898b      	ldrh	r3, [r1, #12]
 800f1de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1e0:	079d      	lsls	r5, r3, #30
 800f1e2:	4606      	mov	r6, r0
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	d507      	bpl.n	800f1f8 <__smakebuf_r+0x1c>
 800f1e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1ec:	6023      	str	r3, [r4, #0]
 800f1ee:	6123      	str	r3, [r4, #16]
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	6163      	str	r3, [r4, #20]
 800f1f4:	b003      	add	sp, #12
 800f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1f8:	ab01      	add	r3, sp, #4
 800f1fa:	466a      	mov	r2, sp
 800f1fc:	f7ff ffc8 	bl	800f190 <__swhatbuf_r>
 800f200:	9f00      	ldr	r7, [sp, #0]
 800f202:	4605      	mov	r5, r0
 800f204:	4639      	mov	r1, r7
 800f206:	4630      	mov	r0, r6
 800f208:	f7fd faf6 	bl	800c7f8 <_malloc_r>
 800f20c:	b948      	cbnz	r0, 800f222 <__smakebuf_r+0x46>
 800f20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f212:	059a      	lsls	r2, r3, #22
 800f214:	d4ee      	bmi.n	800f1f4 <__smakebuf_r+0x18>
 800f216:	f023 0303 	bic.w	r3, r3, #3
 800f21a:	f043 0302 	orr.w	r3, r3, #2
 800f21e:	81a3      	strh	r3, [r4, #12]
 800f220:	e7e2      	b.n	800f1e8 <__smakebuf_r+0xc>
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	6020      	str	r0, [r4, #0]
 800f226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f22a:	81a3      	strh	r3, [r4, #12]
 800f22c:	9b01      	ldr	r3, [sp, #4]
 800f22e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f232:	b15b      	cbz	r3, 800f24c <__smakebuf_r+0x70>
 800f234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f238:	4630      	mov	r0, r6
 800f23a:	f000 f81d 	bl	800f278 <_isatty_r>
 800f23e:	b128      	cbz	r0, 800f24c <__smakebuf_r+0x70>
 800f240:	89a3      	ldrh	r3, [r4, #12]
 800f242:	f023 0303 	bic.w	r3, r3, #3
 800f246:	f043 0301 	orr.w	r3, r3, #1
 800f24a:	81a3      	strh	r3, [r4, #12]
 800f24c:	89a3      	ldrh	r3, [r4, #12]
 800f24e:	431d      	orrs	r5, r3
 800f250:	81a5      	strh	r5, [r4, #12]
 800f252:	e7cf      	b.n	800f1f4 <__smakebuf_r+0x18>

0800f254 <_fstat_r>:
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4d07      	ldr	r5, [pc, #28]	@ (800f274 <_fstat_r+0x20>)
 800f258:	2300      	movs	r3, #0
 800f25a:	4604      	mov	r4, r0
 800f25c:	4608      	mov	r0, r1
 800f25e:	4611      	mov	r1, r2
 800f260:	602b      	str	r3, [r5, #0]
 800f262:	f7f2 f971 	bl	8001548 <_fstat>
 800f266:	1c43      	adds	r3, r0, #1
 800f268:	d102      	bne.n	800f270 <_fstat_r+0x1c>
 800f26a:	682b      	ldr	r3, [r5, #0]
 800f26c:	b103      	cbz	r3, 800f270 <_fstat_r+0x1c>
 800f26e:	6023      	str	r3, [r4, #0]
 800f270:	bd38      	pop	{r3, r4, r5, pc}
 800f272:	bf00      	nop
 800f274:	24000e04 	.word	0x24000e04

0800f278 <_isatty_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d06      	ldr	r5, [pc, #24]	@ (800f294 <_isatty_r+0x1c>)
 800f27c:	2300      	movs	r3, #0
 800f27e:	4604      	mov	r4, r0
 800f280:	4608      	mov	r0, r1
 800f282:	602b      	str	r3, [r5, #0]
 800f284:	f7f2 f970 	bl	8001568 <_isatty>
 800f288:	1c43      	adds	r3, r0, #1
 800f28a:	d102      	bne.n	800f292 <_isatty_r+0x1a>
 800f28c:	682b      	ldr	r3, [r5, #0]
 800f28e:	b103      	cbz	r3, 800f292 <_isatty_r+0x1a>
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	bd38      	pop	{r3, r4, r5, pc}
 800f294:	24000e04 	.word	0x24000e04

0800f298 <abort>:
 800f298:	b508      	push	{r3, lr}
 800f29a:	2006      	movs	r0, #6
 800f29c:	f000 f834 	bl	800f308 <raise>
 800f2a0:	2001      	movs	r0, #1
 800f2a2:	f7f2 f901 	bl	80014a8 <_exit>

0800f2a6 <_malloc_usable_size_r>:
 800f2a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2aa:	1f18      	subs	r0, r3, #4
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	bfbc      	itt	lt
 800f2b0:	580b      	ldrlt	r3, [r1, r0]
 800f2b2:	18c0      	addlt	r0, r0, r3
 800f2b4:	4770      	bx	lr

0800f2b6 <_raise_r>:
 800f2b6:	291f      	cmp	r1, #31
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	460c      	mov	r4, r1
 800f2be:	d904      	bls.n	800f2ca <_raise_r+0x14>
 800f2c0:	2316      	movs	r3, #22
 800f2c2:	6003      	str	r3, [r0, #0]
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2cc:	b112      	cbz	r2, 800f2d4 <_raise_r+0x1e>
 800f2ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2d2:	b94b      	cbnz	r3, 800f2e8 <_raise_r+0x32>
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f000 f831 	bl	800f33c <_getpid_r>
 800f2da:	4622      	mov	r2, r4
 800f2dc:	4601      	mov	r1, r0
 800f2de:	4628      	mov	r0, r5
 800f2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2e4:	f000 b818 	b.w	800f318 <_kill_r>
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d00a      	beq.n	800f302 <_raise_r+0x4c>
 800f2ec:	1c59      	adds	r1, r3, #1
 800f2ee:	d103      	bne.n	800f2f8 <_raise_r+0x42>
 800f2f0:	2316      	movs	r3, #22
 800f2f2:	6003      	str	r3, [r0, #0]
 800f2f4:	2001      	movs	r0, #1
 800f2f6:	e7e7      	b.n	800f2c8 <_raise_r+0x12>
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2fe:	4620      	mov	r0, r4
 800f300:	4798      	blx	r3
 800f302:	2000      	movs	r0, #0
 800f304:	e7e0      	b.n	800f2c8 <_raise_r+0x12>
	...

0800f308 <raise>:
 800f308:	4b02      	ldr	r3, [pc, #8]	@ (800f314 <raise+0xc>)
 800f30a:	4601      	mov	r1, r0
 800f30c:	6818      	ldr	r0, [r3, #0]
 800f30e:	f7ff bfd2 	b.w	800f2b6 <_raise_r>
 800f312:	bf00      	nop
 800f314:	2400001c 	.word	0x2400001c

0800f318 <_kill_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4d07      	ldr	r5, [pc, #28]	@ (800f338 <_kill_r+0x20>)
 800f31c:	2300      	movs	r3, #0
 800f31e:	4604      	mov	r4, r0
 800f320:	4608      	mov	r0, r1
 800f322:	4611      	mov	r1, r2
 800f324:	602b      	str	r3, [r5, #0]
 800f326:	f7f2 f8af 	bl	8001488 <_kill>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d102      	bne.n	800f334 <_kill_r+0x1c>
 800f32e:	682b      	ldr	r3, [r5, #0]
 800f330:	b103      	cbz	r3, 800f334 <_kill_r+0x1c>
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	bd38      	pop	{r3, r4, r5, pc}
 800f336:	bf00      	nop
 800f338:	24000e04 	.word	0x24000e04

0800f33c <_getpid_r>:
 800f33c:	f7f2 b89c 	b.w	8001478 <_getpid>

0800f340 <_init>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	bf00      	nop
 800f344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f346:	bc08      	pop	{r3}
 800f348:	469e      	mov	lr, r3
 800f34a:	4770      	bx	lr

0800f34c <_fini>:
 800f34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34e:	bf00      	nop
 800f350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f352:	bc08      	pop	{r3}
 800f354:	469e      	mov	lr, r3
 800f356:	4770      	bx	lr
